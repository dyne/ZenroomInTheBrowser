(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict';

const asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":3,"./asn1/base":5,"./asn1/constants":9,"./asn1/decoders":11,"./asn1/encoders":14,"bn.js":16}],3:[function(require,module,exports){
'use strict';

const encoders = require('./encoders');
const decoders = require('./decoders');
const inherits = require('inherits');

const api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
}

Entity.prototype._createNamed = function createNamed(Base) {
  const name = this.name;

  function Generated(entity) {
    this._initNamed(entity, name);
  }
  inherits(Generated, Base);
  Generated.prototype._initNamed = function _initNamed(entity, name) {
    Base.call(this, entity, name);
  };

  return new Generated(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"./decoders":11,"./encoders":14,"inherits":135}],4:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Reporter = require('../base/reporter').Reporter;
const Buffer = require('safer-buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
  if (data instanceof DecoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    Buffer.isBuffer(data.base) &&
    data.constructor.name === 'DecoderBuffer' &&
    typeof data.offset === 'number' &&
    typeof data.length === 'number' &&
    typeof data.save === 'function' &&
    typeof data.restore === 'function' &&
    typeof data.isEmpty === 'function' &&
    typeof data.readUInt8 === 'function' &&
    typeof data.skip === 'function' &&
    typeof data.raw === 'function';

  return isCompatible;
};

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  const res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  const res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!EncoderBuffer.isEncoderBuffer(item))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
  if (data instanceof EncoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    data.constructor.name === 'EncoderBuffer' &&
    typeof data.length === 'number' &&
    typeof data.join === 'function';

  return isCompatible;
};

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = Buffer.alloc(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base/reporter":7,"inherits":135,"safer-buffer":183}],5:[function(require,module,exports){
'use strict';

const base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":4,"./node":6,"./reporter":7}],6:[function(require,module,exports){
'use strict';

const Reporter = require('../base/reporter').Reporter;
const EncoderBuffer = require('../base/buffer').EncoderBuffer;
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const assert = require('minimalistic-assert');

// Supported tags
const tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
const methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
const overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent, name) {
  const state = {};
  this._baseState = state;

  state.name = name;
  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

const stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  const state = this._baseState;
  const cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  const res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  const state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      const clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  const state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  const state = this._baseState;

  // Filter children and args
  const children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      const res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        const value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    const state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  const state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  const state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  const state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  const state = this._baseState;
  const args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  const state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  const state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  const state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  const state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  let result = state['default'];
  let present = true;

  let prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    let tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      const save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  let prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      const explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    const start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      let save;
      if (state.any)
        save = input.save();
      const body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) {
      // no-op
    } else if (state.choice === null) {
      result = this._decodeGeneric(state.tag, input, options);
    } else {
      result = this._decodeChoice(input, options);
    }

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      const data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
        ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  const state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
      ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  const state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  const state = this._baseState;
  let result = null;
  let match = false;

  Object.keys(state.choice).some(function(key) {
    const save = input.save();
    const node = state.choice[key];
    try {
      const value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  const state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  const result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  let result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default'];
    else
      return;
  }

  // Encode children first
  let content = null;
  let primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      const prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      const res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      const child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        const state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  if (!state.any && state.choice === null) {
    const tag = state.implicit !== null ? state.implicit : state.tag;
    const cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  const state = this._baseState;

  const node = state.choice[data.type];
  if (!node) {
    assert(
      false,
      data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  const state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/buffer":4,"../base/reporter":7,"minimalistic-assert":141}],7:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  const state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  const state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  const state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  const state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  const state = this._reporterState;

  const prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  const state = this._reporterState;

  const now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  let err;
  const state = this._reporterState;

  const inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  const state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":135}],8:[function(require,module,exports){
'use strict';

// Helper
function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
}

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

},{}],9:[function(require,module,exports){
'use strict';

const constants = exports;

// Helper
constants._reverse = function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":8}],10:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const bignum = require('bn.js');
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!DecoderBuffer.isDecoderBuffer(data)) {
    data = new DecoderBuffer(data, options);
  }

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  const state = buffer.save();
  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  const decodedTag = derDecodeTag(buffer,
    'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  let len = derDecodeLen(buffer,
    decodedTag.primitive,
    'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  const state = buffer.save();
  const res = this._skipUntilEnd(
    buffer,
    'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  for (;;) {
    const tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    const len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    let res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len);
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
  options) {
  const result = [];
  while (!buffer.isEmpty()) {
    const possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    const res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    const unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    const raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    let str = '';
    for (let i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    const numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    const printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  let result;
  const identifiers = [];
  let ident = 0;
  let subident = 0;
  while (!buffer.isEmpty()) {
    subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  const first = (identifiers[0] / 40) | 0;
  const second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    let tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  const str = buffer.raw().toString();

  let year;
  let mon;
  let day;
  let hour;
  let min;
  let sec;
  if (tag === 'gentime') {
    year = str.slice(0, 4) | 0;
    mon = str.slice(4, 6) | 0;
    day = str.slice(6, 8) | 0;
    hour = str.slice(8, 10) | 0;
    min = str.slice(10, 12) | 0;
    sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    year = str.slice(0, 2) | 0;
    mon = str.slice(2, 4) | 0;
    day = str.slice(4, 6) | 0;
    hour = str.slice(6, 8) | 0;
    min = str.slice(8, 10) | 0;
    sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull() {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  const res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  const raw = buffer.raw();
  let res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  let tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  const cls = der.tagClass[tag >> 6];
  const primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    let oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  const tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  let len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  const num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (let i = 0; i < num; i++) {
    len <<= 8;
    const j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../base/buffer":4,"../base/node":6,"../constants/der":8,"bn.js":16,"inherits":135}],11:[function(require,module,exports){
'use strict';

const decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":10,"./pem":12}],12:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;

const DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  const lines = data.toString().split(/[\r\n]+/g);

  const label = options.label.toUpperCase();

  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
  let start = -1;
  let end = -1;
  for (let i = 0; i < lines.length; i++) {
    const match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  const base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9+/=]+/gi, '');

  const input = Buffer.from(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":10,"inherits":135,"safer-buffer":183}],13:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
  primitive,
  cls,
  content) {
  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    const header = Buffer.alloc(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  let lenOctets = 1;
  for (let i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  const header = Buffer.alloc(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    const buf = Buffer.alloc(str.length * 2);
    for (let i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s.]+/g);
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  let size = 0;
  for (let i = 0; i < id.length; i++) {
    let ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  const objid = Buffer.alloc(size);
  let offset = objid.length - 1;
  for (let i = id.length - 1; i >= 0; i--) {
    let ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  let str;
  const date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getUTCFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getUTCFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    const numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = Buffer.from(numArray);
  }

  if (Buffer.isBuffer(num)) {
    let size = num.length;
    if (num.length === 0)
      size++;

    const out = Buffer.alloc(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  let size = 1;
  for (let i = num; i >= 0x100; i >>= 8)
    size++;

  const out = new Array(size);
  for (let i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(Buffer.from(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  const state = this._baseState;
  let i;
  if (state['default'] === null)
    return false;

  const data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  let res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../base/node":6,"../constants/der":8,"inherits":135,"safer-buffer":183}],14:[function(require,module,exports){
'use strict';

const encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":13,"./pem":15}],15:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  const buf = DEREncoder.prototype.encode.call(this, data);

  const p = buf.toString('base64');
  const out = [ '-----BEGIN ' + options.label + '-----' ];
  for (let i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":13,"inherits":135}],16:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":20}],17:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],18:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this._strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    var z = 0;
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      var b;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        b = c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }

      r |= b;
      z |= b;
    }

    assert(!(z & 0xf0), 'Invalid character in ' + str);
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":20}],19:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":20}],20:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],21:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":182}],22:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":21,"./ghash":26,"./incr32":27,"buffer-xor":64,"cipher-base":66,"inherits":135,"safe-buffer":182}],23:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":24,"./encrypter":25,"./modes/list.json":35}],24:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":21,"./authCipher":22,"./modes":34,"./streamCipher":37,"cipher-base":66,"evp_bytestokey":104,"inherits":135,"safe-buffer":182}],25:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":21,"./authCipher":22,"./modes":34,"./streamCipher":37,"cipher-base":66,"evp_bytestokey":104,"inherits":135,"safe-buffer":182}],26:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":182}],27:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],28:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":64}],29:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":64,"safe-buffer":182}],30:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":182}],31:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":182}],32:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":27,"buffer-xor":64,"safe-buffer":182}],33:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],34:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":28,"./cfb":29,"./cfb1":30,"./cfb8":31,"./ctr":32,"./ecb":33,"./list.json":35,"./ofb":36}],35:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],36:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"buffer":65,"buffer-xor":64}],37:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":21,"cipher-base":66,"inherits":135,"safe-buffer":182}],38:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":23,"browserify-aes/modes":34,"browserify-des":39,"browserify-des/modes":40,"evp_bytestokey":104}],39:[function(require,module,exports){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":66,"des.js":75,"inherits":135,"safe-buffer":182}],40:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],41:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this,require("buffer").Buffer)
},{"bn.js":42,"buffer":65,"randombytes":164}],42:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],43:[function(require,module,exports){
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":44}],44:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],45:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],46:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var createHash = require('create-hash')
var stream = require('readable-stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = Buffer.from(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

},{"./algorithms.json":44,"./sign":47,"./verify":48,"create-hash":70,"inherits":135,"readable-stream":63,"safe-buffer":182}],47:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [0, 1]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return Buffer.from(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r)
  if (s[0] & 0x80) s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [0x30, total, 0x02, r.length]
  res = res.concat(r, [0x02, s.length], s)
  return Buffer.from(res)
}

function getKey (x, q, hash, algo) {
  x = Buffer.from(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = Buffer.alloc(hlen)
  v.fill(1)
  var k = Buffer.alloc(hlen)
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = Buffer.from(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = Buffer.alloc(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

},{"./curves.json":45,"bn.js":18,"browserify-rsa":41,"create-hmac":72,"elliptic":86,"parse-asn1":147,"safe-buffer":182}],48:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [1]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = Buffer.from(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = Buffer.from(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

},{"./curves.json":45,"bn.js":18,"elliptic":86,"parse-asn1":147,"safe-buffer":182}],49:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],50:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this,require('_process'))
},{"./_stream_readable":52,"./_stream_writable":54,"_process":156,"inherits":135}],51:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":53,"inherits":135}],52:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":49,"./_stream_duplex":50,"./internal/streams/async_iterator":55,"./internal/streams/buffer_list":56,"./internal/streams/destroy":57,"./internal/streams/from":59,"./internal/streams/state":61,"./internal/streams/stream":62,"_process":156,"buffer":65,"events":103,"inherits":135,"string_decoder/":193,"util":20}],53:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":49,"./_stream_duplex":50,"inherits":135}],54:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":49,"./_stream_duplex":50,"./internal/streams/destroy":57,"./internal/streams/state":61,"./internal/streams/stream":62,"_process":156,"buffer":65,"inherits":135,"util-deprecate":195}],55:[function(require,module,exports){
(function (process){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this,require('_process'))
},{"./end-of-stream":58,"_process":156}],56:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":65,"util":20}],57:[function(require,module,exports){
(function (process){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this,require('_process'))
},{"_process":156}],58:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":49}],59:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],60:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":49,"./end-of-stream":58}],61:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":49}],62:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":103}],63:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":50,"./lib/_stream_passthrough.js":51,"./lib/_stream_readable.js":52,"./lib/_stream_transform.js":53,"./lib/_stream_writable.js":54,"./lib/internal/streams/end-of-stream.js":58,"./lib/internal/streams/pipeline.js":60}],64:[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
},{"buffer":65}],65:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this,require("buffer").Buffer)
},{"base64-js":17,"buffer":65,"ieee754":134}],66:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":135,"safe-buffer":182,"stream":192,"string_decoder":193}],67:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":136}],68:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this,require("buffer").Buffer)
},{"bn.js":69,"buffer":65,"elliptic":86}],69:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],70:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":66,"inherits":135,"md5.js":138,"ripemd160":181,"sha.js":185}],71:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":138}],72:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":73,"cipher-base":66,"create-hash/md5":71,"inherits":135,"ripemd160":181,"safe-buffer":182,"sha.js":185}],73:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":66,"inherits":135,"safe-buffer":182}],74:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":38,"browserify-sign":46,"browserify-sign/algos":43,"create-ecdh":68,"create-hash":70,"create-hmac":72,"diffie-hellman":81,"pbkdf2":149,"public-encrypt":157,"randombytes":164,"randomfill":165}],75:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":76,"./des/cipher":77,"./des/des":78,"./des/ede":79,"./des/utils":80}],76:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":135,"minimalistic-assert":141}],77:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":141}],78:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var utils = require('./utils');
var Cipher = require('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"./cipher":77,"./utils":80,"inherits":135,"minimalistic-assert":141}],79:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var Cipher = require('./cipher');
var DES = require('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"./cipher":77,"./des":78,"inherits":135,"minimalistic-assert":141}],80:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],81:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this,require("buffer").Buffer)
},{"./lib/dh":82,"./lib/generatePrime":83,"./lib/primes.json":84,"buffer":65}],82:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this,require("buffer").Buffer)
},{"./generatePrime":83,"bn.js":85,"buffer":65,"miller-rabin":139,"randombytes":164}],83:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":85,"miller-rabin":139,"randombytes":164}],84:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],85:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],86:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":102,"./elliptic/curve":89,"./elliptic/curves":92,"./elliptic/ec":93,"./elliptic/eddsa":96,"./elliptic/utils":100,"brorand":19}],87:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":100,"bn.js":101}],88:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":100,"./base":87,"bn.js":101,"inherits":135}],89:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":87,"./edwards":88,"./mont":90,"./short":91}],90:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":100,"./base":87,"bn.js":101,"inherits":135}],91:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":100,"./base":87,"bn.js":101,"inherits":135}],92:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"./curve":89,"./precomputed/secp256k1":99,"./utils":100,"hash.js":121}],93:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":92,"../utils":100,"./key":94,"./signature":95,"bn.js":101,"brorand":19,"hmac-drbg":133}],94:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":100,"bn.js":101}],95:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":100,"bn.js":101}],96:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":92,"../utils":100,"./key":97,"./signature":98,"hash.js":121}],97:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":100}],98:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":100,"bn.js":101}],99:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],100:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":101,"minimalistic-assert":141,"minimalistic-crypto-utils":142}],101:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],102:[function(require,module,exports){
module.exports={
  "_from": "elliptic@^6.5.3",
  "_id": "elliptic@6.5.3",
  "_inBundle": false,
  "_integrity": "sha512-IMqzv5wNQf+E6aHeIqATs0tOLeOTwj1QKbRcS3jBbYkl5oLAserA8yJTT7/VyHUYG91PRmPyeQDObKLPpeS4dw==",
  "_location": "/browserify/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "elliptic@^6.5.3",
    "name": "elliptic",
    "escapedName": "elliptic",
    "rawSpec": "^6.5.3",
    "saveSpec": null,
    "fetchSpec": "^6.5.3"
  },
  "_requiredBy": [
    "/browserify/browserify-sign",
    "/browserify/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.3.tgz",
  "_shasum": "cb59eb2efdaf73a0bd78ccd7015a62ad6e0f93d6",
  "_spec": "elliptic@^6.5.3",
  "_where": "C:\\Program Files\\nodejs\\node_modules\\browserify\\node_modules\\browserify-sign",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  },
  "deprecated": false,
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^3.0.8",
    "grunt": "^1.0.4",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.2",
    "jscs": "^3.0.7",
    "jshint": "^2.10.3",
    "mocha": "^6.2.2"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.5.3"
}

},{}],103:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],104:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":138,"safe-buffer":182}],105:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('readable-stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":135,"readable-stream":120,"safe-buffer":182}],106:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49}],107:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"./_stream_readable":109,"./_stream_writable":111,"_process":156,"dup":50,"inherits":135}],108:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"./_stream_transform":110,"dup":51,"inherits":135}],109:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../errors":106,"./_stream_duplex":107,"./internal/streams/async_iterator":112,"./internal/streams/buffer_list":113,"./internal/streams/destroy":114,"./internal/streams/from":116,"./internal/streams/state":118,"./internal/streams/stream":119,"_process":156,"buffer":65,"dup":52,"events":103,"inherits":135,"string_decoder/":193,"util":20}],110:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"../errors":106,"./_stream_duplex":107,"dup":53,"inherits":135}],111:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"../errors":106,"./_stream_duplex":107,"./internal/streams/destroy":114,"./internal/streams/state":118,"./internal/streams/stream":119,"_process":156,"buffer":65,"dup":54,"inherits":135,"util-deprecate":195}],112:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"./end-of-stream":115,"_process":156,"dup":55}],113:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"buffer":65,"dup":56,"util":20}],114:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"_process":156,"dup":57}],115:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"../../../errors":106,"dup":58}],116:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"dup":59}],117:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"../../../errors":106,"./end-of-stream":115,"dup":60}],118:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"../../../errors":106,"dup":61}],119:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"dup":62,"events":103}],120:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":107,"./lib/_stream_passthrough.js":108,"./lib/_stream_readable.js":109,"./lib/_stream_transform.js":110,"./lib/_stream_writable.js":111,"./lib/internal/streams/end-of-stream.js":115,"./lib/internal/streams/pipeline.js":117,"dup":63}],121:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":122,"./hash/hmac":123,"./hash/ripemd":124,"./hash/sha":125,"./hash/utils":132}],122:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":132,"minimalistic-assert":141}],123:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":132,"minimalistic-assert":141}],124:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":122,"./utils":132}],125:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":126,"./sha/224":127,"./sha/256":128,"./sha/384":129,"./sha/512":130}],126:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":122,"../utils":132,"./common":131}],127:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":132,"./256":128}],128:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":122,"../utils":132,"./common":131,"minimalistic-assert":141}],129:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":132,"./512":130}],130:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":122,"../utils":132,"minimalistic-assert":141}],131:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":132}],132:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":135,"minimalistic-assert":141}],133:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":121,"minimalistic-assert":141,"minimalistic-crypto-utils":142}],134:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],135:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],136:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],137:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],138:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":105,"inherits":135,"safe-buffer":182}],139:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":140,"brorand":19}],140:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],141:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],142:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],143:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],144:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":145,"asn1.js":2}],145:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":2}],146:[function(require,module,exports){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"browserify-aes":23,"evp_bytestokey":104,"safe-buffer":182}],147:[function(require,module,exports){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./aesid.json":143,"./asn1":144,"./fixProc":146,"browserify-aes":23,"pbkdf2":149,"safe-buffer":182}],148:[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":156}],149:[function(require,module,exports){
exports.pbkdf2 = require('./lib/async')
exports.pbkdf2Sync = require('./lib/sync')

},{"./lib/async":150,"./lib/sync":153}],150:[function(require,module,exports){
(function (process,global){
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var sync = require('./sync')
var toBuffer = require('./to-buffer')

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  sha: 'SHA-1',
  'sha-1': 'SHA-1',
  sha1: 'SHA-1',
  sha256: 'SHA-256',
  'sha-256': 'SHA-256',
  sha384: 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  sha512: 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":151,"./precondition":152,"./sync":153,"./to-buffer":154,"_process":156,"safe-buffer":182}],151:[function(require,module,exports){
(function (process){
var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else if (process.version) {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
} else {
  defaultEncoding = 'utf-8'
}
module.exports = defaultEncoding

}).call(this,require('_process'))
},{"_process":156}],152:[function(require,module,exports){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

},{}],153:[function(require,module,exports){
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var toBuffer = require('./to-buffer')

var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":151,"./precondition":152,"./to-buffer":154,"create-hash/md5":71,"ripemd160":181,"safe-buffer":182,"sha.js":185}],154:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

module.exports = function (thing, encoding, name) {
  if (Buffer.isBuffer(thing)) {
    return thing
  } else if (typeof thing === 'string') {
    return Buffer.from(thing, encoding)
  } else if (ArrayBuffer.isView(thing)) {
    return Buffer.from(thing.buffer)
  } else {
    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
  }
}

},{"safe-buffer":182}],155:[function(require,module,exports){
(function (process){
'use strict';

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


}).call(this,require('_process'))
},{"_process":156}],156:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],157:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":160,"./publicEncrypt":161}],158:[function(require,module,exports){
var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":70,"safe-buffer":182}],159:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"buffer":20,"dup":16}],160:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":158,"./withPublic":162,"./xor":163,"bn.js":159,"browserify-rsa":41,"create-hash":70,"parse-asn1":147,"safe-buffer":182}],161:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":158,"./withPublic":162,"./xor":163,"bn.js":159,"browserify-rsa":41,"create-hash":70,"parse-asn1":147,"randombytes":164,"safe-buffer":182}],162:[function(require,module,exports){
var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":159,"safe-buffer":182}],163:[function(require,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],164:[function(require,module,exports){
(function (process,global){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":156,"safe-buffer":182}],165:[function(require,module,exports){
(function (process,global){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":156,"randombytes":164,"safe-buffer":182}],166:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":167}],167:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"./_stream_readable":169,"./_stream_writable":171,"core-util-is":67,"inherits":135,"process-nextick-args":155}],168:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":170,"core-util-is":67,"inherits":135}],169:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":167,"./internal/streams/BufferList":172,"./internal/streams/destroy":173,"./internal/streams/stream":174,"_process":156,"core-util-is":67,"events":103,"inherits":135,"isarray":137,"process-nextick-args":155,"safe-buffer":175,"string_decoder/":176,"util":20}],170:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":167,"core-util-is":67,"inherits":135}],171:[function(require,module,exports){
(function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
},{"./_stream_duplex":167,"./internal/streams/destroy":173,"./internal/streams/stream":174,"_process":156,"core-util-is":67,"inherits":135,"process-nextick-args":155,"safe-buffer":175,"timers":194,"util-deprecate":195}],172:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":175,"util":20}],173:[function(require,module,exports){
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":155}],174:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"dup":62,"events":103}],175:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":65}],176:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":175}],177:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":178}],178:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":167,"./lib/_stream_passthrough.js":168,"./lib/_stream_readable.js":169,"./lib/_stream_transform.js":170,"./lib/_stream_writable.js":171}],179:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":178}],180:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":171}],181:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":65,"hash-base":105,"inherits":135}],182:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":65}],183:[function(require,module,exports){
(function (process){
/* eslint-disable node/no-deprecated-api */

'use strict'

var buffer = require('buffer')
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer

}).call(this,require('_process'))
},{"_process":156,"buffer":65}],184:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":182}],185:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":186,"./sha1":187,"./sha224":188,"./sha256":189,"./sha384":190,"./sha512":191}],186:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":184,"inherits":135,"safe-buffer":182}],187:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":184,"inherits":135,"safe-buffer":182}],188:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":184,"./sha256":189,"inherits":135,"safe-buffer":182}],189:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":184,"inherits":135,"safe-buffer":182}],190:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":184,"./sha512":191,"inherits":135,"safe-buffer":182}],191:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":184,"inherits":135,"safe-buffer":182}],192:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":103,"inherits":135,"readable-stream/duplex.js":166,"readable-stream/passthrough.js":177,"readable-stream/readable.js":178,"readable-stream/transform.js":179,"readable-stream/writable.js":180}],193:[function(require,module,exports){
arguments[4][176][0].apply(exports,arguments)
},{"dup":176,"safe-buffer":182}],194:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":156,"timers":194}],195:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],196:[function(require,module,exports){
require('../modules/es.symbol');
require('../modules/es.symbol.async-iterator');
require('../modules/es.symbol.description');
require('../modules/es.symbol.has-instance');
require('../modules/es.symbol.is-concat-spreadable');
require('../modules/es.symbol.iterator');
require('../modules/es.symbol.match');
require('../modules/es.symbol.match-all');
require('../modules/es.symbol.replace');
require('../modules/es.symbol.search');
require('../modules/es.symbol.species');
require('../modules/es.symbol.split');
require('../modules/es.symbol.to-primitive');
require('../modules/es.symbol.to-string-tag');
require('../modules/es.symbol.unscopables');
require('../modules/es.object.assign');
require('../modules/es.object.create');
require('../modules/es.object.define-property');
require('../modules/es.object.define-properties');
require('../modules/es.object.entries');
require('../modules/es.object.freeze');
require('../modules/es.object.from-entries');
require('../modules/es.object.get-own-property-descriptor');
require('../modules/es.object.get-own-property-descriptors');
require('../modules/es.object.get-own-property-names');
require('../modules/es.object.get-prototype-of');
require('../modules/es.object.is');
require('../modules/es.object.is-extensible');
require('../modules/es.object.is-frozen');
require('../modules/es.object.is-sealed');
require('../modules/es.object.keys');
require('../modules/es.object.prevent-extensions');
require('../modules/es.object.seal');
require('../modules/es.object.set-prototype-of');
require('../modules/es.object.values');
require('../modules/es.object.to-string');
require('../modules/es.object.define-getter');
require('../modules/es.object.define-setter');
require('../modules/es.object.lookup-getter');
require('../modules/es.object.lookup-setter');
require('../modules/es.function.bind');
require('../modules/es.function.name');
require('../modules/es.function.has-instance');
require('../modules/es.global-this');
require('../modules/es.array.from');
require('../modules/es.array.is-array');
require('../modules/es.array.of');
require('../modules/es.array.concat');
require('../modules/es.array.copy-within');
require('../modules/es.array.every');
require('../modules/es.array.fill');
require('../modules/es.array.filter');
require('../modules/es.array.find');
require('../modules/es.array.find-index');
require('../modules/es.array.flat');
require('../modules/es.array.flat-map');
require('../modules/es.array.for-each');
require('../modules/es.array.includes');
require('../modules/es.array.index-of');
require('../modules/es.array.join');
require('../modules/es.array.last-index-of');
require('../modules/es.array.map');
require('../modules/es.array.reduce');
require('../modules/es.array.reduce-right');
require('../modules/es.array.reverse');
require('../modules/es.array.slice');
require('../modules/es.array.some');
require('../modules/es.array.sort');
require('../modules/es.array.splice');
require('../modules/es.array.species');
require('../modules/es.array.unscopables.flat');
require('../modules/es.array.unscopables.flat-map');
require('../modules/es.array.iterator');
require('../modules/es.string.from-code-point');
require('../modules/es.string.raw');
require('../modules/es.string.code-point-at');
require('../modules/es.string.ends-with');
require('../modules/es.string.includes');
require('../modules/es.string.match');
require('../modules/es.string.match-all');
require('../modules/es.string.pad-end');
require('../modules/es.string.pad-start');
require('../modules/es.string.repeat');
require('../modules/es.string.replace');
require('../modules/es.string.search');
require('../modules/es.string.split');
require('../modules/es.string.starts-with');
require('../modules/es.string.trim');
require('../modules/es.string.trim-start');
require('../modules/es.string.trim-end');
require('../modules/es.string.iterator');
require('../modules/es.string.anchor');
require('../modules/es.string.big');
require('../modules/es.string.blink');
require('../modules/es.string.bold');
require('../modules/es.string.fixed');
require('../modules/es.string.fontcolor');
require('../modules/es.string.fontsize');
require('../modules/es.string.italics');
require('../modules/es.string.link');
require('../modules/es.string.small');
require('../modules/es.string.strike');
require('../modules/es.string.sub');
require('../modules/es.string.sup');
require('../modules/es.regexp.constructor');
require('../modules/es.regexp.exec');
require('../modules/es.regexp.flags');
require('../modules/es.regexp.sticky');
require('../modules/es.regexp.test');
require('../modules/es.regexp.to-string');
require('../modules/es.parse-int');
require('../modules/es.parse-float');
require('../modules/es.number.constructor');
require('../modules/es.number.epsilon');
require('../modules/es.number.is-finite');
require('../modules/es.number.is-integer');
require('../modules/es.number.is-nan');
require('../modules/es.number.is-safe-integer');
require('../modules/es.number.max-safe-integer');
require('../modules/es.number.min-safe-integer');
require('../modules/es.number.parse-float');
require('../modules/es.number.parse-int');
require('../modules/es.number.to-fixed');
require('../modules/es.number.to-precision');
require('../modules/es.math.acosh');
require('../modules/es.math.asinh');
require('../modules/es.math.atanh');
require('../modules/es.math.cbrt');
require('../modules/es.math.clz32');
require('../modules/es.math.cosh');
require('../modules/es.math.expm1');
require('../modules/es.math.fround');
require('../modules/es.math.hypot');
require('../modules/es.math.imul');
require('../modules/es.math.log10');
require('../modules/es.math.log1p');
require('../modules/es.math.log2');
require('../modules/es.math.sign');
require('../modules/es.math.sinh');
require('../modules/es.math.tanh');
require('../modules/es.math.to-string-tag');
require('../modules/es.math.trunc');
require('../modules/es.date.now');
require('../modules/es.date.to-json');
require('../modules/es.date.to-iso-string');
require('../modules/es.date.to-string');
require('../modules/es.date.to-primitive');
require('../modules/es.json.stringify');
require('../modules/es.json.to-string-tag');
require('../modules/es.promise');
require('../modules/es.promise.all-settled');
require('../modules/es.promise.finally');
require('../modules/es.map');
require('../modules/es.set');
require('../modules/es.weak-map');
require('../modules/es.weak-set');
require('../modules/es.array-buffer.constructor');
require('../modules/es.array-buffer.is-view');
require('../modules/es.array-buffer.slice');
require('../modules/es.data-view');
require('../modules/es.typed-array.int8-array');
require('../modules/es.typed-array.uint8-array');
require('../modules/es.typed-array.uint8-clamped-array');
require('../modules/es.typed-array.int16-array');
require('../modules/es.typed-array.uint16-array');
require('../modules/es.typed-array.int32-array');
require('../modules/es.typed-array.uint32-array');
require('../modules/es.typed-array.float32-array');
require('../modules/es.typed-array.float64-array');
require('../modules/es.typed-array.from');
require('../modules/es.typed-array.of');
require('../modules/es.typed-array.copy-within');
require('../modules/es.typed-array.every');
require('../modules/es.typed-array.fill');
require('../modules/es.typed-array.filter');
require('../modules/es.typed-array.find');
require('../modules/es.typed-array.find-index');
require('../modules/es.typed-array.for-each');
require('../modules/es.typed-array.includes');
require('../modules/es.typed-array.index-of');
require('../modules/es.typed-array.iterator');
require('../modules/es.typed-array.join');
require('../modules/es.typed-array.last-index-of');
require('../modules/es.typed-array.map');
require('../modules/es.typed-array.reduce');
require('../modules/es.typed-array.reduce-right');
require('../modules/es.typed-array.reverse');
require('../modules/es.typed-array.set');
require('../modules/es.typed-array.slice');
require('../modules/es.typed-array.some');
require('../modules/es.typed-array.sort');
require('../modules/es.typed-array.subarray');
require('../modules/es.typed-array.to-locale-string');
require('../modules/es.typed-array.to-string');
require('../modules/es.reflect.apply');
require('../modules/es.reflect.construct');
require('../modules/es.reflect.define-property');
require('../modules/es.reflect.delete-property');
require('../modules/es.reflect.get');
require('../modules/es.reflect.get-own-property-descriptor');
require('../modules/es.reflect.get-prototype-of');
require('../modules/es.reflect.has');
require('../modules/es.reflect.is-extensible');
require('../modules/es.reflect.own-keys');
require('../modules/es.reflect.prevent-extensions');
require('../modules/es.reflect.set');
require('../modules/es.reflect.set-prototype-of');
var path = require('../internals/path');

module.exports = path;

},{"../internals/path":307,"../modules/es.array-buffer.constructor":353,"../modules/es.array-buffer.is-view":354,"../modules/es.array-buffer.slice":355,"../modules/es.array.concat":356,"../modules/es.array.copy-within":357,"../modules/es.array.every":358,"../modules/es.array.fill":359,"../modules/es.array.filter":360,"../modules/es.array.find":362,"../modules/es.array.find-index":361,"../modules/es.array.flat":364,"../modules/es.array.flat-map":363,"../modules/es.array.for-each":365,"../modules/es.array.from":366,"../modules/es.array.includes":367,"../modules/es.array.index-of":368,"../modules/es.array.is-array":369,"../modules/es.array.iterator":370,"../modules/es.array.join":371,"../modules/es.array.last-index-of":372,"../modules/es.array.map":373,"../modules/es.array.of":374,"../modules/es.array.reduce":376,"../modules/es.array.reduce-right":375,"../modules/es.array.reverse":377,"../modules/es.array.slice":378,"../modules/es.array.some":379,"../modules/es.array.sort":380,"../modules/es.array.species":381,"../modules/es.array.splice":382,"../modules/es.array.unscopables.flat":384,"../modules/es.array.unscopables.flat-map":383,"../modules/es.data-view":385,"../modules/es.date.now":386,"../modules/es.date.to-iso-string":387,"../modules/es.date.to-json":388,"../modules/es.date.to-primitive":389,"../modules/es.date.to-string":390,"../modules/es.function.bind":391,"../modules/es.function.has-instance":392,"../modules/es.function.name":393,"../modules/es.global-this":394,"../modules/es.json.stringify":395,"../modules/es.json.to-string-tag":396,"../modules/es.map":397,"../modules/es.math.acosh":398,"../modules/es.math.asinh":399,"../modules/es.math.atanh":400,"../modules/es.math.cbrt":401,"../modules/es.math.clz32":402,"../modules/es.math.cosh":403,"../modules/es.math.expm1":404,"../modules/es.math.fround":405,"../modules/es.math.hypot":406,"../modules/es.math.imul":407,"../modules/es.math.log10":408,"../modules/es.math.log1p":409,"../modules/es.math.log2":410,"../modules/es.math.sign":411,"../modules/es.math.sinh":412,"../modules/es.math.tanh":413,"../modules/es.math.to-string-tag":414,"../modules/es.math.trunc":415,"../modules/es.number.constructor":416,"../modules/es.number.epsilon":417,"../modules/es.number.is-finite":418,"../modules/es.number.is-integer":419,"../modules/es.number.is-nan":420,"../modules/es.number.is-safe-integer":421,"../modules/es.number.max-safe-integer":422,"../modules/es.number.min-safe-integer":423,"../modules/es.number.parse-float":424,"../modules/es.number.parse-int":425,"../modules/es.number.to-fixed":426,"../modules/es.number.to-precision":427,"../modules/es.object.assign":428,"../modules/es.object.create":429,"../modules/es.object.define-getter":430,"../modules/es.object.define-properties":431,"../modules/es.object.define-property":432,"../modules/es.object.define-setter":433,"../modules/es.object.entries":434,"../modules/es.object.freeze":435,"../modules/es.object.from-entries":436,"../modules/es.object.get-own-property-descriptor":437,"../modules/es.object.get-own-property-descriptors":438,"../modules/es.object.get-own-property-names":439,"../modules/es.object.get-prototype-of":440,"../modules/es.object.is":444,"../modules/es.object.is-extensible":441,"../modules/es.object.is-frozen":442,"../modules/es.object.is-sealed":443,"../modules/es.object.keys":445,"../modules/es.object.lookup-getter":446,"../modules/es.object.lookup-setter":447,"../modules/es.object.prevent-extensions":448,"../modules/es.object.seal":449,"../modules/es.object.set-prototype-of":450,"../modules/es.object.to-string":451,"../modules/es.object.values":452,"../modules/es.parse-float":453,"../modules/es.parse-int":454,"../modules/es.promise":457,"../modules/es.promise.all-settled":455,"../modules/es.promise.finally":456,"../modules/es.reflect.apply":458,"../modules/es.reflect.construct":459,"../modules/es.reflect.define-property":460,"../modules/es.reflect.delete-property":461,"../modules/es.reflect.get":464,"../modules/es.reflect.get-own-property-descriptor":462,"../modules/es.reflect.get-prototype-of":463,"../modules/es.reflect.has":465,"../modules/es.reflect.is-extensible":466,"../modules/es.reflect.own-keys":467,"../modules/es.reflect.prevent-extensions":468,"../modules/es.reflect.set":470,"../modules/es.reflect.set-prototype-of":469,"../modules/es.regexp.constructor":471,"../modules/es.regexp.exec":472,"../modules/es.regexp.flags":473,"../modules/es.regexp.sticky":474,"../modules/es.regexp.test":475,"../modules/es.regexp.to-string":476,"../modules/es.set":477,"../modules/es.string.anchor":478,"../modules/es.string.big":479,"../modules/es.string.blink":480,"../modules/es.string.bold":481,"../modules/es.string.code-point-at":482,"../modules/es.string.ends-with":483,"../modules/es.string.fixed":484,"../modules/es.string.fontcolor":485,"../modules/es.string.fontsize":486,"../modules/es.string.from-code-point":487,"../modules/es.string.includes":488,"../modules/es.string.italics":489,"../modules/es.string.iterator":490,"../modules/es.string.link":491,"../modules/es.string.match":493,"../modules/es.string.match-all":492,"../modules/es.string.pad-end":494,"../modules/es.string.pad-start":495,"../modules/es.string.raw":496,"../modules/es.string.repeat":497,"../modules/es.string.replace":498,"../modules/es.string.search":499,"../modules/es.string.small":500,"../modules/es.string.split":501,"../modules/es.string.starts-with":502,"../modules/es.string.strike":503,"../modules/es.string.sub":504,"../modules/es.string.sup":505,"../modules/es.string.trim":508,"../modules/es.string.trim-end":506,"../modules/es.string.trim-start":507,"../modules/es.symbol":514,"../modules/es.symbol.async-iterator":509,"../modules/es.symbol.description":510,"../modules/es.symbol.has-instance":511,"../modules/es.symbol.is-concat-spreadable":512,"../modules/es.symbol.iterator":513,"../modules/es.symbol.match":516,"../modules/es.symbol.match-all":515,"../modules/es.symbol.replace":517,"../modules/es.symbol.search":518,"../modules/es.symbol.species":519,"../modules/es.symbol.split":520,"../modules/es.symbol.to-primitive":521,"../modules/es.symbol.to-string-tag":522,"../modules/es.symbol.unscopables":523,"../modules/es.typed-array.copy-within":524,"../modules/es.typed-array.every":525,"../modules/es.typed-array.fill":526,"../modules/es.typed-array.filter":527,"../modules/es.typed-array.find":529,"../modules/es.typed-array.find-index":528,"../modules/es.typed-array.float32-array":530,"../modules/es.typed-array.float64-array":531,"../modules/es.typed-array.for-each":532,"../modules/es.typed-array.from":533,"../modules/es.typed-array.includes":534,"../modules/es.typed-array.index-of":535,"../modules/es.typed-array.int16-array":536,"../modules/es.typed-array.int32-array":537,"../modules/es.typed-array.int8-array":538,"../modules/es.typed-array.iterator":539,"../modules/es.typed-array.join":540,"../modules/es.typed-array.last-index-of":541,"../modules/es.typed-array.map":542,"../modules/es.typed-array.of":543,"../modules/es.typed-array.reduce":545,"../modules/es.typed-array.reduce-right":544,"../modules/es.typed-array.reverse":546,"../modules/es.typed-array.set":547,"../modules/es.typed-array.slice":548,"../modules/es.typed-array.some":549,"../modules/es.typed-array.sort":550,"../modules/es.typed-array.subarray":551,"../modules/es.typed-array.to-locale-string":552,"../modules/es.typed-array.to-string":553,"../modules/es.typed-array.uint16-array":554,"../modules/es.typed-array.uint32-array":555,"../modules/es.typed-array.uint8-array":556,"../modules/es.typed-array.uint8-clamped-array":557,"../modules/es.weak-map":558,"../modules/es.weak-set":559}],197:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};

},{}],198:[function(require,module,exports){
var isObject = require('../internals/is-object');

module.exports = function (it) {
  if (!isObject(it) && it !== null) {
    throw TypeError("Can't set " + String(it) + ' as a prototype');
  } return it;
};

},{"../internals/is-object":270}],199:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');
var create = require('../internals/object-create');
var definePropertyModule = require('../internals/object-define-property');

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};

},{"../internals/object-create":291,"../internals/object-define-property":293,"../internals/well-known-symbol":351}],200:[function(require,module,exports){
'use strict';
var charAt = require('../internals/string-multibyte').charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};

},{"../internals/string-multibyte":326}],201:[function(require,module,exports){
module.exports = function (it, Constructor, name) {
  if (!(it instanceof Constructor)) {
    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
  } return it;
};

},{}],202:[function(require,module,exports){
var isObject = require('../internals/is-object');

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};

},{"../internals/is-object":270}],203:[function(require,module,exports){
module.exports = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';

},{}],204:[function(require,module,exports){
'use strict';
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var classof = require('../internals/classof');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var defineProperty = require('../internals/object-define-property').f;
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var wellKnownSymbol = require('../internals/well-known-symbol');
var uid = require('../internals/uid');

var Int8Array = global.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var Uint8ClampedArray = global.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
var TypedArray = Int8Array && getPrototypeOf(Int8Array);
var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
var ObjectPrototype = Object.prototype;
var isPrototypeOf = ObjectPrototype.isPrototypeOf;

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
// Fixing native typed arrays in Opera Presto crashes the browser, see #595
var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQIRED = false;
var NAME;

var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};

var isView = function isView(it) {
  var klass = classof(it);
  return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
};

var isTypedArray = function (it) {
  return isObject(it) && has(TypedArrayConstructorsList, classof(it));
};

var aTypedArray = function (it) {
  if (isTypedArray(it)) return it;
  throw TypeError('Target is not a typed array');
};

var aTypedArrayConstructor = function (C) {
  if (setPrototypeOf) {
    if (isPrototypeOf.call(TypedArray, C)) return C;
  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME)) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
      return C;
    }
  } throw TypeError('Target is not a typed array constructor');
};

var exportTypedArrayMethod = function (KEY, property, forced) {
  if (!DESCRIPTORS) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
      delete TypedArrayConstructor.prototype[KEY];
    }
  }
  if (!TypedArrayPrototype[KEY] || forced) {
    redefine(TypedArrayPrototype, KEY, forced ? property
      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
  }
};

var exportTypedArrayStaticMethod = function (KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!DESCRIPTORS) return;
  if (setPrototypeOf) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global[ARRAY];
      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
        delete TypedArrayConstructor[KEY];
      }
    }
    if (!TypedArray[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY] || property);
      } catch (error) { /* empty */ }
    } else return;
  }
  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      redefine(TypedArrayConstructor, KEY, property);
    }
  }
};

for (NAME in TypedArrayConstructorsList) {
  if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
}

// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
  // eslint-disable-next-line no-shadow
  TypedArray = function TypedArray() {
    throw TypeError('Incorrect invocation');
  };
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
  }
}

if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
  TypedArrayPrototype = TypedArray.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
  }
}

// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
}

if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
  TYPED_ARRAY_TAG_REQIRED = true;
  defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function () {
    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
  } });
  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {
    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
  }
}

module.exports = {
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
  aTypedArray: aTypedArray,
  aTypedArrayConstructor: aTypedArrayConstructor,
  exportTypedArrayMethod: exportTypedArrayMethod,
  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
  isView: isView,
  isTypedArray: isTypedArray,
  TypedArray: TypedArray,
  TypedArrayPrototype: TypedArrayPrototype
};

},{"../internals/array-buffer-native":203,"../internals/classof":221,"../internals/create-non-enumerable-property":230,"../internals/descriptors":237,"../internals/global":254,"../internals/has":255,"../internals/is-object":270,"../internals/object-define-property":293,"../internals/object-get-prototype-of":298,"../internals/object-set-prototype-of":303,"../internals/redefine":311,"../internals/uid":348,"../internals/well-known-symbol":351}],205:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var DESCRIPTORS = require('../internals/descriptors');
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefineAll = require('../internals/redefine-all');
var fails = require('../internals/fails');
var anInstance = require('../internals/an-instance');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var toIndex = require('../internals/to-index');
var IEEE754 = require('../internals/ieee754');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var defineProperty = require('../internals/object-define-property').f;
var arrayFill = require('../internals/array-fill');
var setToStringTag = require('../internals/set-to-string-tag');
var InternalStateModule = require('../internals/internal-state');

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length';
var WRONG_INDEX = 'Wrong index';
var NativeArrayBuffer = global[ARRAY_BUFFER];
var $ArrayBuffer = NativeArrayBuffer;
var $DataView = global[DATA_VIEW];
var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
var ObjectPrototype = Object.prototype;
var RangeError = global.RangeError;

var packIEEE754 = IEEE754.pack;
var unpackIEEE754 = IEEE754.unpack;

var packInt8 = function (number) {
  return [number & 0xFF];
};

var packInt16 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF];
};

var packInt32 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
};

var unpackInt32 = function (buffer) {
  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
};

var packFloat32 = function (number) {
  return packIEEE754(number, 23, 4);
};

var packFloat64 = function (number) {
  return packIEEE754(number, 52, 8);
};

var addGetter = function (Constructor, key) {
  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState(this)[key]; } });
};

var get = function (view, count, index, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = bytes.slice(start, start + count);
  return isLittleEndian ? pack : pack.reverse();
};

var set = function (view, count, index, conversion, value, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = conversion(+value);
  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
};

if (!NATIVE_ARRAY_BUFFER) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    setInternalState(this, {
      bytes: arrayFill.call(new Array(byteLength), 0),
      byteLength: byteLength
    });
    if (!DESCRIPTORS) this.byteLength = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = getInternalState(buffer).byteLength;
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    setInternalState(this, {
      buffer: buffer,
      byteLength: byteLength,
      byteOffset: offset
    });
    if (!DESCRIPTORS) {
      this.buffer = buffer;
      this.byteLength = byteLength;
      this.byteOffset = offset;
    }
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, 'byteLength');
    addGetter($DataView, 'buffer');
    addGetter($DataView, 'byteLength');
    addGetter($DataView, 'byteOffset');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
    }
  });
} else {
  if (!fails(function () {
    NativeArrayBuffer(1);
  }) || !fails(function () {
    new NativeArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new NativeArrayBuffer(); // eslint-disable-line no-new
    new NativeArrayBuffer(1.5); // eslint-disable-line no-new
    new NativeArrayBuffer(NaN); // eslint-disable-line no-new
    return NativeArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new NativeArrayBuffer(toIndex(length));
    };
    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
    for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) {
        createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
      }
    }
    ArrayBufferPrototype.constructor = $ArrayBuffer;
  }

  // WebKit bug - the same parent prototype for typed arrays and data view
  if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
    setPrototypeOf($DataViewPrototype, ObjectPrototype);
  }

  // iOS Safari 7.x bug
  var testView = new $DataView(new $ArrayBuffer(2));
  var nativeSetInt8 = $DataViewPrototype.setInt8;
  testView.setInt8(0, 2147483648);
  testView.setInt8(1, 2147483649);
  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
    setInt8: function setInt8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, { unsafe: true });
}

setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);

module.exports = {
  ArrayBuffer: $ArrayBuffer,
  DataView: $DataView
};

},{"../internals/an-instance":201,"../internals/array-buffer-native":203,"../internals/array-fill":207,"../internals/create-non-enumerable-property":230,"../internals/descriptors":237,"../internals/fails":245,"../internals/global":254,"../internals/ieee754":260,"../internals/internal-state":265,"../internals/object-define-property":293,"../internals/object-get-own-property-names":296,"../internals/object-get-prototype-of":298,"../internals/object-set-prototype-of":303,"../internals/redefine-all":310,"../internals/set-to-string-tag":320,"../internals/to-index":336,"../internals/to-integer":338,"../internals/to-length":339}],206:[function(require,module,exports){
'use strict';
var toObject = require('../internals/to-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');

var min = Math.min;

// `Array.prototype.copyWithin` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"../internals/to-absolute-index":335,"../internals/to-length":339,"../internals/to-object":340}],207:[function(require,module,exports){
'use strict';
var toObject = require('../internals/to-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');

// `Array.prototype.fill` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"../internals/to-absolute-index":335,"../internals/to-length":339,"../internals/to-object":340}],208:[function(require,module,exports){
'use strict';
var $forEach = require('../internals/array-iteration').forEach;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var STRICT_METHOD = arrayMethodIsStrict('forEach');
var USES_TO_LENGTH = arrayMethodUsesToLength('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
module.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
} : [].forEach;

},{"../internals/array-iteration":211,"../internals/array-method-is-strict":214,"../internals/array-method-uses-to-length":215}],209:[function(require,module,exports){
'use strict';
var bind = require('../internals/function-bind-context');
var toObject = require('../internals/to-object');
var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var toLength = require('../internals/to-length');
var createProperty = require('../internals/create-property');
var getIteratorMethod = require('../internals/get-iterator-method');

// `Array.from` method implementation
// https://tc39.github.io/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var C = typeof this == 'function' ? this : Array;
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    result = new C();
    for (;!(step = next.call(iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = toLength(O.length);
    result = new C(length);
    for (;length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};

},{"../internals/call-with-safe-iteration-closing":218,"../internals/create-property":232,"../internals/function-bind-context":249,"../internals/get-iterator-method":252,"../internals/is-array-iterator-method":266,"../internals/to-length":339,"../internals/to-object":340}],210:[function(require,module,exports){
var toIndexedObject = require('../internals/to-indexed-object');
var toLength = require('../internals/to-length');
var toAbsoluteIndex = require('../internals/to-absolute-index');

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};

},{"../internals/to-absolute-index":335,"../internals/to-indexed-object":337,"../internals/to-length":339}],211:[function(require,module,exports){
var bind = require('../internals/function-bind-context');
var IndexedObject = require('../internals/indexed-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var arraySpeciesCreate = require('../internals/array-species-create');

var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push.call(target, value); // filter
        } else if (IS_EVERY) return false;  // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6)
};

},{"../internals/array-species-create":217,"../internals/function-bind-context":249,"../internals/indexed-object":261,"../internals/to-length":339,"../internals/to-object":340}],212:[function(require,module,exports){
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var min = Math.min;
var nativeLastIndexOf = [].lastIndexOf;
var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');
// For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method
var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });
var FORCED = NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH;

// `Array.prototype.lastIndexOf` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
module.exports = FORCED ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
  // convert -0 to +0
  if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
  var O = toIndexedObject(this);
  var length = toLength(O.length);
  var index = length - 1;
  if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
  if (index < 0) index = length + index;
  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
  return -1;
} : nativeLastIndexOf;

},{"../internals/array-method-is-strict":214,"../internals/array-method-uses-to-length":215,"../internals/to-indexed-object":337,"../internals/to-integer":338,"../internals/to-length":339}],213:[function(require,module,exports){
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};

},{"../internals/engine-v8-version":242,"../internals/fails":245,"../internals/well-known-symbol":351}],214:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal
    method.call(null, argument || function () { throw 1; }, 1);
  });
};

},{"../internals/fails":245}],215:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var has = require('../internals/has');

var defineProperty = Object.defineProperty;
var cache = {};

var thrower = function (it) { throw it; };

module.exports = function (METHOD_NAME, options) {
  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
  if (!options) options = {};
  var method = [][METHOD_NAME];
  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
  var argument0 = has(options, 0) ? options[0] : thrower;
  var argument1 = has(options, 1) ? options[1] : undefined;

  return cache[METHOD_NAME] = !!method && !fails(function () {
    if (ACCESSORS && !DESCRIPTORS) return true;
    var O = { length: -1 };

    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
    else O[1] = 1;

    method.call(O, argument0, argument1);
  });
};

},{"../internals/descriptors":237,"../internals/fails":245,"../internals/has":255}],216:[function(require,module,exports){
var aFunction = require('../internals/a-function');
var toObject = require('../internals/to-object');
var IndexedObject = require('../internals/indexed-object');
var toLength = require('../internals/to-length');

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function (IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aFunction(callbackfn);
    var O = toObject(that);
    var self = IndexedObject(O);
    var length = toLength(O.length);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
};

module.exports = {
  // `Array.prototype.reduce` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};

},{"../internals/a-function":197,"../internals/indexed-object":261,"../internals/to-length":339,"../internals/to-object":340}],217:[function(require,module,exports){
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};

},{"../internals/is-array":267,"../internals/is-object":270,"../internals/well-known-symbol":351}],218:[function(require,module,exports){
var anObject = require('../internals/an-object');

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (error) {
    var returnMethod = iterator['return'];
    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
    throw error;
  }
};

},{"../internals/an-object":202}],219:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};

},{"../internals/well-known-symbol":351}],220:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],221:[function(require,module,exports){
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classofRaw = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};

},{"../internals/classof-raw":220,"../internals/to-string-tag-support":344,"../internals/well-known-symbol":351}],222:[function(require,module,exports){
'use strict';
var defineProperty = require('../internals/object-define-property').f;
var create = require('../internals/object-create');
var redefineAll = require('../internals/redefine-all');
var bind = require('../internals/function-bind-context');
var anInstance = require('../internals/an-instance');
var iterate = require('../internals/iterate');
var defineIterator = require('../internals/define-iterator');
var setSpecies = require('../internals/set-species');
var DESCRIPTORS = require('../internals/descriptors');
var fastKey = require('../internals/internal-metadata').fastKey;
var InternalStateModule = require('../internals/internal-state');

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, CONSTRUCTOR_NAME);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!DESCRIPTORS) that.size = 0;
      if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
    });

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
      // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS) state.size++;
        else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      } return that;
    };

    var getEntry = function (that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key) return entry;
      }
    };

    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (DESCRIPTORS) state.size = 0;
        else that.size = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first == entry) state.first = next;
          if (state.last == entry) state.last = prev;
          if (DESCRIPTORS) state.size--;
          else that.size--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });

    redefineAll(C.prototype, IS_MAP ? {
      // 23.1.3.6 Map.prototype.get(key)
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // 23.1.3.9 Map.prototype.set(key, value)
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // 23.2.3.1 Set.prototype.add(value)
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS) defineProperty(C.prototype, 'size', {
      get: function () {
        return getInternalState(this).size;
      }
    });
    return C;
  },
  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) entry = entry.previous;
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return { value: undefined, done: true };
      }
      // return step by kind
      if (kind == 'keys') return { value: entry.key, done: false };
      if (kind == 'values') return { value: entry.value, done: false };
      return { value: [entry.key, entry.value], done: false };
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(CONSTRUCTOR_NAME);
  }
};

},{"../internals/an-instance":201,"../internals/define-iterator":235,"../internals/descriptors":237,"../internals/function-bind-context":249,"../internals/internal-metadata":264,"../internals/internal-state":265,"../internals/iterate":273,"../internals/object-create":291,"../internals/object-define-property":293,"../internals/redefine-all":310,"../internals/set-species":319}],223:[function(require,module,exports){
'use strict';
var redefineAll = require('../internals/redefine-all');
var getWeakData = require('../internals/internal-metadata').getWeakData;
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var anInstance = require('../internals/an-instance');
var iterate = require('../internals/iterate');
var ArrayIterationModule = require('../internals/array-iteration');
var $has = require('../internals/has');
var InternalStateModule = require('../internals/internal-state');

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
var find = ArrayIterationModule.find;
var findIndex = ArrayIterationModule.findIndex;
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (store) {
  return store.frozen || (store.frozen = new UncaughtFrozenStore());
};

var UncaughtFrozenStore = function () {
  this.entries = [];
};

var findUncaughtFrozen = function (store, key) {
  return find(store.entries, function (it) {
    return it[0] === key;
  });
};

UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.entries.push([key, value]);
  },
  'delete': function (key) {
    var index = findIndex(this.entries, function (it) {
      return it[0] === key;
    });
    if (~index) this.entries.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, CONSTRUCTOR_NAME);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        id: id++,
        frozen: undefined
      });
      if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
    });

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var data = getWeakData(anObject(key), true);
      if (data === true) uncaughtFrozenStore(state).set(key, value);
      else data[state.id] = value;
      return that;
    };

    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
        return data && $has(data, state.id) && delete data[state.id];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state).has(key);
        return data && $has(data, state.id);
      }
    });

    redefineAll(C.prototype, IS_MAP ? {
      // 23.3.3.3 WeakMap.prototype.get(key)
      get: function get(key) {
        var state = getInternalState(this);
        if (isObject(key)) {
          var data = getWeakData(key);
          if (data === true) return uncaughtFrozenStore(state).get(key);
          return data ? data[state.id] : undefined;
        }
      },
      // 23.3.3.5 WeakMap.prototype.set(key, value)
      set: function set(key, value) {
        return define(this, key, value);
      }
    } : {
      // 23.4.3.1 WeakSet.prototype.add(value)
      add: function add(value) {
        return define(this, value, true);
      }
    });

    return C;
  }
};

},{"../internals/an-instance":201,"../internals/an-object":202,"../internals/array-iteration":211,"../internals/has":255,"../internals/internal-metadata":264,"../internals/internal-state":265,"../internals/is-object":270,"../internals/iterate":273,"../internals/redefine-all":310}],224:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var redefine = require('../internals/redefine');
var InternalMetadataModule = require('../internals/internal-metadata');
var iterate = require('../internals/iterate');
var anInstance = require('../internals/an-instance');
var isObject = require('../internals/is-object');
var fails = require('../internals/fails');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var setToStringTag = require('../internals/set-to-string-tag');
var inheritIfRequired = require('../internals/inherit-if-required');

module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
  var ADDER = IS_MAP ? 'set' : 'add';
  var NativeConstructor = global[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var Constructor = NativeConstructor;
  var exported = {};

  var fixMethod = function (KEY) {
    var nativeMethod = NativePrototype[KEY];
    redefine(NativePrototype, KEY,
      KEY == 'add' ? function add(value) {
        nativeMethod.call(this, value === 0 ? 0 : value);
        return this;
      } : KEY == 'delete' ? function (key) {
        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
      } : KEY == 'get' ? function get(key) {
        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
      } : KEY == 'has' ? function has(key) {
        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
      } : function set(key, value) {
        nativeMethod.call(this, key === 0 ? 0 : key, value);
        return this;
      }
    );
  };

  // eslint-disable-next-line max-len
  if (isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
    new NativeConstructor().entries().next();
  })))) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.REQUIRED = true;
  } else if (isForced(CONSTRUCTOR_NAME, true)) {
    var instance = new Constructor();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    // eslint-disable-next-line no-new
    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new NativeConstructor();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      Constructor = wrapper(function (dummy, iterable) {
        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
        if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
        return that;
      });
      Constructor.prototype = NativePrototype;
      NativePrototype.constructor = Constructor;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

    // weak collections should not contains .clear method
    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
  }

  exported[CONSTRUCTOR_NAME] = Constructor;
  $({ global: true, forced: Constructor != NativeConstructor }, exported);

  setToStringTag(Constructor, CONSTRUCTOR_NAME);

  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

  return Constructor;
};

},{"../internals/an-instance":201,"../internals/check-correctness-of-iteration":219,"../internals/export":244,"../internals/fails":245,"../internals/global":254,"../internals/inherit-if-required":262,"../internals/internal-metadata":264,"../internals/is-forced":268,"../internals/is-object":270,"../internals/iterate":273,"../internals/redefine":311,"../internals/set-to-string-tag":320}],225:[function(require,module,exports){
var has = require('../internals/has');
var ownKeys = require('../internals/own-keys');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};

},{"../internals/has":255,"../internals/object-define-property":293,"../internals/object-get-own-property-descriptor":294,"../internals/own-keys":306}],226:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (e) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (f) { /* empty */ }
  } return false;
};

},{"../internals/well-known-symbol":351}],227:[function(require,module,exports){
var fails = require('../internals/fails');

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});

},{"../internals/fails":245}],228:[function(require,module,exports){
var requireObjectCoercible = require('../internals/require-object-coercible');

var quot = /"/g;

// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
// https://tc39.github.io/ecma262/#sec-createhtml
module.exports = function (string, tag, attribute, value) {
  var S = String(requireObjectCoercible(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};

},{"../internals/require-object-coercible":316}],229:[function(require,module,exports){
'use strict';
var IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;
var create = require('../internals/object-create');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var setToStringTag = require('../internals/set-to-string-tag');
var Iterators = require('../internals/iterators');

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};

},{"../internals/create-property-descriptor":231,"../internals/iterators":275,"../internals/iterators-core":274,"../internals/object-create":291,"../internals/set-to-string-tag":320}],230:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"../internals/create-property-descriptor":231,"../internals/descriptors":237,"../internals/object-define-property":293}],231:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],232:[function(require,module,exports){
'use strict';
var toPrimitive = require('../internals/to-primitive');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = function (object, key, value) {
  var propertyKey = toPrimitive(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};

},{"../internals/create-property-descriptor":231,"../internals/object-define-property":293,"../internals/to-primitive":343}],233:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var padStart = require('../internals/string-pad').start;

var abs = Math.abs;
var DatePrototype = Date.prototype;
var getTime = DatePrototype.getTime;
var nativeDateToISOString = DatePrototype.toISOString;

// `Date.prototype.toISOString` method implementation
// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit fails here:
module.exports = (fails(function () {
  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  nativeDateToISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var date = this;
  var year = date.getUTCFullYear();
  var milliseconds = date.getUTCMilliseconds();
  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
  return sign + padStart(abs(year), sign ? 6 : 4, 0) +
    '-' + padStart(date.getUTCMonth() + 1, 2, 0) +
    '-' + padStart(date.getUTCDate(), 2, 0) +
    'T' + padStart(date.getUTCHours(), 2, 0) +
    ':' + padStart(date.getUTCMinutes(), 2, 0) +
    ':' + padStart(date.getUTCSeconds(), 2, 0) +
    '.' + padStart(milliseconds, 3, 0) +
    'Z';
} : nativeDateToISOString;

},{"../internals/fails":245,"../internals/string-pad":328}],234:[function(require,module,exports){
'use strict';
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');

module.exports = function (hint) {
  if (hint !== 'string' && hint !== 'number' && hint !== 'default') {
    throw TypeError('Incorrect hint');
  } return toPrimitive(anObject(this), hint !== 'number');
};

},{"../internals/an-object":202,"../internals/to-primitive":343}],235:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var setToStringTag = require('../internals/set-to-string-tag');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');
var Iterators = require('../internals/iterators');
var IteratorsCore = require('../internals/iterators-core');

var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;
    defaultIterator = function values() { return nativeIterator.call(this); };
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
  }
  Iterators[NAME] = defaultIterator;

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  return methods;
};

},{"../internals/create-iterator-constructor":229,"../internals/create-non-enumerable-property":230,"../internals/export":244,"../internals/is-pure":271,"../internals/iterators":275,"../internals/iterators-core":274,"../internals/object-get-prototype-of":298,"../internals/object-set-prototype-of":303,"../internals/redefine":311,"../internals/set-to-string-tag":320,"../internals/well-known-symbol":351}],236:[function(require,module,exports){
var path = require('../internals/path');
var has = require('../internals/has');
var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');
var defineProperty = require('../internals/object-define-property').f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};

},{"../internals/has":255,"../internals/object-define-property":293,"../internals/path":307,"../internals/well-known-symbol-wrapped":350}],237:[function(require,module,exports){
var fails = require('../internals/fails');

// Thank's IE8 for his funny defineProperty
module.exports = !fails(function () {
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});

},{"../internals/fails":245}],238:[function(require,module,exports){
var global = require('../internals/global');
var isObject = require('../internals/is-object');

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};

},{"../internals/global":254,"../internals/is-object":270}],239:[function(require,module,exports){
// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

},{}],240:[function(require,module,exports){
var userAgent = require('../internals/engine-user-agent');

module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);

},{"../internals/engine-user-agent":241}],241:[function(require,module,exports){
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('navigator', 'userAgent') || '';

},{"../internals/get-built-in":251}],242:[function(require,module,exports){
var global = require('../internals/global');
var userAgent = require('../internals/engine-user-agent');

var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  version = match[0] + match[1];
} else if (userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = match[1];
  }
}

module.exports = version && +version;

},{"../internals/engine-user-agent":241,"../internals/global":254}],243:[function(require,module,exports){
// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];

},{}],244:[function(require,module,exports){
var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var setGlobal = require('../internals/set-global');
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var isForced = require('../internals/is-forced');

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};

},{"../internals/copy-constructor-properties":225,"../internals/create-non-enumerable-property":230,"../internals/global":254,"../internals/is-forced":268,"../internals/object-get-own-property-descriptor":294,"../internals/redefine":311,"../internals/set-global":318}],245:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

},{}],246:[function(require,module,exports){
'use strict';
// TODO: Remove from `core-js@4` since it's moved to entry points
require('../modules/es.regexp.exec');
var redefine = require('../internals/redefine');
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var regexpExec = require('../internals/regexp-exec');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

var SPECIES = wellKnownSymbol('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  return 'a'.replace(/./, '$0') === '$0';
})();

var REPLACE = wellKnownSymbol('replace');
// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

module.exports = function (KEY, length, exec, sham) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !(
      REPLACE_SUPPORTS_NAMED_GROUPS &&
      REPLACE_KEEPS_$0 &&
      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    )) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    }, {
      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    });
    var stringMethod = methods[0];
    var regexMethod = methods[1];

    redefine(String.prototype, KEY, stringMethod);
    redefine(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return regexMethod.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return regexMethod.call(string, this); }
    );
  }

  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
};

},{"../internals/create-non-enumerable-property":230,"../internals/fails":245,"../internals/redefine":311,"../internals/regexp-exec":313,"../internals/well-known-symbol":351,"../modules/es.regexp.exec":472}],247:[function(require,module,exports){
'use strict';
var isArray = require('../internals/is-array');
var toLength = require('../internals/to-length');
var bind = require('../internals/function-bind-context');

// `FlattenIntoArray` abstract operation
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
  var element;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      if (depth > 0 && isArray(element)) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
};

module.exports = flattenIntoArray;

},{"../internals/function-bind-context":249,"../internals/is-array":267,"../internals/to-length":339}],248:[function(require,module,exports){
var fails = require('../internals/fails');

module.exports = !fails(function () {
  return Object.isExtensible(Object.preventExtensions({}));
});

},{"../internals/fails":245}],249:[function(require,module,exports){
var aFunction = require('../internals/a-function');

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"../internals/a-function":197}],250:[function(require,module,exports){
'use strict';
var aFunction = require('../internals/a-function');
var isObject = require('../internals/is-object');

var slice = [].slice;
var factories = {};

var construct = function (C, argsLength, args) {
  if (!(argsLength in factories)) {
    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
  } return factories[argsLength](C, args);
};

// `Function.prototype.bind` method implementation
// https://tc39.github.io/ecma262/#sec-function.prototype.bind
module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = slice.call(arguments, 1);
  var boundFunction = function bound(/* args... */) {
    var args = partArgs.concat(slice.call(arguments));
    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
  };
  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
  return boundFunction;
};

},{"../internals/a-function":197,"../internals/is-object":270}],251:[function(require,module,exports){
var path = require('../internals/path');
var global = require('../internals/global');

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};

},{"../internals/global":254,"../internals/path":307}],252:[function(require,module,exports){
var classof = require('../internals/classof');
var Iterators = require('../internals/iterators');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"../internals/classof":221,"../internals/iterators":275,"../internals/well-known-symbol":351}],253:[function(require,module,exports){
var anObject = require('../internals/an-object');
var getIteratorMethod = require('../internals/get-iterator-method');

module.exports = function (it) {
  var iteratorMethod = getIteratorMethod(it);
  if (typeof iteratorMethod != 'function') {
    throw TypeError(String(it) + ' is not iterable');
  } return anObject(iteratorMethod.call(it));
};

},{"../internals/an-object":202,"../internals/get-iterator-method":252}],254:[function(require,module,exports){
(function (global){
var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line no-undef
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func
  Function('return this')();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],255:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],256:[function(require,module,exports){
module.exports = {};

},{}],257:[function(require,module,exports){
var global = require('../internals/global');

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length === 1 ? console.error(a) : console.error(a, b);
  }
};

},{"../internals/global":254}],258:[function(require,module,exports){
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('document', 'documentElement');

},{"../internals/get-built-in":251}],259:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var createElement = require('../internals/document-create-element');

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});

},{"../internals/descriptors":237,"../internals/document-create-element":238,"../internals/fails":245}],260:[function(require,module,exports){
// IEEE754 conversions based on https://github.com/feross/ieee754
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = 1 / 0;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;

var pack = function (number, mantissaLength, bytes) {
  var buffer = new Array(bytes);
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
  var index = 0;
  var exponent, mantissa, c;
  number = abs(number);
  // eslint-disable-next-line no-self-compare
  if (number != number || number === Infinity) {
    // eslint-disable-next-line no-self-compare
    mantissa = number != number ? 1 : 0;
    exponent = eMax;
  } else {
    exponent = floor(log(number) / LN2);
    if (number * (c = pow(2, -exponent)) < 1) {
      exponent--;
      c *= 2;
    }
    if (exponent + eBias >= 1) {
      number += rt / c;
    } else {
      number += rt * pow(2, 1 - eBias);
    }
    if (number * c >= 2) {
      exponent++;
      c /= 2;
    }
    if (exponent + eBias >= eMax) {
      mantissa = 0;
      exponent = eMax;
    } else if (exponent + eBias >= 1) {
      mantissa = (number * c - 1) * pow(2, mantissaLength);
      exponent = exponent + eBias;
    } else {
      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
      exponent = 0;
    }
  }
  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
  exponent = exponent << mantissaLength | mantissa;
  exponentLength += mantissaLength;
  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
  buffer[--index] |= sign * 128;
  return buffer;
};

var unpack = function (buffer, mantissaLength) {
  var bytes = buffer.length;
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var nBits = exponentLength - 7;
  var index = bytes - 1;
  var sign = buffer[index--];
  var exponent = sign & 127;
  var mantissa;
  sign >>= 7;
  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
  mantissa = exponent & (1 << -nBits) - 1;
  exponent >>= -nBits;
  nBits += mantissaLength;
  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
  if (exponent === 0) {
    exponent = 1 - eBias;
  } else if (exponent === eMax) {
    return mantissa ? NaN : sign ? -Infinity : Infinity;
  } else {
    mantissa = mantissa + pow(2, mantissaLength);
    exponent = exponent - eBias;
  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
};

module.exports = {
  pack: pack,
  unpack: unpack
};

},{}],261:[function(require,module,exports){
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;

},{"../internals/classof-raw":220,"../internals/fails":245}],262:[function(require,module,exports){
var isObject = require('../internals/is-object');
var setPrototypeOf = require('../internals/object-set-prototype-of');

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    typeof (NewTarget = dummy.constructor) == 'function' &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};

},{"../internals/is-object":270,"../internals/object-set-prototype-of":303}],263:[function(require,module,exports){
var store = require('../internals/shared-store');

var functionToString = Function.toString;

// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
if (typeof store.inspectSource != 'function') {
  store.inspectSource = function (it) {
    return functionToString.call(it);
  };
}

module.exports = store.inspectSource;

},{"../internals/shared-store":322}],264:[function(require,module,exports){
var hiddenKeys = require('../internals/hidden-keys');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var defineProperty = require('../internals/object-define-property').f;
var uid = require('../internals/uid');
var FREEZING = require('../internals/freezing');

var METADATA = uid('meta');
var id = 0;

var isExtensible = Object.isExtensible || function () {
  return true;
};

var setMetadata = function (it) {
  defineProperty(it, METADATA, { value: {
    objectID: 'O' + ++id, // object ID
    weakData: {}          // weak collections IDs
  } });
};

var fastKey = function (it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
  // return object ID
  } return it[METADATA].objectID;
};

var getWeakData = function (it, create) {
  if (!has(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
  // return the store of weak collections IDs
  } return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
  return it;
};

var meta = module.exports = {
  REQUIRED: false,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};

hiddenKeys[METADATA] = true;

},{"../internals/freezing":248,"../internals/has":255,"../internals/hidden-keys":256,"../internals/is-object":270,"../internals/object-define-property":293,"../internals/uid":348}],265:[function(require,module,exports){
var NATIVE_WEAK_MAP = require('../internals/native-weak-map');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var objectHas = require('../internals/has');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');

var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = new WeakMap();
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

},{"../internals/create-non-enumerable-property":230,"../internals/global":254,"../internals/has":255,"../internals/hidden-keys":256,"../internals/is-object":270,"../internals/native-weak-map":284,"../internals/shared-key":321}],266:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

},{"../internals/iterators":275,"../internals/well-known-symbol":351}],267:[function(require,module,exports){
var classof = require('../internals/classof-raw');

// `IsArray` abstract operation
// https://tc39.github.io/ecma262/#sec-isarray
module.exports = Array.isArray || function isArray(arg) {
  return classof(arg) == 'Array';
};

},{"../internals/classof-raw":220}],268:[function(require,module,exports){
var fails = require('../internals/fails');

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;

},{"../internals/fails":245}],269:[function(require,module,exports){
var isObject = require('../internals/is-object');

var floor = Math.floor;

// `Number.isInteger` method implementation
// https://tc39.github.io/ecma262/#sec-number.isinteger
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"../internals/is-object":270}],270:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],271:[function(require,module,exports){
module.exports = false;

},{}],272:[function(require,module,exports){
var isObject = require('../internals/is-object');
var classof = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.github.io/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};

},{"../internals/classof-raw":220,"../internals/is-object":270,"../internals/well-known-symbol":351}],273:[function(require,module,exports){
var anObject = require('../internals/an-object');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var toLength = require('../internals/to-length');
var bind = require('../internals/function-bind-context');
var getIteratorMethod = require('../internals/get-iterator-method');
var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
  var iterator, iterFn, index, length, result, next, step;

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = toLength(iterable.length); length > index; index++) {
        result = AS_ENTRIES
          ? boundFunction(anObject(step = iterable[index])[0], step[1])
          : boundFunction(iterable[index]);
        if (result && result instanceof Result) return result;
      } return new Result(false);
    }
    iterator = iterFn.call(iterable);
  }

  next = iterator.next;
  while (!(step = next.call(iterator)).done) {
    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
    if (typeof result == 'object' && result && result instanceof Result) return result;
  } return new Result(false);
};

iterate.stop = function (result) {
  return new Result(true, result);
};

},{"../internals/an-object":202,"../internals/call-with-safe-iteration-closing":218,"../internals/function-bind-context":249,"../internals/get-iterator-method":252,"../internals/is-array-iterator-method":266,"../internals/to-length":339}],274:[function(require,module,exports){
'use strict';
var getPrototypeOf = require('../internals/object-get-prototype-of');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var has = require('../internals/has');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};

},{"../internals/create-non-enumerable-property":230,"../internals/has":255,"../internals/is-pure":271,"../internals/object-get-prototype-of":298,"../internals/well-known-symbol":351}],275:[function(require,module,exports){
arguments[4][256][0].apply(exports,arguments)
},{"dup":256}],276:[function(require,module,exports){
var nativeExpm1 = Math.expm1;
var exp = Math.exp;

// `Math.expm1` method implementation
// https://tc39.github.io/ecma262/#sec-math.expm1
module.exports = (!nativeExpm1
  // Old FF bug
  || nativeExpm1(10) > 22025.465794806719 || nativeExpm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || nativeExpm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
} : nativeExpm1;

},{}],277:[function(require,module,exports){
var sign = require('../internals/math-sign');

var abs = Math.abs;
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

// `Math.fround` method implementation
// https://tc39.github.io/ecma262/#sec-math.fround
module.exports = Math.fround || function fround(x) {
  var $abs = abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"../internals/math-sign":279}],278:[function(require,module,exports){
var log = Math.log;

// `Math.log1p` method implementation
// https://tc39.github.io/ecma262/#sec-math.log1p
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
};

},{}],279:[function(require,module,exports){
// `Math.sign` method implementation
// https://tc39.github.io/ecma262/#sec-math.sign
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],280:[function(require,module,exports){
var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var classof = require('../internals/classof-raw');
var macrotask = require('../internals/task').set;
var IS_IOS = require('../internals/engine-is-ios');

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var IS_NODE = classof(process) == 'process';
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  } else if (MutationObserver && !IS_IOS) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    then = promise.then;
    notify = function () {
      then.call(promise, flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};

},{"../internals/classof-raw":220,"../internals/engine-is-ios":240,"../internals/global":254,"../internals/object-get-own-property-descriptor":294,"../internals/task":333}],281:[function(require,module,exports){
var global = require('../internals/global');

module.exports = global.Promise;

},{"../internals/global":254}],282:[function(require,module,exports){
var fails = require('../internals/fails');

module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  // Chrome 38 Symbol has incorrect toString conversion
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});

},{"../internals/fails":245}],283:[function(require,module,exports){
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');

var ITERATOR = wellKnownSymbol('iterator');

module.exports = !fails(function () {
  var url = new URL('b?a=1&b=2&c=3', 'http://a');
  var searchParams = url.searchParams;
  var result = '';
  url.pathname = 'c%20d';
  searchParams.forEach(function (value, key) {
    searchParams['delete']('b');
    result += key + value;
  });
  return (IS_PURE && !url.toJSON)
    || !searchParams.sort
    || url.href !== 'http://a/c%20d?a=1&c=3'
    || searchParams.get('c') !== '3'
    || String(new URLSearchParams('?a=1')) !== 'a=1'
    || !searchParams[ITERATOR]
    // throws in Edge
    || new URL('https://a@b').username !== 'a'
    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
    // not punycoded in Edge
    || new URL('http://тест').host !== 'xn--e1aybc'
    // not escaped in Chrome 62-
    || new URL('http://a#б').hash !== '#%D0%B1'
    // fails in Chrome 66-
    || result !== 'a1c3'
    // throws in Safari
    || new URL('http://x', undefined).host !== 'x';
});

},{"../internals/fails":245,"../internals/is-pure":271,"../internals/well-known-symbol":351}],284:[function(require,module,exports){
var global = require('../internals/global');
var inspectSource = require('../internals/inspect-source');

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

},{"../internals/global":254,"../internals/inspect-source":263}],285:[function(require,module,exports){
'use strict';
var aFunction = require('../internals/a-function');

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
};

// 25.4.1.5 NewPromiseCapability(C)
module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"../internals/a-function":197}],286:[function(require,module,exports){
var isRegExp = require('../internals/is-regexp');

module.exports = function (it) {
  if (isRegExp(it)) {
    throw TypeError("The method doesn't accept regular expressions");
  } return it;
};

},{"../internals/is-regexp":272}],287:[function(require,module,exports){
var global = require('../internals/global');

var globalIsFinite = global.isFinite;

// `Number.isFinite` method
// https://tc39.github.io/ecma262/#sec-number.isfinite
module.exports = Number.isFinite || function isFinite(it) {
  return typeof it == 'number' && globalIsFinite(it);
};

},{"../internals/global":254}],288:[function(require,module,exports){
var global = require('../internals/global');
var trim = require('../internals/string-trim').trim;
var whitespaces = require('../internals/whitespaces');

var $parseFloat = global.parseFloat;
var FORCED = 1 / $parseFloat(whitespaces + '-0') !== -Infinity;

// `parseFloat` method
// https://tc39.github.io/ecma262/#sec-parsefloat-string
module.exports = FORCED ? function parseFloat(string) {
  var trimmedString = trim(String(string));
  var result = $parseFloat(trimmedString);
  return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"../internals/global":254,"../internals/string-trim":332,"../internals/whitespaces":352}],289:[function(require,module,exports){
var global = require('../internals/global');
var trim = require('../internals/string-trim').trim;
var whitespaces = require('../internals/whitespaces');

var $parseInt = global.parseInt;
var hex = /^[+-]?0[Xx]/;
var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22;

// `parseInt` method
// https://tc39.github.io/ecma262/#sec-parseint-string-radix
module.exports = FORCED ? function parseInt(string, radix) {
  var S = trim(String(string));
  return $parseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
} : $parseInt;

},{"../internals/global":254,"../internals/string-trim":332,"../internals/whitespaces":352}],290:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var objectKeys = require('../internals/object-keys');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var toObject = require('../internals/to-object');
var IndexedObject = require('../internals/indexed-object');

var nativeAssign = Object.assign;
var defineProperty = Object.defineProperty;

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
module.exports = !nativeAssign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
    }
  } return T;
} : nativeAssign;

},{"../internals/descriptors":237,"../internals/fails":245,"../internals/indexed-object":261,"../internals/object-get-own-property-symbols":297,"../internals/object-keys":300,"../internals/object-property-is-enumerable":301,"../internals/to-object":340}],291:[function(require,module,exports){
var anObject = require('../internals/an-object');
var defineProperties = require('../internals/object-define-properties');
var enumBugKeys = require('../internals/enum-bug-keys');
var hiddenKeys = require('../internals/hidden-keys');
var html = require('../internals/html');
var documentCreateElement = require('../internals/document-create-element');
var sharedKey = require('../internals/shared-key');

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    /* global ActiveXObject */
    activeXDocument = document.domain && new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.github.io/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : defineProperties(result, Properties);
};

},{"../internals/an-object":202,"../internals/document-create-element":238,"../internals/enum-bug-keys":243,"../internals/hidden-keys":256,"../internals/html":258,"../internals/object-define-properties":292,"../internals/shared-key":321}],292:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var anObject = require('../internals/an-object');
var objectKeys = require('../internals/object-keys');

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
  return O;
};

},{"../internals/an-object":202,"../internals/descriptors":237,"../internals/object-define-property":293,"../internals/object-keys":300}],293:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');

var nativeDefineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"../internals/an-object":202,"../internals/descriptors":237,"../internals/ie8-dom-define":259,"../internals/to-primitive":343}],294:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var has = require('../internals/has');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');

var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};

},{"../internals/create-property-descriptor":231,"../internals/descriptors":237,"../internals/has":255,"../internals/ie8-dom-define":259,"../internals/object-property-is-enumerable":301,"../internals/to-indexed-object":337,"../internals/to-primitive":343}],295:[function(require,module,exports){
var toIndexedObject = require('../internals/to-indexed-object');
var nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names').f;

var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return nativeGetOwnPropertyNames(it);
  } catch (error) {
    return windowNames.slice();
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]'
    ? getWindowNames(it)
    : nativeGetOwnPropertyNames(toIndexedObject(it));
};

},{"../internals/object-get-own-property-names":296,"../internals/to-indexed-object":337}],296:[function(require,module,exports){
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};

},{"../internals/enum-bug-keys":243,"../internals/object-keys-internal":299}],297:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],298:[function(require,module,exports){
var has = require('../internals/has');
var toObject = require('../internals/to-object');
var sharedKey = require('../internals/shared-key');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};

},{"../internals/correct-prototype-getter":227,"../internals/has":255,"../internals/shared-key":321,"../internals/to-object":340}],299:[function(require,module,exports){
var has = require('../internals/has');
var toIndexedObject = require('../internals/to-indexed-object');
var indexOf = require('../internals/array-includes').indexOf;
var hiddenKeys = require('../internals/hidden-keys');

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};

},{"../internals/array-includes":210,"../internals/has":255,"../internals/hidden-keys":256,"../internals/to-indexed-object":337}],300:[function(require,module,exports){
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};

},{"../internals/enum-bug-keys":243,"../internals/object-keys-internal":299}],301:[function(require,module,exports){
'use strict';
var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;

},{}],302:[function(require,module,exports){
'use strict';
var IS_PURE = require('../internals/is-pure');
var global = require('../internals/global');
var fails = require('../internals/fails');

// Forced replacement object prototype accessors methods
module.exports = IS_PURE || !fails(function () {
  var key = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, key, function () { /* empty */ });
  delete global[key];
});

},{"../internals/fails":245,"../internals/global":254,"../internals/is-pure":271}],303:[function(require,module,exports){
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);

},{"../internals/a-possible-prototype":198,"../internals/an-object":202}],304:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var objectKeys = require('../internals/object-keys');
var toIndexedObject = require('../internals/to-indexed-object');
var propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;

// `Object.{ entries, values }` methods implementation
var createMethod = function (TO_ENTRIES) {
  return function (it) {
    var O = toIndexedObject(it);
    var keys = objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

module.exports = {
  // `Object.entries` method
  // https://tc39.github.io/ecma262/#sec-object.entries
  entries: createMethod(true),
  // `Object.values` method
  // https://tc39.github.io/ecma262/#sec-object.values
  values: createMethod(false)
};

},{"../internals/descriptors":237,"../internals/object-keys":300,"../internals/object-property-is-enumerable":301,"../internals/to-indexed-object":337}],305:[function(require,module,exports){
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classof = require('../internals/classof');

// `Object.prototype.toString` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};

},{"../internals/classof":221,"../internals/to-string-tag-support":344}],306:[function(require,module,exports){
var getBuiltIn = require('../internals/get-built-in');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var anObject = require('../internals/an-object');

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};

},{"../internals/an-object":202,"../internals/get-built-in":251,"../internals/object-get-own-property-names":296,"../internals/object-get-own-property-symbols":297}],307:[function(require,module,exports){
var global = require('../internals/global');

module.exports = global;

},{"../internals/global":254}],308:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};

},{}],309:[function(require,module,exports){
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var newPromiseCapability = require('../internals/new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"../internals/an-object":202,"../internals/is-object":270,"../internals/new-promise-capability":285}],310:[function(require,module,exports){
var redefine = require('../internals/redefine');

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};

},{"../internals/redefine":311}],311:[function(require,module,exports){
var global = require('../internals/global');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var has = require('../internals/has');
var setGlobal = require('../internals/set-global');
var inspectSource = require('../internals/inspect-source');
var InternalStateModule = require('../internals/internal-state');

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
});

},{"../internals/create-non-enumerable-property":230,"../internals/global":254,"../internals/has":255,"../internals/inspect-source":263,"../internals/internal-state":265,"../internals/set-global":318}],312:[function(require,module,exports){
var classof = require('./classof-raw');
var regexpExec = require('./regexp-exec');

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw TypeError('RegExp#exec called on incompatible receiver');
  }

  return regexpExec.call(R, S);
};


},{"./classof-raw":220,"./regexp-exec":313}],313:[function(require,module,exports){
'use strict';
var regexpFlags = require('./regexp-flags');
var stickyHelpers = require('./regexp-sticky-helpers');

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = regexpFlags.call(re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = flags.replace('y', '');
      if (flags.indexOf('g') === -1) {
        flags += 'g';
      }

      strCopy = String(str).slice(re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = nativeExec.call(sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = match.input.slice(charsAdded);
        match[0] = match[0].slice(charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./regexp-flags":314,"./regexp-sticky-helpers":315}],314:[function(require,module,exports){
'use strict';
var anObject = require('../internals/an-object');

// `RegExp.prototype.flags` getter implementation
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"../internals/an-object":202}],315:[function(require,module,exports){
'use strict';

var fails = require('./fails');

// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
// so we use an intermediate function.
function RE(s, f) {
  return RegExp(s, f);
}

exports.UNSUPPORTED_Y = fails(function () {
  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
  var re = RE('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

exports.BROKEN_CARET = fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = RE('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});

},{"./fails":245}],316:[function(require,module,exports){
// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};

},{}],317:[function(require,module,exports){
// `SameValue` abstract operation
// https://tc39.github.io/ecma262/#sec-samevalue
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],318:[function(require,module,exports){
var global = require('../internals/global');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

module.exports = function (key, value) {
  try {
    createNonEnumerableProperty(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};

},{"../internals/create-non-enumerable-property":230,"../internals/global":254}],319:[function(require,module,exports){
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var definePropertyModule = require('../internals/object-define-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var DESCRIPTORS = require('../internals/descriptors');

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};

},{"../internals/descriptors":237,"../internals/get-built-in":251,"../internals/object-define-property":293,"../internals/well-known-symbol":351}],320:[function(require,module,exports){
var defineProperty = require('../internals/object-define-property').f;
var has = require('../internals/has');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};

},{"../internals/has":255,"../internals/object-define-property":293,"../internals/well-known-symbol":351}],321:[function(require,module,exports){
var shared = require('../internals/shared');
var uid = require('../internals/uid');

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

},{"../internals/shared":323,"../internals/uid":348}],322:[function(require,module,exports){
var global = require('../internals/global');
var setGlobal = require('../internals/set-global');

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;

},{"../internals/global":254,"../internals/set-global":318}],323:[function(require,module,exports){
var IS_PURE = require('../internals/is-pure');
var store = require('../internals/shared-store');

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.6.5',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});

},{"../internals/is-pure":271,"../internals/shared-store":322}],324:[function(require,module,exports){
var anObject = require('../internals/an-object');
var aFunction = require('../internals/a-function');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.github.io/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
};

},{"../internals/a-function":197,"../internals/an-object":202,"../internals/well-known-symbol":351}],325:[function(require,module,exports){
var fails = require('../internals/fails');

// check the existence of a method, lowercase
// of a tag and escaping quotes in arguments
module.exports = function (METHOD_NAME) {
  return fails(function () {
    var test = ''[METHOD_NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  });
};

},{"../internals/fails":245}],326:[function(require,module,exports){
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');

// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = String(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};

},{"../internals/require-object-coercible":316,"../internals/to-integer":338}],327:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/280
var userAgent = require('../internals/engine-user-agent');

// eslint-disable-next-line unicorn/no-unsafe-regex
module.exports = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

},{"../internals/engine-user-agent":241}],328:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('../internals/to-length');
var repeat = require('../internals/string-repeat');
var requireObjectCoercible = require('../internals/require-object-coercible');

var ceil = Math.ceil;

// `String.prototype.{ padStart, padEnd }` methods implementation
var createMethod = function (IS_END) {
  return function ($this, maxLength, fillString) {
    var S = String(requireObjectCoercible($this));
    var stringLength = S.length;
    var fillStr = fillString === undefined ? ' ' : String(fillString);
    var intMaxLength = toLength(maxLength);
    var fillLen, stringFiller;
    if (intMaxLength <= stringLength || fillStr == '') return S;
    fillLen = intMaxLength - stringLength;
    stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
    return IS_END ? S + stringFiller : stringFiller + S;
  };
};

module.exports = {
  // `String.prototype.padStart` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
  start: createMethod(false),
  // `String.prototype.padEnd` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.padend
  end: createMethod(true)
};

},{"../internals/require-object-coercible":316,"../internals/string-repeat":330,"../internals/to-length":339}],329:[function(require,module,exports){
'use strict';
// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */
var ucs2decode = function (string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  while (counter < length) {
    var value = string.charCodeAt(counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = string.charCodeAt(counter++);
      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
};

/**
 * Converts a digit/integer into a basic code point.
 */
var digitToBasic = function (digit) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */
var adapt = function (delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */
// eslint-disable-next-line  max-statements
var encode = function (input) {
  var output = [];

  // Convert the input in UCS-2 to an array of Unicode code points.
  input = ucs2decode(input);

  // Cache the length.
  var inputLength = input.length;

  // Initialize the state.
  var n = initialN;
  var delta = 0;
  var bias = initialBias;
  var i, currentValue;

  // Handle the basic code points.
  for (i = 0; i < input.length; i++) {
    currentValue = input[i];
    if (currentValue < 0x80) {
      output.push(stringFromCharCode(currentValue));
    }
  }

  var basicLength = output.length; // number of basic code points.
  var handledCPCount = basicLength; // number of code points that have been handled;

  // Finish the basic string with a delimiter unless it's empty.
  if (basicLength) {
    output.push(delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next larger one:
    var m = maxInt;
    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
    var handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      throw RangeError(OVERFLOW_ERROR);
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue < n && ++delta > maxInt) {
        throw RangeError(OVERFLOW_ERROR);
      }
      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;
        for (var k = base; /* no condition */; k += base) {
          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
          if (q < t) break;
          var qMinusT = q - t;
          var baseMinusT = base - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
          q = floor(qMinusT / baseMinusT);
        }

        output.push(stringFromCharCode(digitToBasic(q)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }

    ++delta;
    ++n;
  }
  return output.join('');
};

module.exports = function (input) {
  var encoded = [];
  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
  var i, label;
  for (i = 0; i < labels.length; i++) {
    label = labels[i];
    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
  }
  return encoded.join('.');
};

},{}],330:[function(require,module,exports){
'use strict';
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');

// `String.prototype.repeat` method implementation
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
module.exports = ''.repeat || function repeat(count) {
  var str = String(requireObjectCoercible(this));
  var result = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
  return result;
};

},{"../internals/require-object-coercible":316,"../internals/to-integer":338}],331:[function(require,module,exports){
var fails = require('../internals/fails');
var whitespaces = require('../internals/whitespaces');

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
  });
};

},{"../internals/fails":245,"../internals/whitespaces":352}],332:[function(require,module,exports){
var requireObjectCoercible = require('../internals/require-object-coercible');
var whitespaces = require('../internals/whitespaces');

var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = String(requireObjectCoercible($this));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};

},{"../internals/require-object-coercible":316,"../internals/whitespaces":352}],333:[function(require,module,exports){
var global = require('../internals/global');
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');
var bind = require('../internals/function-bind-context');
var html = require('../internals/html');
var createElement = require('../internals/document-create-element');
var IS_IOS = require('../internals/engine-is-ios');

var location = global.location;
var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;

var run = function (id) {
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(id + '', location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (classof(process) == 'process') {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    global.addEventListener &&
    typeof postMessage == 'function' &&
    !global.importScripts &&
    !fails(post) &&
    location.protocol !== 'file:'
  ) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};

},{"../internals/classof-raw":220,"../internals/document-create-element":238,"../internals/engine-is-ios":240,"../internals/fails":245,"../internals/function-bind-context":249,"../internals/global":254,"../internals/html":258}],334:[function(require,module,exports){
var classof = require('../internals/classof-raw');

// `thisNumberValue` abstract operation
// https://tc39.github.io/ecma262/#sec-thisnumbervalue
module.exports = function (value) {
  if (typeof value != 'number' && classof(value) != 'Number') {
    throw TypeError('Incorrect invocation');
  }
  return +value;
};

},{"../internals/classof-raw":220}],335:[function(require,module,exports){
var toInteger = require('../internals/to-integer');

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

},{"../internals/to-integer":338}],336:[function(require,module,exports){
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');

// `ToIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-toindex
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length or index');
  return length;
};

},{"../internals/to-integer":338,"../internals/to-length":339}],337:[function(require,module,exports){
// toObject with fallback for non-array-like ES3 strings
var IndexedObject = require('../internals/indexed-object');
var requireObjectCoercible = require('../internals/require-object-coercible');

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};

},{"../internals/indexed-object":261,"../internals/require-object-coercible":316}],338:[function(require,module,exports){
var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};

},{}],339:[function(require,module,exports){
var toInteger = require('../internals/to-integer');

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

},{"../internals/to-integer":338}],340:[function(require,module,exports){
var requireObjectCoercible = require('../internals/require-object-coercible');

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};

},{"../internals/require-object-coercible":316}],341:[function(require,module,exports){
var toPositiveInteger = require('../internals/to-positive-integer');

module.exports = function (it, BYTES) {
  var offset = toPositiveInteger(it);
  if (offset % BYTES) throw RangeError('Wrong offset');
  return offset;
};

},{"../internals/to-positive-integer":342}],342:[function(require,module,exports){
var toInteger = require('../internals/to-integer');

module.exports = function (it) {
  var result = toInteger(it);
  if (result < 0) throw RangeError("The argument can't be less than 0");
  return result;
};

},{"../internals/to-integer":338}],343:[function(require,module,exports){
var isObject = require('../internals/is-object');

// `ToPrimitive` abstract operation
// https://tc39.github.io/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"../internals/is-object":270}],344:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';

},{"../internals/well-known-symbol":351}],345:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var DESCRIPTORS = require('../internals/descriptors');
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var ArrayBufferModule = require('../internals/array-buffer');
var anInstance = require('../internals/an-instance');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var toLength = require('../internals/to-length');
var toIndex = require('../internals/to-index');
var toOffset = require('../internals/to-offset');
var toPrimitive = require('../internals/to-primitive');
var has = require('../internals/has');
var classof = require('../internals/classof');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var typedArrayFrom = require('../internals/typed-array-from');
var forEach = require('../internals/array-iteration').forEach;
var setSpecies = require('../internals/set-species');
var definePropertyModule = require('../internals/object-define-property');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var InternalStateModule = require('../internals/internal-state');
var inheritIfRequired = require('../internals/inherit-if-required');

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var round = Math.round;
var RangeError = global.RangeError;
var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
var TypedArray = ArrayBufferViewCore.TypedArray;
var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var isTypedArray = ArrayBufferViewCore.isTypedArray;
var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
var WRONG_LENGTH = 'Wrong length';

var fromList = function (C, list) {
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
};

var addGetter = function (it, key) {
  nativeDefineProperty(it, key, { get: function () {
    return getInternalState(this)[key];
  } });
};

var isArrayBuffer = function (it) {
  var klass;
  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
};

var isTypedArrayIndex = function (target, key) {
  return isTypedArray(target)
    && typeof key != 'symbol'
    && key in target
    && String(+key) == String(key);
};

var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
  return isTypedArrayIndex(target, key = toPrimitive(key, true))
    ? createPropertyDescriptor(2, target[key])
    : nativeGetOwnPropertyDescriptor(target, key);
};

var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
  if (isTypedArrayIndex(target, key = toPrimitive(key, true))
    && isObject(descriptor)
    && has(descriptor, 'value')
    && !has(descriptor, 'get')
    && !has(descriptor, 'set')
    // TODO: add validation descriptor w/o calling accessors
    && !descriptor.configurable
    && (!has(descriptor, 'writable') || descriptor.writable)
    && (!has(descriptor, 'enumerable') || descriptor.enumerable)
  ) {
    target[key] = descriptor.value;
    return target;
  } return nativeDefineProperty(target, key, descriptor);
};

if (DESCRIPTORS) {
  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
    definePropertyModule.f = wrappedDefineProperty;
    addGetter(TypedArrayPrototype, 'buffer');
    addGetter(TypedArrayPrototype, 'byteOffset');
    addGetter(TypedArrayPrototype, 'byteLength');
    addGetter(TypedArrayPrototype, 'length');
  }

  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
    defineProperty: wrappedDefineProperty
  });

  module.exports = function (TYPE, wrapper, CLAMPED) {
    var BYTES = TYPE.match(/\d+$/)[0] / 8;
    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + TYPE;
    var SETTER = 'set' + TYPE;
    var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
    var TypedArrayConstructor = NativeTypedArrayConstructor;
    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
    var exported = {};

    var getter = function (that, index) {
      var data = getInternalState(that);
      return data.view[GETTER](index * BYTES + data.byteOffset, true);
    };

    var setter = function (that, index, value) {
      var data = getInternalState(that);
      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
    };

    var addElement = function (that, index) {
      nativeDefineProperty(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };

    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
        var index = 0;
        var byteOffset = 0;
        var buffer, byteLength, length;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new ArrayBuffer(byteLength);
        } else if (isArrayBuffer(data)) {
          buffer = data;
          byteOffset = toOffset(offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - byteOffset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (isTypedArray(data)) {
          return fromList(TypedArrayConstructor, data);
        } else {
          return typedArrayFrom.call(TypedArrayConstructor, data);
        }
        setInternalState(that, {
          buffer: buffer,
          byteOffset: byteOffset,
          byteLength: byteLength,
          length: length,
          view: new DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
        return inheritIfRequired(function () {
          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
          if (isArrayBuffer(data)) return $length !== undefined
            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
            : typedArrayOffset !== undefined
              ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
              : new NativeTypedArrayConstructor(data);
          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
          return typedArrayFrom.call(TypedArrayConstructor, data);
        }(), dummy, TypedArrayConstructor);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
        if (!(key in TypedArrayConstructor)) {
          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
        }
      });
      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
    }

    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
    }

    if (TYPED_ARRAY_TAG) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
    }

    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

    $({
      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
    }, exported);

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
    }

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
    }

    setSpecies(CONSTRUCTOR_NAME);
  };
} else module.exports = function () { /* empty */ };

},{"../internals/an-instance":201,"../internals/array-buffer":205,"../internals/array-buffer-view-core":204,"../internals/array-iteration":211,"../internals/classof":221,"../internals/create-non-enumerable-property":230,"../internals/create-property-descriptor":231,"../internals/descriptors":237,"../internals/export":244,"../internals/global":254,"../internals/has":255,"../internals/inherit-if-required":262,"../internals/internal-state":265,"../internals/is-object":270,"../internals/object-create":291,"../internals/object-define-property":293,"../internals/object-get-own-property-descriptor":294,"../internals/object-get-own-property-names":296,"../internals/object-set-prototype-of":303,"../internals/set-species":319,"../internals/to-index":336,"../internals/to-length":339,"../internals/to-offset":341,"../internals/to-primitive":343,"../internals/typed-array-constructors-require-wrappers":346,"../internals/typed-array-from":347}],346:[function(require,module,exports){
/* eslint-disable no-new */
var global = require('../internals/global');
var fails = require('../internals/fails');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var NATIVE_ARRAY_BUFFER_VIEWS = require('../internals/array-buffer-view-core').NATIVE_ARRAY_BUFFER_VIEWS;

var ArrayBuffer = global.ArrayBuffer;
var Int8Array = global.Int8Array;

module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
  Int8Array(1);
}) || !fails(function () {
  new Int8Array(-1);
}) || !checkCorrectnessOfIteration(function (iterable) {
  new Int8Array();
  new Int8Array(null);
  new Int8Array(1.5);
  new Int8Array(iterable);
}, true) || fails(function () {
  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
  return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;
});

},{"../internals/array-buffer-view-core":204,"../internals/check-correctness-of-iteration":219,"../internals/fails":245,"../internals/global":254}],347:[function(require,module,exports){
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var getIteratorMethod = require('../internals/get-iterator-method');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var bind = require('../internals/function-bind-context');
var aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;

module.exports = function from(source /* , mapfn, thisArg */) {
  var O = toObject(source);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var i, length, result, step, iterator, next;
  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    O = [];
    while (!(step = next.call(iterator)).done) {
      O.push(step.value);
    }
  }
  if (mapping && argumentsLength > 2) {
    mapfn = bind(mapfn, arguments[2], 2);
  }
  length = toLength(O.length);
  result = new (aTypedArrayConstructor(this))(length);
  for (i = 0; length > i; i++) {
    result[i] = mapping ? mapfn(O[i], i) : O[i];
  }
  return result;
};

},{"../internals/array-buffer-view-core":204,"../internals/function-bind-context":249,"../internals/get-iterator-method":252,"../internals/is-array-iterator-method":266,"../internals/to-length":339,"../internals/to-object":340}],348:[function(require,module,exports){
var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};

},{}],349:[function(require,module,exports){
var NATIVE_SYMBOL = require('../internals/native-symbol');

module.exports = NATIVE_SYMBOL
  // eslint-disable-next-line no-undef
  && !Symbol.sham
  // eslint-disable-next-line no-undef
  && typeof Symbol.iterator == 'symbol';

},{"../internals/native-symbol":282}],350:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');

exports.f = wellKnownSymbol;

},{"../internals/well-known-symbol":351}],351:[function(require,module,exports){
var global = require('../internals/global');
var shared = require('../internals/shared');
var has = require('../internals/has');
var uid = require('../internals/uid');
var NATIVE_SYMBOL = require('../internals/native-symbol');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!has(WellKnownSymbolsStore, name)) {
    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];
    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};

},{"../internals/global":254,"../internals/has":255,"../internals/native-symbol":282,"../internals/shared":323,"../internals/uid":348,"../internals/use-symbol-as-uid":349}],352:[function(require,module,exports){
// a string of all valid unicode whitespaces
// eslint-disable-next-line max-len
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],353:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var arrayBufferModule = require('../internals/array-buffer');
var setSpecies = require('../internals/set-species');

var ARRAY_BUFFER = 'ArrayBuffer';
var ArrayBuffer = arrayBufferModule[ARRAY_BUFFER];
var NativeArrayBuffer = global[ARRAY_BUFFER];

// `ArrayBuffer` constructor
// https://tc39.github.io/ecma262/#sec-arraybuffer-constructor
$({ global: true, forced: NativeArrayBuffer !== ArrayBuffer }, {
  ArrayBuffer: ArrayBuffer
});

setSpecies(ARRAY_BUFFER);

},{"../internals/array-buffer":205,"../internals/export":244,"../internals/global":254,"../internals/set-species":319}],354:[function(require,module,exports){
var $ = require('../internals/export');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

// `ArrayBuffer.isView` method
// https://tc39.github.io/ecma262/#sec-arraybuffer.isview
$({ target: 'ArrayBuffer', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
  isView: ArrayBufferViewCore.isView
});

},{"../internals/array-buffer-view-core":204,"../internals/export":244}],355:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var ArrayBufferModule = require('../internals/array-buffer');
var anObject = require('../internals/an-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');
var speciesConstructor = require('../internals/species-constructor');

var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var nativeArrayBufferSlice = ArrayBuffer.prototype.slice;

var INCORRECT_SLICE = fails(function () {
  return !new ArrayBuffer(2).slice(1, undefined).byteLength;
});

// `ArrayBuffer.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice
$({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
  slice: function slice(start, end) {
    if (nativeArrayBufferSlice !== undefined && end === undefined) {
      return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
    }
    var length = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var result = new (speciesConstructor(this, ArrayBuffer))(toLength(fin - first));
    var viewSource = new DataView(this);
    var viewTarget = new DataView(result);
    var index = 0;
    while (first < fin) {
      viewTarget.setUint8(index++, viewSource.getUint8(first++));
    } return result;
  }
});

},{"../internals/an-object":202,"../internals/array-buffer":205,"../internals/export":244,"../internals/fails":245,"../internals/species-constructor":324,"../internals/to-absolute-index":335,"../internals/to-length":339}],356:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var createProperty = require('../internals/create-property');
var arraySpeciesCreate = require('../internals/array-species-create');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.github.io/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, forced: FORCED }, {
  concat: function concat(arg) { // eslint-disable-line no-unused-vars
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = toLength(E.length);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});

},{"../internals/array-method-has-species-support":213,"../internals/array-species-create":217,"../internals/create-property":232,"../internals/engine-v8-version":242,"../internals/export":244,"../internals/fails":245,"../internals/is-array":267,"../internals/is-object":270,"../internals/to-length":339,"../internals/to-object":340,"../internals/well-known-symbol":351}],357:[function(require,module,exports){
var $ = require('../internals/export');
var copyWithin = require('../internals/array-copy-within');
var addToUnscopables = require('../internals/add-to-unscopables');

// `Array.prototype.copyWithin` method
// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
$({ target: 'Array', proto: true }, {
  copyWithin: copyWithin
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('copyWithin');

},{"../internals/add-to-unscopables":199,"../internals/array-copy-within":206,"../internals/export":244}],358:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $every = require('../internals/array-iteration').every;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var STRICT_METHOD = arrayMethodIsStrict('every');
var USES_TO_LENGTH = arrayMethodUsesToLength('every');

// `Array.prototype.every` method
// https://tc39.github.io/ecma262/#sec-array.prototype.every
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/array-iteration":211,"../internals/array-method-is-strict":214,"../internals/array-method-uses-to-length":215,"../internals/export":244}],359:[function(require,module,exports){
var $ = require('../internals/export');
var fill = require('../internals/array-fill');
var addToUnscopables = require('../internals/add-to-unscopables');

// `Array.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
$({ target: 'Array', proto: true }, {
  fill: fill
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('fill');

},{"../internals/add-to-unscopables":199,"../internals/array-fill":207,"../internals/export":244}],360:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $filter = require('../internals/array-iteration').filter;
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
// Edge 14- issue
var USES_TO_LENGTH = arrayMethodUsesToLength('filter');

// `Array.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/array-iteration":211,"../internals/array-method-has-species-support":213,"../internals/array-method-uses-to-length":215,"../internals/export":244}],361:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $findIndex = require('../internals/array-iteration').findIndex;
var addToUnscopables = require('../internals/add-to-unscopables');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

var USES_TO_LENGTH = arrayMethodUsesToLength(FIND_INDEX);

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

// `Array.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
$({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND_INDEX);

},{"../internals/add-to-unscopables":199,"../internals/array-iteration":211,"../internals/array-method-uses-to-length":215,"../internals/export":244}],362:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $find = require('../internals/array-iteration').find;
var addToUnscopables = require('../internals/add-to-unscopables');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var FIND = 'find';
var SKIPS_HOLES = true;

var USES_TO_LENGTH = arrayMethodUsesToLength(FIND);

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.github.io/ecma262/#sec-array.prototype.find
$({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND);

},{"../internals/add-to-unscopables":199,"../internals/array-iteration":211,"../internals/array-method-uses-to-length":215,"../internals/export":244}],363:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var flattenIntoArray = require('../internals/flatten-into-array');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var aFunction = require('../internals/a-function');
var arraySpeciesCreate = require('../internals/array-species-create');

// `Array.prototype.flatMap` method
// https://github.com/tc39/proposal-flatMap
$({ target: 'Array', proto: true }, {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A;
    aFunction(callbackfn);
    A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    return A;
  }
});

},{"../internals/a-function":197,"../internals/array-species-create":217,"../internals/export":244,"../internals/flatten-into-array":247,"../internals/to-length":339,"../internals/to-object":340}],364:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var flattenIntoArray = require('../internals/flatten-into-array');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var toInteger = require('../internals/to-integer');
var arraySpeciesCreate = require('../internals/array-species-create');

// `Array.prototype.flat` method
// https://github.com/tc39/proposal-flatMap
$({ target: 'Array', proto: true }, {
  flat: function flat(/* depthArg = 1 */) {
    var depthArg = arguments.length ? arguments[0] : undefined;
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

},{"../internals/array-species-create":217,"../internals/export":244,"../internals/flatten-into-array":247,"../internals/to-integer":338,"../internals/to-length":339,"../internals/to-object":340}],365:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var forEach = require('../internals/array-for-each');

// `Array.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {
  forEach: forEach
});

},{"../internals/array-for-each":208,"../internals/export":244}],366:[function(require,module,exports){
var $ = require('../internals/export');
var from = require('../internals/array-from');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');

var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  Array.from(iterable);
});

// `Array.from` method
// https://tc39.github.io/ecma262/#sec-array.from
$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
  from: from
});

},{"../internals/array-from":209,"../internals/check-correctness-of-iteration":219,"../internals/export":244}],367:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $includes = require('../internals/array-includes').includes;
var addToUnscopables = require('../internals/add-to-unscopables');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

// `Array.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-array.prototype.includes
$({ target: 'Array', proto: true, forced: !USES_TO_LENGTH }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');

},{"../internals/add-to-unscopables":199,"../internals/array-includes":210,"../internals/array-method-uses-to-length":215,"../internals/export":244}],368:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $indexOf = require('../internals/array-includes').indexOf;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var nativeIndexOf = [].indexOf;

var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('indexOf');
var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

// `Array.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? nativeIndexOf.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/array-includes":210,"../internals/array-method-is-strict":214,"../internals/array-method-uses-to-length":215,"../internals/export":244}],369:[function(require,module,exports){
var $ = require('../internals/export');
var isArray = require('../internals/is-array');

// `Array.isArray` method
// https://tc39.github.io/ecma262/#sec-array.isarray
$({ target: 'Array', stat: true }, {
  isArray: isArray
});

},{"../internals/export":244,"../internals/is-array":267}],370:[function(require,module,exports){
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var addToUnscopables = require('../internals/add-to-unscopables');
var Iterators = require('../internals/iterators');
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.github.io/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.github.io/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"../internals/add-to-unscopables":199,"../internals/define-iterator":235,"../internals/internal-state":265,"../internals/iterators":275,"../internals/to-indexed-object":337}],371:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var IndexedObject = require('../internals/indexed-object');
var toIndexedObject = require('../internals/to-indexed-object');
var arrayMethodIsStrict = require('../internals/array-method-is-strict');

var nativeJoin = [].join;

var ES3_STRINGS = IndexedObject != Object;
var STRICT_METHOD = arrayMethodIsStrict('join', ',');

// `Array.prototype.join` method
// https://tc39.github.io/ecma262/#sec-array.prototype.join
$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {
  join: function join(separator) {
    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
  }
});

},{"../internals/array-method-is-strict":214,"../internals/export":244,"../internals/indexed-object":261,"../internals/to-indexed-object":337}],372:[function(require,module,exports){
var $ = require('../internals/export');
var lastIndexOf = require('../internals/array-last-index-of');

// `Array.prototype.lastIndexOf` method
// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
$({ target: 'Array', proto: true, forced: lastIndexOf !== [].lastIndexOf }, {
  lastIndexOf: lastIndexOf
});

},{"../internals/array-last-index-of":212,"../internals/export":244}],373:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $map = require('../internals/array-iteration').map;
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');
// FF49- issue
var USES_TO_LENGTH = arrayMethodUsesToLength('map');

// `Array.prototype.map` method
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/array-iteration":211,"../internals/array-method-has-species-support":213,"../internals/array-method-uses-to-length":215,"../internals/export":244}],374:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var createProperty = require('../internals/create-property');

var ISNT_GENERIC = fails(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
});

// `Array.of` method
// https://tc39.github.io/ecma262/#sec-array.of
// WebKit Array.of isn't generic
$({ target: 'Array', stat: true, forced: ISNT_GENERIC }, {
  of: function of(/* ...args */) {
    var index = 0;
    var argumentsLength = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(argumentsLength);
    while (argumentsLength > index) createProperty(result, index, arguments[index++]);
    result.length = argumentsLength;
    return result;
  }
});

},{"../internals/create-property":232,"../internals/export":244,"../internals/fails":245}],375:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $reduceRight = require('../internals/array-reduce').right;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var STRICT_METHOD = arrayMethodIsStrict('reduceRight');
// For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method
var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });

// `Array.prototype.reduceRight` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/array-method-is-strict":214,"../internals/array-method-uses-to-length":215,"../internals/array-reduce":216,"../internals/export":244}],376:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $reduce = require('../internals/array-reduce').left;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var STRICT_METHOD = arrayMethodIsStrict('reduce');
var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });

// `Array.prototype.reduce` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/array-method-is-strict":214,"../internals/array-method-uses-to-length":215,"../internals/array-reduce":216,"../internals/export":244}],377:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var isArray = require('../internals/is-array');

var nativeReverse = [].reverse;
var test = [1, 2];

// `Array.prototype.reverse` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reverse
// fix for Safari 12.0 bug
// https://bugs.webkit.org/show_bug.cgi?id=188794
$({ target: 'Array', proto: true, forced: String(test) === String(test.reverse()) }, {
  reverse: function reverse() {
    // eslint-disable-next-line no-self-assign
    if (isArray(this)) this.length = this.length;
    return nativeReverse.call(this);
  }
});

},{"../internals/export":244,"../internals/is-array":267}],378:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');
var toIndexedObject = require('../internals/to-indexed-object');
var createProperty = require('../internals/create-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
var USES_TO_LENGTH = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });

var SPECIES = wellKnownSymbol('species');
var nativeSlice = [].slice;
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === Array || Constructor === undefined) {
        return nativeSlice.call(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});

},{"../internals/array-method-has-species-support":213,"../internals/array-method-uses-to-length":215,"../internals/create-property":232,"../internals/export":244,"../internals/is-array":267,"../internals/is-object":270,"../internals/to-absolute-index":335,"../internals/to-indexed-object":337,"../internals/to-length":339,"../internals/well-known-symbol":351}],379:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $some = require('../internals/array-iteration').some;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var STRICT_METHOD = arrayMethodIsStrict('some');
var USES_TO_LENGTH = arrayMethodUsesToLength('some');

// `Array.prototype.some` method
// https://tc39.github.io/ecma262/#sec-array.prototype.some
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/array-iteration":211,"../internals/array-method-is-strict":214,"../internals/array-method-uses-to-length":215,"../internals/export":244}],380:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var aFunction = require('../internals/a-function');
var toObject = require('../internals/to-object');
var fails = require('../internals/fails');
var arrayMethodIsStrict = require('../internals/array-method-is-strict');

var test = [];
var nativeSort = test.sort;

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var STRICT_METHOD = arrayMethodIsStrict('sort');

var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD;

// `Array.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-array.prototype.sort
$({ target: 'Array', proto: true, forced: FORCED }, {
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? nativeSort.call(toObject(this))
      : nativeSort.call(toObject(this), aFunction(comparefn));
  }
});

},{"../internals/a-function":197,"../internals/array-method-is-strict":214,"../internals/export":244,"../internals/fails":245,"../internals/to-object":340}],381:[function(require,module,exports){
var setSpecies = require('../internals/set-species');

// `Array[@@species]` getter
// https://tc39.github.io/ecma262/#sec-get-array-@@species
setSpecies('Array');

},{"../internals/set-species":319}],382:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var toObject = require('../internals/to-object');
var arraySpeciesCreate = require('../internals/array-species-create');
var createProperty = require('../internals/create-property');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
var USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });

var max = Math.max;
var min = Math.min;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

// `Array.prototype.splice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.splice
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  splice: function splice(start, deleteCount /* , ...items */) {
    var O = toObject(this);
    var len = toLength(O.length);
    var actualStart = toAbsoluteIndex(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
    }
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O) createProperty(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});

},{"../internals/array-method-has-species-support":213,"../internals/array-method-uses-to-length":215,"../internals/array-species-create":217,"../internals/create-property":232,"../internals/export":244,"../internals/to-absolute-index":335,"../internals/to-integer":338,"../internals/to-length":339,"../internals/to-object":340}],383:[function(require,module,exports){
// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = require('../internals/add-to-unscopables');

addToUnscopables('flatMap');

},{"../internals/add-to-unscopables":199}],384:[function(require,module,exports){
// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = require('../internals/add-to-unscopables');

addToUnscopables('flat');

},{"../internals/add-to-unscopables":199}],385:[function(require,module,exports){
var $ = require('../internals/export');
var ArrayBufferModule = require('../internals/array-buffer');
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');

// `DataView` constructor
// https://tc39.github.io/ecma262/#sec-dataview-constructor
$({ global: true, forced: !NATIVE_ARRAY_BUFFER }, {
  DataView: ArrayBufferModule.DataView
});

},{"../internals/array-buffer":205,"../internals/array-buffer-native":203,"../internals/export":244}],386:[function(require,module,exports){
var $ = require('../internals/export');

// `Date.now` method
// https://tc39.github.io/ecma262/#sec-date.now
$({ target: 'Date', stat: true }, {
  now: function now() {
    return new Date().getTime();
  }
});

},{"../internals/export":244}],387:[function(require,module,exports){
var $ = require('../internals/export');
var toISOString = require('../internals/date-to-iso-string');

// `Date.prototype.toISOString` method
// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit has a broken implementations
$({ target: 'Date', proto: true, forced: Date.prototype.toISOString !== toISOString }, {
  toISOString: toISOString
});

},{"../internals/date-to-iso-string":233,"../internals/export":244}],388:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');

var FORCED = fails(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
});

// `Date.prototype.toJSON` method
// https://tc39.github.io/ecma262/#sec-date.prototype.tojson
$({ target: 'Date', proto: true, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"../internals/export":244,"../internals/fails":245,"../internals/to-object":340,"../internals/to-primitive":343}],389:[function(require,module,exports){
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var dateToPrimitive = require('../internals/date-to-primitive');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var DatePrototype = Date.prototype;

// `Date.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-date.prototype-@@toprimitive
if (!(TO_PRIMITIVE in DatePrototype)) {
  createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
}

},{"../internals/create-non-enumerable-property":230,"../internals/date-to-primitive":234,"../internals/well-known-symbol":351}],390:[function(require,module,exports){
var redefine = require('../internals/redefine');

var DatePrototype = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var nativeDateToString = DatePrototype[TO_STRING];
var getTime = DatePrototype.getTime;

// `Date.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-date.prototype.tostring
if (new Date(NaN) + '' != INVALID_DATE) {
  redefine(DatePrototype, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? nativeDateToString.call(this) : INVALID_DATE;
  });
}

},{"../internals/redefine":311}],391:[function(require,module,exports){
var $ = require('../internals/export');
var bind = require('../internals/function-bind');

// `Function.prototype.bind` method
// https://tc39.github.io/ecma262/#sec-function.prototype.bind
$({ target: 'Function', proto: true }, {
  bind: bind
});

},{"../internals/export":244,"../internals/function-bind":250}],392:[function(require,module,exports){
'use strict';
var isObject = require('../internals/is-object');
var definePropertyModule = require('../internals/object-define-property');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var wellKnownSymbol = require('../internals/well-known-symbol');

var HAS_INSTANCE = wellKnownSymbol('hasInstance');
var FunctionPrototype = Function.prototype;

// `Function.prototype[@@hasInstance]` method
// https://tc39.github.io/ecma262/#sec-function.prototype-@@hasinstance
if (!(HAS_INSTANCE in FunctionPrototype)) {
  definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, { value: function (O) {
    if (typeof this != 'function' || !isObject(O)) return false;
    if (!isObject(this.prototype)) return O instanceof this;
    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
    while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
    return false;
  } });
}

},{"../internals/is-object":270,"../internals/object-define-property":293,"../internals/object-get-prototype-of":298,"../internals/well-known-symbol":351}],393:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var defineProperty = require('../internals/object-define-property').f;

var FunctionPrototype = Function.prototype;
var FunctionPrototypeToString = FunctionPrototype.toString;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// Function instances `.name` property
// https://tc39.github.io/ecma262/#sec-function-instances-name
if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
  defineProperty(FunctionPrototype, NAME, {
    configurable: true,
    get: function () {
      try {
        return FunctionPrototypeToString.call(this).match(nameRE)[1];
      } catch (error) {
        return '';
      }
    }
  });
}

},{"../internals/descriptors":237,"../internals/object-define-property":293}],394:[function(require,module,exports){
var $ = require('../internals/export');
var global = require('../internals/global');

// `globalThis` object
// https://github.com/tc39/proposal-global
$({ global: true }, {
  globalThis: global
});

},{"../internals/export":244,"../internals/global":254}],395:[function(require,module,exports){
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var fails = require('../internals/fails');

var $stringify = getBuiltIn('JSON', 'stringify');
var re = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;

var fix = function (match, offset, string) {
  var prev = string.charAt(offset - 1);
  var next = string.charAt(offset + 1);
  if ((low.test(match) && !hi.test(next)) || (hi.test(match) && !low.test(prev))) {
    return '\\u' + match.charCodeAt(0).toString(16);
  } return match;
};

var FORCED = fails(function () {
  return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"'
    || $stringify('\uDEAD') !== '"\\udead"';
});

if ($stringify) {
  // https://github.com/tc39/proposal-well-formed-stringify
  $({ target: 'JSON', stat: true, forced: FORCED }, {
    // eslint-disable-next-line no-unused-vars
    stringify: function stringify(it, replacer, space) {
      var result = $stringify.apply(null, arguments);
      return typeof result == 'string' ? result.replace(re, fix) : result;
    }
  });
}

},{"../internals/export":244,"../internals/fails":245,"../internals/get-built-in":251}],396:[function(require,module,exports){
var global = require('../internals/global');
var setToStringTag = require('../internals/set-to-string-tag');

// JSON[@@toStringTag] property
// https://tc39.github.io/ecma262/#sec-json-@@tostringtag
setToStringTag(global.JSON, 'JSON', true);

},{"../internals/global":254,"../internals/set-to-string-tag":320}],397:[function(require,module,exports){
'use strict';
var collection = require('../internals/collection');
var collectionStrong = require('../internals/collection-strong');

// `Map` constructor
// https://tc39.github.io/ecma262/#sec-map-objects
module.exports = collection('Map', function (init) {
  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);

},{"../internals/collection":224,"../internals/collection-strong":222}],398:[function(require,module,exports){
var $ = require('../internals/export');
var log1p = require('../internals/math-log1p');

var nativeAcosh = Math.acosh;
var log = Math.log;
var sqrt = Math.sqrt;
var LN2 = Math.LN2;

var FORCED = !nativeAcosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  || Math.floor(nativeAcosh(Number.MAX_VALUE)) != 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  || nativeAcosh(Infinity) != Infinity;

// `Math.acosh` method
// https://tc39.github.io/ecma262/#sec-math.acosh
$({ target: 'Math', stat: true, forced: FORCED }, {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? log(x) + LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"../internals/export":244,"../internals/math-log1p":278}],399:[function(require,module,exports){
var $ = require('../internals/export');

var nativeAsinh = Math.asinh;
var log = Math.log;
var sqrt = Math.sqrt;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
}

// `Math.asinh` method
// https://tc39.github.io/ecma262/#sec-math.asinh
// Tor Browser bug: Math.asinh(0) -> -0
$({ target: 'Math', stat: true, forced: !(nativeAsinh && 1 / nativeAsinh(0) > 0) }, {
  asinh: asinh
});

},{"../internals/export":244}],400:[function(require,module,exports){
var $ = require('../internals/export');

var nativeAtanh = Math.atanh;
var log = Math.log;

// `Math.atanh` method
// https://tc39.github.io/ecma262/#sec-math.atanh
// Tor Browser bug: Math.atanh(-0) -> 0
$({ target: 'Math', stat: true, forced: !(nativeAtanh && 1 / nativeAtanh(-0) < 0) }, {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
  }
});

},{"../internals/export":244}],401:[function(require,module,exports){
var $ = require('../internals/export');
var sign = require('../internals/math-sign');

var abs = Math.abs;
var pow = Math.pow;

// `Math.cbrt` method
// https://tc39.github.io/ecma262/#sec-math.cbrt
$({ target: 'Math', stat: true }, {
  cbrt: function cbrt(x) {
    return sign(x = +x) * pow(abs(x), 1 / 3);
  }
});

},{"../internals/export":244,"../internals/math-sign":279}],402:[function(require,module,exports){
var $ = require('../internals/export');

var floor = Math.floor;
var log = Math.log;
var LOG2E = Math.LOG2E;

// `Math.clz32` method
// https://tc39.github.io/ecma262/#sec-math.clz32
$({ target: 'Math', stat: true }, {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - floor(log(x + 0.5) * LOG2E) : 32;
  }
});

},{"../internals/export":244}],403:[function(require,module,exports){
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');

var nativeCosh = Math.cosh;
var abs = Math.abs;
var E = Math.E;

// `Math.cosh` method
// https://tc39.github.io/ecma262/#sec-math.cosh
$({ target: 'Math', stat: true, forced: !nativeCosh || nativeCosh(710) === Infinity }, {
  cosh: function cosh(x) {
    var t = expm1(abs(x) - 1) + 1;
    return (t + 1 / (t * E * E)) * (E / 2);
  }
});

},{"../internals/export":244,"../internals/math-expm1":276}],404:[function(require,module,exports){
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');

// `Math.expm1` method
// https://tc39.github.io/ecma262/#sec-math.expm1
$({ target: 'Math', stat: true, forced: expm1 != Math.expm1 }, { expm1: expm1 });

},{"../internals/export":244,"../internals/math-expm1":276}],405:[function(require,module,exports){
var $ = require('../internals/export');
var fround = require('../internals/math-fround');

// `Math.fround` method
// https://tc39.github.io/ecma262/#sec-math.fround
$({ target: 'Math', stat: true }, { fround: fround });

},{"../internals/export":244,"../internals/math-fround":277}],406:[function(require,module,exports){
var $ = require('../internals/export');

var $hypot = Math.hypot;
var abs = Math.abs;
var sqrt = Math.sqrt;

// Chrome 77 bug
// https://bugs.chromium.org/p/v8/issues/detail?id=9546
var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

// `Math.hypot` method
// https://tc39.github.io/ecma262/#sec-math.hypot
$({ target: 'Math', stat: true, forced: BUGGY }, {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * sqrt(sum);
  }
});

},{"../internals/export":244}],407:[function(require,module,exports){
var $ = require('../internals/export');
var fails = require('../internals/fails');

var nativeImul = Math.imul;

var FORCED = fails(function () {
  return nativeImul(0xFFFFFFFF, 5) != -5 || nativeImul.length != 2;
});

// `Math.imul` method
// https://tc39.github.io/ecma262/#sec-math.imul
// some WebKit versions fails with big numbers, some has wrong arity
$({ target: 'Math', stat: true, forced: FORCED }, {
  imul: function imul(x, y) {
    var UINT16 = 0xFFFF;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"../internals/export":244,"../internals/fails":245}],408:[function(require,module,exports){
var $ = require('../internals/export');

var log = Math.log;
var LOG10E = Math.LOG10E;

// `Math.log10` method
// https://tc39.github.io/ecma262/#sec-math.log10
$({ target: 'Math', stat: true }, {
  log10: function log10(x) {
    return log(x) * LOG10E;
  }
});

},{"../internals/export":244}],409:[function(require,module,exports){
var $ = require('../internals/export');
var log1p = require('../internals/math-log1p');

// `Math.log1p` method
// https://tc39.github.io/ecma262/#sec-math.log1p
$({ target: 'Math', stat: true }, { log1p: log1p });

},{"../internals/export":244,"../internals/math-log1p":278}],410:[function(require,module,exports){
var $ = require('../internals/export');

var log = Math.log;
var LN2 = Math.LN2;

// `Math.log2` method
// https://tc39.github.io/ecma262/#sec-math.log2
$({ target: 'Math', stat: true }, {
  log2: function log2(x) {
    return log(x) / LN2;
  }
});

},{"../internals/export":244}],411:[function(require,module,exports){
var $ = require('../internals/export');
var sign = require('../internals/math-sign');

// `Math.sign` method
// https://tc39.github.io/ecma262/#sec-math.sign
$({ target: 'Math', stat: true }, {
  sign: sign
});

},{"../internals/export":244,"../internals/math-sign":279}],412:[function(require,module,exports){
var $ = require('../internals/export');
var fails = require('../internals/fails');
var expm1 = require('../internals/math-expm1');

var abs = Math.abs;
var exp = Math.exp;
var E = Math.E;

var FORCED = fails(function () {
  return Math.sinh(-2e-17) != -2e-17;
});

// `Math.sinh` method
// https://tc39.github.io/ecma262/#sec-math.sinh
// V8 near Chromium 38 has a problem with very small numbers
$({ target: 'Math', stat: true, forced: FORCED }, {
  sinh: function sinh(x) {
    return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
  }
});

},{"../internals/export":244,"../internals/fails":245,"../internals/math-expm1":276}],413:[function(require,module,exports){
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');

var exp = Math.exp;

// `Math.tanh` method
// https://tc39.github.io/ecma262/#sec-math.tanh
$({ target: 'Math', stat: true }, {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"../internals/export":244,"../internals/math-expm1":276}],414:[function(require,module,exports){
var setToStringTag = require('../internals/set-to-string-tag');

// Math[@@toStringTag] property
// https://tc39.github.io/ecma262/#sec-math-@@tostringtag
setToStringTag(Math, 'Math', true);

},{"../internals/set-to-string-tag":320}],415:[function(require,module,exports){
var $ = require('../internals/export');

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.github.io/ecma262/#sec-math.trunc
$({ target: 'Math', stat: true }, {
  trunc: function trunc(it) {
    return (it > 0 ? floor : ceil)(it);
  }
});

},{"../internals/export":244}],416:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var redefine = require('../internals/redefine');
var has = require('../internals/has');
var classof = require('../internals/classof-raw');
var inheritIfRequired = require('../internals/inherit-if-required');
var toPrimitive = require('../internals/to-primitive');
var fails = require('../internals/fails');
var create = require('../internals/object-create');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var defineProperty = require('../internals/object-define-property').f;
var trim = require('../internals/string-trim').trim;

var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;

// Opera ~12 has broken Object#toString
var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;

// `ToNumber` abstract operation
// https://tc39.github.io/ecma262/#sec-tonumber
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  var first, third, radix, maxCode, digits, length, index, code;
  if (typeof it == 'string' && it.length > 2) {
    it = trim(it);
    first = it.charCodeAt(0);
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
        default: return +it;
      }
      digits = it.slice(2);
      length = digits.length;
      for (index = 0; index < length; index++) {
        code = digits.charCodeAt(index);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

// `Number` constructor
// https://tc39.github.io/ecma262/#sec-number-constructor
if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
  var NumberWrapper = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var dummy = this;
    return dummy instanceof NumberWrapper
      // check on 1..constructor(foo) case
      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)
        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
  };
  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }
  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  redefine(global, NUMBER, NumberWrapper);
}

},{"../internals/classof-raw":220,"../internals/descriptors":237,"../internals/fails":245,"../internals/global":254,"../internals/has":255,"../internals/inherit-if-required":262,"../internals/is-forced":268,"../internals/object-create":291,"../internals/object-define-property":293,"../internals/object-get-own-property-descriptor":294,"../internals/object-get-own-property-names":296,"../internals/redefine":311,"../internals/string-trim":332,"../internals/to-primitive":343}],417:[function(require,module,exports){
var $ = require('../internals/export');

// `Number.EPSILON` constant
// https://tc39.github.io/ecma262/#sec-number.epsilon
$({ target: 'Number', stat: true }, {
  EPSILON: Math.pow(2, -52)
});

},{"../internals/export":244}],418:[function(require,module,exports){
var $ = require('../internals/export');
var numberIsFinite = require('../internals/number-is-finite');

// `Number.isFinite` method
// https://tc39.github.io/ecma262/#sec-number.isfinite
$({ target: 'Number', stat: true }, { isFinite: numberIsFinite });

},{"../internals/export":244,"../internals/number-is-finite":287}],419:[function(require,module,exports){
var $ = require('../internals/export');
var isInteger = require('../internals/is-integer');

// `Number.isInteger` method
// https://tc39.github.io/ecma262/#sec-number.isinteger
$({ target: 'Number', stat: true }, {
  isInteger: isInteger
});

},{"../internals/export":244,"../internals/is-integer":269}],420:[function(require,module,exports){
var $ = require('../internals/export');

// `Number.isNaN` method
// https://tc39.github.io/ecma262/#sec-number.isnan
$({ target: 'Number', stat: true }, {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"../internals/export":244}],421:[function(require,module,exports){
var $ = require('../internals/export');
var isInteger = require('../internals/is-integer');

var abs = Math.abs;

// `Number.isSafeInteger` method
// https://tc39.github.io/ecma262/#sec-number.issafeinteger
$({ target: 'Number', stat: true }, {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
  }
});

},{"../internals/export":244,"../internals/is-integer":269}],422:[function(require,module,exports){
var $ = require('../internals/export');

// `Number.MAX_SAFE_INTEGER` constant
// https://tc39.github.io/ecma262/#sec-number.max_safe_integer
$({ target: 'Number', stat: true }, {
  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
});

},{"../internals/export":244}],423:[function(require,module,exports){
var $ = require('../internals/export');

// `Number.MIN_SAFE_INTEGER` constant
// https://tc39.github.io/ecma262/#sec-number.min_safe_integer
$({ target: 'Number', stat: true }, {
  MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
});

},{"../internals/export":244}],424:[function(require,module,exports){
var $ = require('../internals/export');
var parseFloat = require('../internals/number-parse-float');

// `Number.parseFloat` method
// https://tc39.github.io/ecma262/#sec-number.parseFloat
$({ target: 'Number', stat: true, forced: Number.parseFloat != parseFloat }, {
  parseFloat: parseFloat
});

},{"../internals/export":244,"../internals/number-parse-float":288}],425:[function(require,module,exports){
var $ = require('../internals/export');
var parseInt = require('../internals/number-parse-int');

// `Number.parseInt` method
// https://tc39.github.io/ecma262/#sec-number.parseint
$({ target: 'Number', stat: true, forced: Number.parseInt != parseInt }, {
  parseInt: parseInt
});

},{"../internals/export":244,"../internals/number-parse-int":289}],426:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var toInteger = require('../internals/to-integer');
var thisNumberValue = require('../internals/this-number-value');
var repeat = require('../internals/string-repeat');
var fails = require('../internals/fails');

var nativeToFixed = 1.0.toFixed;
var floor = Math.floor;

var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

var FORCED = nativeToFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToFixed.call({});
});

// `Number.prototype.toFixed` method
// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
$({ target: 'Number', proto: true, forced: FORCED }, {
  // eslint-disable-next-line max-statements
  toFixed: function toFixed(fractionDigits) {
    var number = thisNumberValue(this);
    var fractDigits = toInteger(fractionDigits);
    var data = [0, 0, 0, 0, 0, 0];
    var sign = '';
    var result = '0';
    var e, z, j, k;

    var multiply = function (n, c) {
      var index = -1;
      var c2 = c;
      while (++index < 6) {
        c2 += n * data[index];
        data[index] = c2 % 1e7;
        c2 = floor(c2 / 1e7);
      }
    };

    var divide = function (n) {
      var index = 6;
      var c = 0;
      while (--index >= 0) {
        c += data[index];
        data[index] = floor(c / n);
        c = (c % n) * 1e7;
      }
    };

    var dataToString = function () {
      var index = 6;
      var s = '';
      while (--index >= 0) {
        if (s !== '' || index === 0 || data[index] !== 0) {
          var t = String(data[index]);
          s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
        }
      } return s;
    };

    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
    // eslint-disable-next-line no-self-compare
    if (number != number) return 'NaN';
    if (number <= -1e21 || number >= 1e21) return String(number);
    if (number < 0) {
      sign = '-';
      number = -number;
    }
    if (number > 1e-21) {
      e = log(number * pow(2, 69, 1)) - 69;
      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = fractDigits;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        result = dataToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        result = dataToString() + repeat.call('0', fractDigits);
      }
    }
    if (fractDigits > 0) {
      k = result.length;
      result = sign + (k <= fractDigits
        ? '0.' + repeat.call('0', fractDigits - k) + result
        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
    } else {
      result = sign + result;
    } return result;
  }
});

},{"../internals/export":244,"../internals/fails":245,"../internals/string-repeat":330,"../internals/this-number-value":334,"../internals/to-integer":338}],427:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var thisNumberValue = require('../internals/this-number-value');

var nativeToPrecision = 1.0.toPrecision;

var FORCED = fails(function () {
  // IE7-
  return nativeToPrecision.call(1, undefined) !== '1';
}) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToPrecision.call({});
});

// `Number.prototype.toPrecision` method
// https://tc39.github.io/ecma262/#sec-number.prototype.toprecision
$({ target: 'Number', proto: true, forced: FORCED }, {
  toPrecision: function toPrecision(precision) {
    return precision === undefined
      ? nativeToPrecision.call(thisNumberValue(this))
      : nativeToPrecision.call(thisNumberValue(this), precision);
  }
});

},{"../internals/export":244,"../internals/fails":245,"../internals/this-number-value":334}],428:[function(require,module,exports){
var $ = require('../internals/export');
var assign = require('../internals/object-assign');

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
  assign: assign
});

},{"../internals/export":244,"../internals/object-assign":290}],429:[function(require,module,exports){
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var create = require('../internals/object-create');

// `Object.create` method
// https://tc39.github.io/ecma262/#sec-object.create
$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {
  create: create
});

},{"../internals/descriptors":237,"../internals/export":244,"../internals/object-create":291}],430:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var aFunction = require('../internals/a-function');
var definePropertyModule = require('../internals/object-define-property');

// `Object.prototype.__defineGetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__defineGetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __defineGetter__: function __defineGetter__(P, getter) {
      definePropertyModule.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
    }
  });
}

},{"../internals/a-function":197,"../internals/descriptors":237,"../internals/export":244,"../internals/object-define-property":293,"../internals/object-prototype-accessors-forced":302,"../internals/to-object":340}],431:[function(require,module,exports){
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var defineProperties = require('../internals/object-define-properties');

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {
  defineProperties: defineProperties
});

},{"../internals/descriptors":237,"../internals/export":244,"../internals/object-define-properties":292}],432:[function(require,module,exports){
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var objectDefinePropertyModile = require('../internals/object-define-property');

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {
  defineProperty: objectDefinePropertyModile.f
});

},{"../internals/descriptors":237,"../internals/export":244,"../internals/object-define-property":293}],433:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var aFunction = require('../internals/a-function');
var definePropertyModule = require('../internals/object-define-property');

// `Object.prototype.__defineSetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__defineSetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __defineSetter__: function __defineSetter__(P, setter) {
      definePropertyModule.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
    }
  });
}

},{"../internals/a-function":197,"../internals/descriptors":237,"../internals/export":244,"../internals/object-define-property":293,"../internals/object-prototype-accessors-forced":302,"../internals/to-object":340}],434:[function(require,module,exports){
var $ = require('../internals/export');
var $entries = require('../internals/object-to-array').entries;

// `Object.entries` method
// https://tc39.github.io/ecma262/#sec-object.entries
$({ target: 'Object', stat: true }, {
  entries: function entries(O) {
    return $entries(O);
  }
});

},{"../internals/export":244,"../internals/object-to-array":304}],435:[function(require,module,exports){
var $ = require('../internals/export');
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;

var nativeFreeze = Object.freeze;
var FAILS_ON_PRIMITIVES = fails(function () { nativeFreeze(1); });

// `Object.freeze` method
// https://tc39.github.io/ecma262/#sec-object.freeze
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  freeze: function freeze(it) {
    return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
  }
});

},{"../internals/export":244,"../internals/fails":245,"../internals/freezing":248,"../internals/internal-metadata":264,"../internals/is-object":270}],436:[function(require,module,exports){
var $ = require('../internals/export');
var iterate = require('../internals/iterate');
var createProperty = require('../internals/create-property');

// `Object.fromEntries` method
// https://github.com/tc39/proposal-object-from-entries
$({ target: 'Object', stat: true }, {
  fromEntries: function fromEntries(iterable) {
    var obj = {};
    iterate(iterable, function (k, v) {
      createProperty(obj, k, v);
    }, undefined, true);
    return obj;
  }
});

},{"../internals/create-property":232,"../internals/export":244,"../internals/iterate":273}],437:[function(require,module,exports){
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toIndexedObject = require('../internals/to-indexed-object');
var nativeGetOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var DESCRIPTORS = require('../internals/descriptors');

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });
var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
  }
});

},{"../internals/descriptors":237,"../internals/export":244,"../internals/fails":245,"../internals/object-get-own-property-descriptor":294,"../internals/to-indexed-object":337}],438:[function(require,module,exports){
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var ownKeys = require('../internals/own-keys');
var toIndexedObject = require('../internals/to-indexed-object');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var createProperty = require('../internals/create-property');

// `Object.getOwnPropertyDescriptors` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIndexedObject(object);
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var keys = ownKeys(O);
    var result = {};
    var index = 0;
    var key, descriptor;
    while (keys.length > index) {
      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
      if (descriptor !== undefined) createProperty(result, key, descriptor);
    }
    return result;
  }
});

},{"../internals/create-property":232,"../internals/descriptors":237,"../internals/export":244,"../internals/object-get-own-property-descriptor":294,"../internals/own-keys":306,"../internals/to-indexed-object":337}],439:[function(require,module,exports){
var $ = require('../internals/export');
var fails = require('../internals/fails');
var nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names-external').f;

var FAILS_ON_PRIMITIVES = fails(function () { return !Object.getOwnPropertyNames(1); });

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  getOwnPropertyNames: nativeGetOwnPropertyNames
});

},{"../internals/export":244,"../internals/fails":245,"../internals/object-get-own-property-names-external":295}],440:[function(require,module,exports){
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toObject = require('../internals/to-object');
var nativeGetPrototypeOf = require('../internals/object-get-prototype-of');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(it) {
    return nativeGetPrototypeOf(toObject(it));
  }
});


},{"../internals/correct-prototype-getter":227,"../internals/export":244,"../internals/fails":245,"../internals/object-get-prototype-of":298,"../internals/to-object":340}],441:[function(require,module,exports){
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');

var nativeIsExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsExtensible(1); });

// `Object.isExtensible` method
// https://tc39.github.io/ecma262/#sec-object.isextensible
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isExtensible: function isExtensible(it) {
    return isObject(it) ? nativeIsExtensible ? nativeIsExtensible(it) : true : false;
  }
});

},{"../internals/export":244,"../internals/fails":245,"../internals/is-object":270}],442:[function(require,module,exports){
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');

var nativeIsFrozen = Object.isFrozen;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsFrozen(1); });

// `Object.isFrozen` method
// https://tc39.github.io/ecma262/#sec-object.isfrozen
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isFrozen: function isFrozen(it) {
    return isObject(it) ? nativeIsFrozen ? nativeIsFrozen(it) : false : true;
  }
});

},{"../internals/export":244,"../internals/fails":245,"../internals/is-object":270}],443:[function(require,module,exports){
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');

var nativeIsSealed = Object.isSealed;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsSealed(1); });

// `Object.isSealed` method
// https://tc39.github.io/ecma262/#sec-object.issealed
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isSealed: function isSealed(it) {
    return isObject(it) ? nativeIsSealed ? nativeIsSealed(it) : false : true;
  }
});

},{"../internals/export":244,"../internals/fails":245,"../internals/is-object":270}],444:[function(require,module,exports){
var $ = require('../internals/export');
var is = require('../internals/same-value');

// `Object.is` method
// https://tc39.github.io/ecma262/#sec-object.is
$({ target: 'Object', stat: true }, {
  is: is
});

},{"../internals/export":244,"../internals/same-value":317}],445:[function(require,module,exports){
var $ = require('../internals/export');
var toObject = require('../internals/to-object');
var nativeKeys = require('../internals/object-keys');
var fails = require('../internals/fails');

var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});

},{"../internals/export":244,"../internals/fails":245,"../internals/object-keys":300,"../internals/to-object":340}],446:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

// `Object.prototype.__lookupGetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupGetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __lookupGetter__: function __lookupGetter__(P) {
      var O = toObject(this);
      var key = toPrimitive(P, true);
      var desc;
      do {
        if (desc = getOwnPropertyDescriptor(O, key)) return desc.get;
      } while (O = getPrototypeOf(O));
    }
  });
}

},{"../internals/descriptors":237,"../internals/export":244,"../internals/object-get-own-property-descriptor":294,"../internals/object-get-prototype-of":298,"../internals/object-prototype-accessors-forced":302,"../internals/to-object":340,"../internals/to-primitive":343}],447:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

// `Object.prototype.__lookupSetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupSetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __lookupSetter__: function __lookupSetter__(P) {
      var O = toObject(this);
      var key = toPrimitive(P, true);
      var desc;
      do {
        if (desc = getOwnPropertyDescriptor(O, key)) return desc.set;
      } while (O = getPrototypeOf(O));
    }
  });
}

},{"../internals/descriptors":237,"../internals/export":244,"../internals/object-get-own-property-descriptor":294,"../internals/object-get-prototype-of":298,"../internals/object-prototype-accessors-forced":302,"../internals/to-object":340,"../internals/to-primitive":343}],448:[function(require,module,exports){
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');

var nativePreventExtensions = Object.preventExtensions;
var FAILS_ON_PRIMITIVES = fails(function () { nativePreventExtensions(1); });

// `Object.preventExtensions` method
// https://tc39.github.io/ecma262/#sec-object.preventextensions
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  preventExtensions: function preventExtensions(it) {
    return nativePreventExtensions && isObject(it) ? nativePreventExtensions(onFreeze(it)) : it;
  }
});

},{"../internals/export":244,"../internals/fails":245,"../internals/freezing":248,"../internals/internal-metadata":264,"../internals/is-object":270}],449:[function(require,module,exports){
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');

var nativeSeal = Object.seal;
var FAILS_ON_PRIMITIVES = fails(function () { nativeSeal(1); });

// `Object.seal` method
// https://tc39.github.io/ecma262/#sec-object.seal
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  seal: function seal(it) {
    return nativeSeal && isObject(it) ? nativeSeal(onFreeze(it)) : it;
  }
});

},{"../internals/export":244,"../internals/fails":245,"../internals/freezing":248,"../internals/internal-metadata":264,"../internals/is-object":270}],450:[function(require,module,exports){
var $ = require('../internals/export');
var setPrototypeOf = require('../internals/object-set-prototype-of');

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
$({ target: 'Object', stat: true }, {
  setPrototypeOf: setPrototypeOf
});

},{"../internals/export":244,"../internals/object-set-prototype-of":303}],451:[function(require,module,exports){
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var redefine = require('../internals/redefine');
var toString = require('../internals/object-to-string');

// `Object.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  redefine(Object.prototype, 'toString', toString, { unsafe: true });
}

},{"../internals/object-to-string":305,"../internals/redefine":311,"../internals/to-string-tag-support":344}],452:[function(require,module,exports){
var $ = require('../internals/export');
var $values = require('../internals/object-to-array').values;

// `Object.values` method
// https://tc39.github.io/ecma262/#sec-object.values
$({ target: 'Object', stat: true }, {
  values: function values(O) {
    return $values(O);
  }
});

},{"../internals/export":244,"../internals/object-to-array":304}],453:[function(require,module,exports){
var $ = require('../internals/export');
var parseFloatImplementation = require('../internals/number-parse-float');

// `parseFloat` method
// https://tc39.github.io/ecma262/#sec-parsefloat-string
$({ global: true, forced: parseFloat != parseFloatImplementation }, {
  parseFloat: parseFloatImplementation
});

},{"../internals/export":244,"../internals/number-parse-float":288}],454:[function(require,module,exports){
var $ = require('../internals/export');
var parseIntImplementation = require('../internals/number-parse-int');

// `parseInt` method
// https://tc39.github.io/ecma262/#sec-parseint-string-radix
$({ global: true, forced: parseInt != parseIntImplementation }, {
  parseInt: parseIntImplementation
});

},{"../internals/export":244,"../internals/number-parse-int":289}],455:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var aFunction = require('../internals/a-function');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var iterate = require('../internals/iterate');

// `Promise.allSettled` method
// https://github.com/tc39/proposal-promise-allSettled
$({ target: 'Promise', stat: true }, {
  allSettled: function allSettled(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aFunction(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        promiseResolve.call(C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'fulfilled', value: value };
          --remaining || resolve(values);
        }, function (e) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'rejected', reason: e };
          --remaining || resolve(values);
        });
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/a-function":197,"../internals/export":244,"../internals/iterate":273,"../internals/new-promise-capability":285,"../internals/perform":308}],456:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var NativePromise = require('../internals/native-promise-constructor');
var fails = require('../internals/fails');
var getBuiltIn = require('../internals/get-built-in');
var speciesConstructor = require('../internals/species-constructor');
var promiseResolve = require('../internals/promise-resolve');
var redefine = require('../internals/redefine');

// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
var NON_GENERIC = !!NativePromise && fails(function () {
  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
});

// `Promise.prototype.finally` method
// https://tc39.github.io/ecma262/#sec-promise.prototype.finally
$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
  'finally': function (onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = typeof onFinally == 'function';
    return this.then(
      isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () { return x; });
      } : onFinally,
      isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () { throw e; });
      } : onFinally
    );
  }
});

// patch native Promise.prototype for native async functions
if (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {
  redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);
}

},{"../internals/export":244,"../internals/fails":245,"../internals/get-built-in":251,"../internals/is-pure":271,"../internals/native-promise-constructor":281,"../internals/promise-resolve":309,"../internals/redefine":311,"../internals/species-constructor":324}],457:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var global = require('../internals/global');
var getBuiltIn = require('../internals/get-built-in');
var NativePromise = require('../internals/native-promise-constructor');
var redefine = require('../internals/redefine');
var redefineAll = require('../internals/redefine-all');
var setToStringTag = require('../internals/set-to-string-tag');
var setSpecies = require('../internals/set-species');
var isObject = require('../internals/is-object');
var aFunction = require('../internals/a-function');
var anInstance = require('../internals/an-instance');
var classof = require('../internals/classof-raw');
var inspectSource = require('../internals/inspect-source');
var iterate = require('../internals/iterate');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var speciesConstructor = require('../internals/species-constructor');
var task = require('../internals/task').set;
var microtask = require('../internals/microtask');
var promiseResolve = require('../internals/promise-resolve');
var hostReportErrors = require('../internals/host-report-errors');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var InternalStateModule = require('../internals/internal-state');
var isForced = require('../internals/is-forced');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var SPECIES = wellKnownSymbol('species');
var PROMISE = 'Promise';
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var PromiseConstructor = NativePromise;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var $fetch = getBuiltIn('fetch');
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;
var IS_NODE = classof(process) == 'process';
var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

var FORCED = isForced(PROMISE, function () {
  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
  if (!GLOBAL_CORE_JS_PROMISE) {
    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // We can't detect it synchronously, so just check versions
    if (V8_VERSION === 66) return true;
    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;
  }
  // We need Promise#finally in the pure version for preventing prototype pollution
  if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;
  // Detect correctness of subclassing with @@species support
  var promise = PromiseConstructor.resolve(1);
  var FakePromise = function (exec) {
    exec(function () { /* empty */ }, function () { /* empty */ });
  };
  var constructor = promise.constructor = {};
  constructor[SPECIES] = FakePromise;
  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
});

var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
});

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};

var notify = function (promise, state, isReject) {
  if (state.notified) return;
  state.notified = true;
  var chain = state.reactions;
  microtask(function () {
    var value = state.value;
    var ok = state.state == FULFILLED;
    var index = 0;
    // variable length - can't use forEach
    while (chain.length > index) {
      var reaction = chain[index++];
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
            state.rejection = HANDLED;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // can throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (error) {
        if (domain && !exited) domain.exit();
        reject(error);
      }
    }
    state.reactions = [];
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(promise, state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (handler = global['on' + name]) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (promise, state) {
  task.call(global, function () {
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (promise, state) {
  task.call(global, function () {
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, promise, state, unwrap) {
  return function (value) {
    fn(promise, state, value, unwrap);
  };
};

var internalReject = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(promise, state, true);
};

var internalResolve = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          then.call(value,
            bind(internalResolve, promise, wrapper, state),
            bind(internalReject, promise, wrapper, state)
          );
        } catch (error) {
          internalReject(promise, wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(promise, state, false);
    }
  } catch (error) {
    internalReject(promise, { done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromiseConstructor, PROMISE);
    aFunction(executor);
    Internal.call(this);
    var state = getInternalState(this);
    try {
      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
    } catch (error) {
      internalReject(this, state, error);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: [],
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };
  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
    // `Promise.prototype.then` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
    then: function then(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this);
      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = IS_NODE ? process.domain : undefined;
      state.parent = true;
      state.reactions.push(reaction);
      if (state.state != PENDING) notify(this, state, false);
      return reaction.promise;
    },
    // `Promise.prototype.catch` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, promise, state);
    this.reject = bind(internalReject, promise, state);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && typeof NativePromise == 'function') {
    nativeThen = NativePromise.prototype.then;

    // wrap native Promise#then for native async functions
    redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {
      var that = this;
      return new PromiseConstructor(function (resolve, reject) {
        nativeThen.call(that, resolve, reject);
      }).then(onFulfilled, onRejected);
    // https://github.com/zloirock/core-js/issues/640
    }, { unsafe: true });

    // wrap fetch result
    if (typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {
      // eslint-disable-next-line no-unused-vars
      fetch: function fetch(input /* , init */) {
        return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
      }
    });
  }
}

$({ global: true, wrap: true, forced: FORCED }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

PromiseWrapper = getBuiltIn(PROMISE);

// statics
$({ target: PROMISE, stat: true, forced: FORCED }, {
  // `Promise.reject` method
  // https://tc39.github.io/ecma262/#sec-promise.reject
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    capability.reject.call(undefined, r);
    return capability.promise;
  }
});

$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
  // `Promise.resolve` method
  // https://tc39.github.io/ecma262/#sec-promise.resolve
  resolve: function resolve(x) {
    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
  }
});

$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
  // `Promise.all` method
  // https://tc39.github.io/ecma262/#sec-promise.all
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        $promiseResolve.call(C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  },
  // `Promise.race` method
  // https://tc39.github.io/ecma262/#sec-promise.race
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      iterate(iterable, function (promise) {
        $promiseResolve.call(C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/a-function":197,"../internals/an-instance":201,"../internals/check-correctness-of-iteration":219,"../internals/classof-raw":220,"../internals/engine-v8-version":242,"../internals/export":244,"../internals/get-built-in":251,"../internals/global":254,"../internals/host-report-errors":257,"../internals/inspect-source":263,"../internals/internal-state":265,"../internals/is-forced":268,"../internals/is-object":270,"../internals/is-pure":271,"../internals/iterate":273,"../internals/microtask":280,"../internals/native-promise-constructor":281,"../internals/new-promise-capability":285,"../internals/perform":308,"../internals/promise-resolve":309,"../internals/redefine":311,"../internals/redefine-all":310,"../internals/set-species":319,"../internals/set-to-string-tag":320,"../internals/species-constructor":324,"../internals/task":333,"../internals/well-known-symbol":351}],458:[function(require,module,exports){
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var fails = require('../internals/fails');

var nativeApply = getBuiltIn('Reflect', 'apply');
var functionApply = Function.apply;

// MS Edge argumentsList argument is optional
var OPTIONAL_ARGUMENTS_LIST = !fails(function () {
  nativeApply(function () { /* empty */ });
});

// `Reflect.apply` method
// https://tc39.github.io/ecma262/#sec-reflect.apply
$({ target: 'Reflect', stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
  apply: function apply(target, thisArgument, argumentsList) {
    aFunction(target);
    anObject(argumentsList);
    return nativeApply
      ? nativeApply(target, thisArgument, argumentsList)
      : functionApply.call(target, thisArgument, argumentsList);
  }
});

},{"../internals/a-function":197,"../internals/an-object":202,"../internals/export":244,"../internals/fails":245,"../internals/get-built-in":251}],459:[function(require,module,exports){
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var bind = require('../internals/function-bind');
var fails = require('../internals/fails');

var nativeConstruct = getBuiltIn('Reflect', 'construct');

// `Reflect.construct` method
// https://tc39.github.io/ecma262/#sec-reflect.construct
// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  nativeConstruct(function () { /* empty */ });
});
var FORCED = NEW_TARGET_BUG || ARGS_BUG;

$({ target: 'Reflect', stat: true, forced: FORCED, sham: FORCED }, {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"../internals/a-function":197,"../internals/an-object":202,"../internals/export":244,"../internals/fails":245,"../internals/function-bind":250,"../internals/get-built-in":251,"../internals/is-object":270,"../internals/object-create":291}],460:[function(require,module,exports){
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');
var definePropertyModule = require('../internals/object-define-property');
var fails = require('../internals/fails');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
var ERROR_INSTEAD_OF_FALSE = fails(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(definePropertyModule.f({}, 1, { value: 1 }), 1, { value: 2 });
});

// `Reflect.defineProperty` method
// https://tc39.github.io/ecma262/#sec-reflect.defineproperty
$({ target: 'Reflect', stat: true, forced: ERROR_INSTEAD_OF_FALSE, sham: !DESCRIPTORS }, {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    var key = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      definePropertyModule.f(target, key, attributes);
      return true;
    } catch (error) {
      return false;
    }
  }
});

},{"../internals/an-object":202,"../internals/descriptors":237,"../internals/export":244,"../internals/fails":245,"../internals/object-define-property":293,"../internals/to-primitive":343}],461:[function(require,module,exports){
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

// `Reflect.deleteProperty` method
// https://tc39.github.io/ecma262/#sec-reflect.deleteproperty
$({ target: 'Reflect', stat: true }, {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var descriptor = getOwnPropertyDescriptor(anObject(target), propertyKey);
    return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
  }
});

},{"../internals/an-object":202,"../internals/export":244,"../internals/object-get-own-property-descriptor":294}],462:[function(require,module,exports){
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var anObject = require('../internals/an-object');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');

// `Reflect.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-reflect.getownpropertydescriptor
$({ target: 'Reflect', stat: true, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
  }
});

},{"../internals/an-object":202,"../internals/descriptors":237,"../internals/export":244,"../internals/object-get-own-property-descriptor":294}],463:[function(require,module,exports){
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var objectGetPrototypeOf = require('../internals/object-get-prototype-of');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

// `Reflect.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-reflect.getprototypeof
$({ target: 'Reflect', stat: true, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(target) {
    return objectGetPrototypeOf(anObject(target));
  }
});

},{"../internals/an-object":202,"../internals/correct-prototype-getter":227,"../internals/export":244,"../internals/object-get-prototype-of":298}],464:[function(require,module,exports){
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var anObject = require('../internals/an-object');
var has = require('../internals/has');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var getPrototypeOf = require('../internals/object-get-prototype-of');

// `Reflect.get` method
// https://tc39.github.io/ecma262/#sec-reflect.get
function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var descriptor, prototype;
  if (anObject(target) === receiver) return target[propertyKey];
  if (descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey)) return has(descriptor, 'value')
    ? descriptor.value
    : descriptor.get === undefined
      ? undefined
      : descriptor.get.call(receiver);
  if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);
}

$({ target: 'Reflect', stat: true }, {
  get: get
});

},{"../internals/an-object":202,"../internals/export":244,"../internals/has":255,"../internals/is-object":270,"../internals/object-get-own-property-descriptor":294,"../internals/object-get-prototype-of":298}],465:[function(require,module,exports){
var $ = require('../internals/export');

// `Reflect.has` method
// https://tc39.github.io/ecma262/#sec-reflect.has
$({ target: 'Reflect', stat: true }, {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"../internals/export":244}],466:[function(require,module,exports){
var $ = require('../internals/export');
var anObject = require('../internals/an-object');

var objectIsExtensible = Object.isExtensible;

// `Reflect.isExtensible` method
// https://tc39.github.io/ecma262/#sec-reflect.isextensible
$({ target: 'Reflect', stat: true }, {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return objectIsExtensible ? objectIsExtensible(target) : true;
  }
});

},{"../internals/an-object":202,"../internals/export":244}],467:[function(require,module,exports){
var $ = require('../internals/export');
var ownKeys = require('../internals/own-keys');

// `Reflect.ownKeys` method
// https://tc39.github.io/ecma262/#sec-reflect.ownkeys
$({ target: 'Reflect', stat: true }, {
  ownKeys: ownKeys
});

},{"../internals/export":244,"../internals/own-keys":306}],468:[function(require,module,exports){
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var anObject = require('../internals/an-object');
var FREEZING = require('../internals/freezing');

// `Reflect.preventExtensions` method
// https://tc39.github.io/ecma262/#sec-reflect.preventextensions
$({ target: 'Reflect', stat: true, sham: !FREEZING }, {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      var objectPreventExtensions = getBuiltIn('Object', 'preventExtensions');
      if (objectPreventExtensions) objectPreventExtensions(target);
      return true;
    } catch (error) {
      return false;
    }
  }
});

},{"../internals/an-object":202,"../internals/export":244,"../internals/freezing":248,"../internals/get-built-in":251}],469:[function(require,module,exports){
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');
var objectSetPrototypeOf = require('../internals/object-set-prototype-of');

// `Reflect.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-reflect.setprototypeof
if (objectSetPrototypeOf) $({ target: 'Reflect', stat: true }, {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    anObject(target);
    aPossiblePrototype(proto);
    try {
      objectSetPrototypeOf(target, proto);
      return true;
    } catch (error) {
      return false;
    }
  }
});

},{"../internals/a-possible-prototype":198,"../internals/an-object":202,"../internals/export":244,"../internals/object-set-prototype-of":303}],470:[function(require,module,exports){
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var fails = require('../internals/fails');
var definePropertyModule = require('../internals/object-define-property');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

// `Reflect.set` method
// https://tc39.github.io/ecma262/#sec-reflect.set
function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
  var existingDescriptor, prototype;
  if (!ownDescriptor) {
    if (isObject(prototype = getPrototypeOf(target))) {
      return set(prototype, propertyKey, V, receiver);
    }
    ownDescriptor = createPropertyDescriptor(0);
  }
  if (has(ownDescriptor, 'value')) {
    if (ownDescriptor.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      definePropertyModule.f(receiver, propertyKey, existingDescriptor);
    } else definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(0, V));
    return true;
  }
  return ownDescriptor.set === undefined ? false : (ownDescriptor.set.call(receiver, V), true);
}

// MS Edge 17-18 Reflect.set allows setting the property to object
// with non-writable property on the prototype
var MS_EDGE_BUG = fails(function () {
  var object = definePropertyModule.f({}, 'a', { configurable: true });
  // eslint-disable-next-line no-undef
  return Reflect.set(getPrototypeOf(object), 'a', 1, object) !== false;
});

$({ target: 'Reflect', stat: true, forced: MS_EDGE_BUG }, {
  set: set
});

},{"../internals/an-object":202,"../internals/create-property-descriptor":231,"../internals/export":244,"../internals/fails":245,"../internals/has":255,"../internals/is-object":270,"../internals/object-define-property":293,"../internals/object-get-own-property-descriptor":294,"../internals/object-get-prototype-of":298}],471:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var inheritIfRequired = require('../internals/inherit-if-required');
var defineProperty = require('../internals/object-define-property').f;
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var isRegExp = require('../internals/is-regexp');
var getFlags = require('../internals/regexp-flags');
var stickyHelpers = require('../internals/regexp-sticky-helpers');
var redefine = require('../internals/redefine');
var fails = require('../internals/fails');
var setInternalState = require('../internals/internal-state').set;
var setSpecies = require('../internals/set-species');
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;

// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

var FORCED = DESCRIPTORS && isForced('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y || fails(function () {
  re2[MATCH] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
})));

// `RegExp` constructor
// https://tc39.github.io/ecma262/#sec-regexp-constructor
if (FORCED) {
  var RegExpWrapper = function RegExp(pattern, flags) {
    var thisIsRegExp = this instanceof RegExpWrapper;
    var patternIsRegExp = isRegExp(pattern);
    var flagsAreUndefined = flags === undefined;
    var sticky;

    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
      return pattern;
    }

    if (CORRECT_NEW) {
      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
    } else if (pattern instanceof RegExpWrapper) {
      if (flagsAreUndefined) flags = getFlags.call(pattern);
      pattern = pattern.source;
    }

    if (UNSUPPORTED_Y) {
      sticky = !!flags && flags.indexOf('y') > -1;
      if (sticky) flags = flags.replace(/y/g, '');
    }

    var result = inheritIfRequired(
      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
      thisIsRegExp ? this : RegExpPrototype,
      RegExpWrapper
    );

    if (UNSUPPORTED_Y && sticky) setInternalState(result, { sticky: sticky });

    return result;
  };
  var proxy = function (key) {
    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
      configurable: true,
      get: function () { return NativeRegExp[key]; },
      set: function (it) { NativeRegExp[key] = it; }
    });
  };
  var keys = getOwnPropertyNames(NativeRegExp);
  var index = 0;
  while (keys.length > index) proxy(keys[index++]);
  RegExpPrototype.constructor = RegExpWrapper;
  RegExpWrapper.prototype = RegExpPrototype;
  redefine(global, 'RegExp', RegExpWrapper);
}

// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
setSpecies('RegExp');

},{"../internals/descriptors":237,"../internals/fails":245,"../internals/global":254,"../internals/inherit-if-required":262,"../internals/internal-state":265,"../internals/is-forced":268,"../internals/is-regexp":272,"../internals/object-define-property":293,"../internals/object-get-own-property-names":296,"../internals/redefine":311,"../internals/regexp-flags":314,"../internals/regexp-sticky-helpers":315,"../internals/set-species":319,"../internals/well-known-symbol":351}],472:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var exec = require('../internals/regexp-exec');

$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});

},{"../internals/export":244,"../internals/regexp-exec":313}],473:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var objectDefinePropertyModule = require('../internals/object-define-property');
var regExpFlags = require('../internals/regexp-flags');
var UNSUPPORTED_Y = require('../internals/regexp-sticky-helpers').UNSUPPORTED_Y;

// `RegExp.prototype.flags` getter
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
if (DESCRIPTORS && (/./g.flags != 'g' || UNSUPPORTED_Y)) {
  objectDefinePropertyModule.f(RegExp.prototype, 'flags', {
    configurable: true,
    get: regExpFlags
  });
}

},{"../internals/descriptors":237,"../internals/object-define-property":293,"../internals/regexp-flags":314,"../internals/regexp-sticky-helpers":315}],474:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var UNSUPPORTED_Y = require('../internals/regexp-sticky-helpers').UNSUPPORTED_Y;
var defineProperty = require('../internals/object-define-property').f;
var getInternalState = require('../internals/internal-state').get;
var RegExpPrototype = RegExp.prototype;

// `RegExp.prototype.sticky` getter
if (DESCRIPTORS && UNSUPPORTED_Y) {
  defineProperty(RegExp.prototype, 'sticky', {
    configurable: true,
    get: function () {
      if (this === RegExpPrototype) return undefined;
      // We can't use InternalStateModule.getterFor because
      // we don't add metadata for regexps created by a literal.
      if (this instanceof RegExp) {
        return !!getInternalState(this).sticky;
      }
      throw TypeError('Incompatible receiver, RegExp required');
    }
  });
}

},{"../internals/descriptors":237,"../internals/internal-state":265,"../internals/object-define-property":293,"../internals/regexp-sticky-helpers":315}],475:[function(require,module,exports){
'use strict';
// TODO: Remove from `core-js@4` since it's moved to entry points
require('../modules/es.regexp.exec');
var $ = require('../internals/export');
var isObject = require('../internals/is-object');

var DELEGATES_TO_EXEC = function () {
  var execCalled = false;
  var re = /[ac]/;
  re.exec = function () {
    execCalled = true;
    return /./.exec.apply(this, arguments);
  };
  return re.test('abc') === true && execCalled;
}();

var nativeTest = /./.test;

$({ target: 'RegExp', proto: true, forced: !DELEGATES_TO_EXEC }, {
  test: function (str) {
    if (typeof this.exec !== 'function') {
      return nativeTest.call(this, str);
    }
    var result = this.exec(str);
    if (result !== null && !isObject(result)) {
      throw new Error('RegExp exec method returned something other than an Object or null');
    }
    return !!result;
  }
});

},{"../internals/export":244,"../internals/is-object":270,"../modules/es.regexp.exec":472}],476:[function(require,module,exports){
'use strict';
var redefine = require('../internals/redefine');
var anObject = require('../internals/an-object');
var fails = require('../internals/fails');
var flags = require('../internals/regexp-flags');

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  redefine(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var p = String(R.source);
    var rf = R.flags;
    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
    return '/' + p + '/' + f;
  }, { unsafe: true });
}

},{"../internals/an-object":202,"../internals/fails":245,"../internals/redefine":311,"../internals/regexp-flags":314}],477:[function(require,module,exports){
'use strict';
var collection = require('../internals/collection');
var collectionStrong = require('../internals/collection-strong');

// `Set` constructor
// https://tc39.github.io/ecma262/#sec-set-objects
module.exports = collection('Set', function (init) {
  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);

},{"../internals/collection":224,"../internals/collection-strong":222}],478:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.anchor` method
// https://tc39.github.io/ecma262/#sec-string.prototype.anchor
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('anchor') }, {
  anchor: function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],479:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.big` method
// https://tc39.github.io/ecma262/#sec-string.prototype.big
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('big') }, {
  big: function big() {
    return createHTML(this, 'big', '', '');
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],480:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.blink` method
// https://tc39.github.io/ecma262/#sec-string.prototype.blink
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('blink') }, {
  blink: function blink() {
    return createHTML(this, 'blink', '', '');
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],481:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.bold` method
// https://tc39.github.io/ecma262/#sec-string.prototype.bold
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('bold') }, {
  bold: function bold() {
    return createHTML(this, 'b', '', '');
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],482:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var codeAt = require('../internals/string-multibyte').codeAt;

// `String.prototype.codePointAt` method
// https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
$({ target: 'String', proto: true }, {
  codePointAt: function codePointAt(pos) {
    return codeAt(this, pos);
  }
});

},{"../internals/export":244,"../internals/string-multibyte":326}],483:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var toLength = require('../internals/to-length');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');
var IS_PURE = require('../internals/is-pure');

var nativeEndsWith = ''.endsWith;
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.endsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.endswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = String(requireObjectCoercible(this));
    notARegExp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : min(toLength(endPosition), len);
    var search = String(searchString);
    return nativeEndsWith
      ? nativeEndsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"../internals/correct-is-regexp-logic":226,"../internals/export":244,"../internals/is-pure":271,"../internals/not-a-regexp":286,"../internals/object-get-own-property-descriptor":294,"../internals/require-object-coercible":316,"../internals/to-length":339}],484:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.fixed` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fixed
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fixed') }, {
  fixed: function fixed() {
    return createHTML(this, 'tt', '', '');
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],485:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.fontcolor` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fontcolor
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fontcolor') }, {
  fontcolor: function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],486:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.fontsize` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fontsize
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fontsize') }, {
  fontsize: function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],487:[function(require,module,exports){
var $ = require('../internals/export');
var toAbsoluteIndex = require('../internals/to-absolute-index');

var fromCharCode = String.fromCharCode;
var nativeFromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
var INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1;

// `String.fromCodePoint` method
// https://tc39.github.io/ecma262/#sec-string.fromcodepoint
$({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var elements = [];
    var length = arguments.length;
    var i = 0;
    var code;
    while (length > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
      elements.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00)
      );
    } return elements.join('');
  }
});

},{"../internals/export":244,"../internals/to-absolute-index":335}],488:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');

// `String.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-string.prototype.includes
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~String(requireObjectCoercible(this))
      .indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/correct-is-regexp-logic":226,"../internals/export":244,"../internals/not-a-regexp":286,"../internals/require-object-coercible":316}],489:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.italics` method
// https://tc39.github.io/ecma262/#sec-string.prototype.italics
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('italics') }, {
  italics: function italics() {
    return createHTML(this, 'i', '', '');
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],490:[function(require,module,exports){
'use strict';
var charAt = require('../internals/string-multibyte').charAt;
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});

},{"../internals/define-iterator":235,"../internals/internal-state":265,"../internals/string-multibyte":326}],491:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.link` method
// https://tc39.github.io/ecma262/#sec-string.prototype.link
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('link') }, {
  link: function link(url) {
    return createHTML(this, 'a', 'href', url);
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],492:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var requireObjectCoercible = require('../internals/require-object-coercible');
var toLength = require('../internals/to-length');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var classof = require('../internals/classof-raw');
var isRegExp = require('../internals/is-regexp');
var getRegExpFlags = require('../internals/regexp-flags');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var speciesConstructor = require('../internals/species-constructor');
var advanceStringIndex = require('../internals/advance-string-index');
var InternalStateModule = require('../internals/internal-state');
var IS_PURE = require('../internals/is-pure');

var MATCH_ALL = wellKnownSymbol('matchAll');
var REGEXP_STRING = 'RegExp String';
var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
var RegExpPrototype = RegExp.prototype;
var regExpBuiltinExec = RegExpPrototype.exec;
var nativeMatchAll = ''.matchAll;

var WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails(function () {
  'a'.matchAll(/./);
});

var regExpExec = function (R, S) {
  var exec = R.exec;
  var result;
  if (typeof exec == 'function') {
    result = exec.call(R, S);
    if (typeof result != 'object') throw TypeError('Incorrect exec result');
    return result;
  } return regExpBuiltinExec.call(R, S);
};

// eslint-disable-next-line max-len
var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global, fullUnicode) {
  setInternalState(this, {
    type: REGEXP_STRING_ITERATOR,
    regexp: regexp,
    string: string,
    global: global,
    unicode: fullUnicode,
    done: false
  });
}, REGEXP_STRING, function next() {
  var state = getInternalState(this);
  if (state.done) return { value: undefined, done: true };
  var R = state.regexp;
  var S = state.string;
  var match = regExpExec(R, S);
  if (match === null) return { value: undefined, done: state.done = true };
  if (state.global) {
    if (String(match[0]) == '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
    return { value: match, done: false };
  }
  state.done = true;
  return { value: match, done: false };
});

var $matchAll = function (string) {
  var R = anObject(this);
  var S = String(string);
  var C, flagsValue, flags, matcher, global, fullUnicode;
  C = speciesConstructor(R, RegExp);
  flagsValue = R.flags;
  if (flagsValue === undefined && R instanceof RegExp && !('flags' in RegExpPrototype)) {
    flagsValue = getRegExpFlags.call(R);
  }
  flags = flagsValue === undefined ? '' : String(flagsValue);
  matcher = new C(C === RegExp ? R.source : R, flags);
  global = !!~flags.indexOf('g');
  fullUnicode = !!~flags.indexOf('u');
  matcher.lastIndex = toLength(R.lastIndex);
  return new $RegExpStringIterator(matcher, S, global, fullUnicode);
};

// `String.prototype.matchAll` method
// https://github.com/tc39/proposal-string-matchall
$({ target: 'String', proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX }, {
  matchAll: function matchAll(regexp) {
    var O = requireObjectCoercible(this);
    var flags, S, matcher, rx;
    if (regexp != null) {
      if (isRegExp(regexp)) {
        flags = String(requireObjectCoercible('flags' in RegExpPrototype
          ? regexp.flags
          : getRegExpFlags.call(regexp)
        ));
        if (!~flags.indexOf('g')) throw TypeError('`.matchAll` does not allow non-global regexes');
      }
      if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
      matcher = regexp[MATCH_ALL];
      if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;
      if (matcher != null) return aFunction(matcher).call(regexp, O);
    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
    S = String(O);
    rx = new RegExp(regexp, 'g');
    return IS_PURE ? $matchAll.call(rx, S) : rx[MATCH_ALL](S);
  }
});

IS_PURE || MATCH_ALL in RegExpPrototype || createNonEnumerableProperty(RegExpPrototype, MATCH_ALL, $matchAll);

},{"../internals/a-function":197,"../internals/advance-string-index":200,"../internals/an-object":202,"../internals/classof-raw":220,"../internals/create-iterator-constructor":229,"../internals/create-non-enumerable-property":230,"../internals/export":244,"../internals/fails":245,"../internals/internal-state":265,"../internals/is-pure":271,"../internals/is-regexp":272,"../internals/regexp-flags":314,"../internals/require-object-coercible":316,"../internals/species-constructor":324,"../internals/to-length":339,"../internals/well-known-symbol":351}],493:[function(require,module,exports){
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var toLength = require('../internals/to-length');
var requireObjectCoercible = require('../internals/require-object-coercible');
var advanceStringIndex = require('../internals/advance-string-index');
var regExpExec = require('../internals/regexp-exec-abstract');

// @@match logic
fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible(this);
      var matcher = regexp == undefined ? undefined : regexp[MATCH];
      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative(nativeMatch, regexp, this);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);

      if (!rx.global) return regExpExec(rx, S);

      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"../internals/advance-string-index":200,"../internals/an-object":202,"../internals/fix-regexp-well-known-symbol-logic":246,"../internals/regexp-exec-abstract":312,"../internals/require-object-coercible":316,"../internals/to-length":339}],494:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $padEnd = require('../internals/string-pad').end;
var WEBKIT_BUG = require('../internals/string-pad-webkit-bug');

// `String.prototype.padEnd` method
// https://tc39.github.io/ecma262/#sec-string.prototype.padend
$({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":244,"../internals/string-pad":328,"../internals/string-pad-webkit-bug":327}],495:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $padStart = require('../internals/string-pad').start;
var WEBKIT_BUG = require('../internals/string-pad-webkit-bug');

// `String.prototype.padStart` method
// https://tc39.github.io/ecma262/#sec-string.prototype.padstart
$({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":244,"../internals/string-pad":328,"../internals/string-pad-webkit-bug":327}],496:[function(require,module,exports){
var $ = require('../internals/export');
var toIndexedObject = require('../internals/to-indexed-object');
var toLength = require('../internals/to-length');

// `String.raw` method
// https://tc39.github.io/ecma262/#sec-string.raw
$({ target: 'String', stat: true }, {
  raw: function raw(template) {
    var rawTemplate = toIndexedObject(template.raw);
    var literalSegments = toLength(rawTemplate.length);
    var argumentsLength = arguments.length;
    var elements = [];
    var i = 0;
    while (literalSegments > i) {
      elements.push(String(rawTemplate[i++]));
      if (i < argumentsLength) elements.push(String(arguments[i]));
    } return elements.join('');
  }
});

},{"../internals/export":244,"../internals/to-indexed-object":337,"../internals/to-length":339}],497:[function(require,module,exports){
var $ = require('../internals/export');
var repeat = require('../internals/string-repeat');

// `String.prototype.repeat` method
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
$({ target: 'String', proto: true }, {
  repeat: repeat
});

},{"../internals/export":244,"../internals/string-repeat":330}],498:[function(require,module,exports){
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');
var advanceStringIndex = require('../internals/advance-string-index');
var regExpExec = require('../internals/regexp-exec-abstract');

var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
      return replacer !== undefined
        ? replacer.call(searchValue, O, replaceValue)
        : nativeReplace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      if (
        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
      ) {
        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
        if (res.done) return res.value;
      }

      var rx = anObject(regexp);
      var S = String(this);

      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);

      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;

        results.push(result);
        if (!global) break;

        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

  // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return nativeReplace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"../internals/advance-string-index":200,"../internals/an-object":202,"../internals/fix-regexp-well-known-symbol-logic":246,"../internals/regexp-exec-abstract":312,"../internals/require-object-coercible":316,"../internals/to-integer":338,"../internals/to-length":339,"../internals/to-object":340}],499:[function(require,module,exports){
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var requireObjectCoercible = require('../internals/require-object-coercible');
var sameValue = require('../internals/same-value');
var regExpExec = require('../internals/regexp-exec-abstract');

// @@search logic
fixRegExpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = requireObjectCoercible(this);
      var searcher = regexp == undefined ? undefined : regexp[SEARCH];
      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative(nativeSearch, regexp, this);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);

      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"../internals/an-object":202,"../internals/fix-regexp-well-known-symbol-logic":246,"../internals/regexp-exec-abstract":312,"../internals/require-object-coercible":316,"../internals/same-value":317}],500:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.small` method
// https://tc39.github.io/ecma262/#sec-string.prototype.small
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('small') }, {
  small: function small() {
    return createHTML(this, 'small', '', '');
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],501:[function(require,module,exports){
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var isRegExp = require('../internals/is-regexp');
var anObject = require('../internals/an-object');
var requireObjectCoercible = require('../internals/require-object-coercible');
var speciesConstructor = require('../internals/species-constructor');
var advanceStringIndex = require('../internals/advance-string-index');
var toLength = require('../internals/to-length');
var callRegExpExec = require('../internals/regexp-exec-abstract');
var regexpExec = require('../internals/regexp-exec');
var fails = require('../internals/fails');

var arrayPush = [].push;
var min = Math.min;
var MAX_UINT32 = 0xFFFFFFFF;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

// @@split logic
fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return nativeSplit.call(string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output.length > lim ? output.slice(0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
}, !SUPPORTS_Y);

},{"../internals/advance-string-index":200,"../internals/an-object":202,"../internals/fails":245,"../internals/fix-regexp-well-known-symbol-logic":246,"../internals/is-regexp":272,"../internals/regexp-exec":313,"../internals/regexp-exec-abstract":312,"../internals/require-object-coercible":316,"../internals/species-constructor":324,"../internals/to-length":339}],502:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var toLength = require('../internals/to-length');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');
var IS_PURE = require('../internals/is-pure');

var nativeStartsWith = ''.startsWith;
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.startsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.startswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = String(requireObjectCoercible(this));
    notARegExp(searchString);
    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return nativeStartsWith
      ? nativeStartsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"../internals/correct-is-regexp-logic":226,"../internals/export":244,"../internals/is-pure":271,"../internals/not-a-regexp":286,"../internals/object-get-own-property-descriptor":294,"../internals/require-object-coercible":316,"../internals/to-length":339}],503:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.strike` method
// https://tc39.github.io/ecma262/#sec-string.prototype.strike
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('strike') }, {
  strike: function strike() {
    return createHTML(this, 'strike', '', '');
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],504:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.sub` method
// https://tc39.github.io/ecma262/#sec-string.prototype.sub
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sub') }, {
  sub: function sub() {
    return createHTML(this, 'sub', '', '');
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],505:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.sup` method
// https://tc39.github.io/ecma262/#sec-string.prototype.sup
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sup') }, {
  sup: function sup() {
    return createHTML(this, 'sup', '', '');
  }
});

},{"../internals/create-html":228,"../internals/export":244,"../internals/string-html-forced":325}],506:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $trimEnd = require('../internals/string-trim').end;
var forcedStringTrimMethod = require('../internals/string-trim-forced');

var FORCED = forcedStringTrimMethod('trimEnd');

var trimEnd = FORCED ? function trimEnd() {
  return $trimEnd(this);
} : ''.trimEnd;

// `String.prototype.{ trimEnd, trimRight }` methods
// https://github.com/tc39/ecmascript-string-left-right-trim
$({ target: 'String', proto: true, forced: FORCED }, {
  trimEnd: trimEnd,
  trimRight: trimEnd
});

},{"../internals/export":244,"../internals/string-trim":332,"../internals/string-trim-forced":331}],507:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $trimStart = require('../internals/string-trim').start;
var forcedStringTrimMethod = require('../internals/string-trim-forced');

var FORCED = forcedStringTrimMethod('trimStart');

var trimStart = FORCED ? function trimStart() {
  return $trimStart(this);
} : ''.trimStart;

// `String.prototype.{ trimStart, trimLeft }` methods
// https://github.com/tc39/ecmascript-string-left-right-trim
$({ target: 'String', proto: true, forced: FORCED }, {
  trimStart: trimStart,
  trimLeft: trimStart
});

},{"../internals/export":244,"../internals/string-trim":332,"../internals/string-trim-forced":331}],508:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var $trim = require('../internals/string-trim').trim;
var forcedStringTrimMethod = require('../internals/string-trim-forced');

// `String.prototype.trim` method
// https://tc39.github.io/ecma262/#sec-string.prototype.trim
$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});

},{"../internals/export":244,"../internals/string-trim":332,"../internals/string-trim-forced":331}],509:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.asyncIterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.asynciterator
defineWellKnownSymbol('asyncIterator');

},{"../internals/define-well-known-symbol":236}],510:[function(require,module,exports){
// `Symbol.prototype.description` getter
// https://tc39.github.io/ecma262/#sec-symbol.prototype.description
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var has = require('../internals/has');
var isObject = require('../internals/is-object');
var defineProperty = require('../internals/object-define-property').f;
var copyConstructorProperties = require('../internals/copy-constructor-properties');

var NativeSymbol = global.Symbol;

if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
    var result = this instanceof SymbolWrapper
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };
  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
  symbolPrototype.constructor = SymbolWrapper;

  var symbolToString = symbolPrototype.toString;
  var native = String(NativeSymbol('test')) == 'Symbol(test)';
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  defineProperty(symbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = isObject(this) ? this.valueOf() : this;
      var string = symbolToString.call(symbol);
      if (has(EmptyStringDescriptionStore, symbol)) return '';
      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  $({ global: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}

},{"../internals/copy-constructor-properties":225,"../internals/descriptors":237,"../internals/export":244,"../internals/global":254,"../internals/has":255,"../internals/is-object":270,"../internals/object-define-property":293}],511:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.hasInstance` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.hasinstance
defineWellKnownSymbol('hasInstance');

},{"../internals/define-well-known-symbol":236}],512:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.isConcatSpreadable` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
defineWellKnownSymbol('isConcatSpreadable');

},{"../internals/define-well-known-symbol":236}],513:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.iterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');

},{"../internals/define-well-known-symbol":236}],514:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var getBuiltIn = require('../internals/get-built-in');
var IS_PURE = require('../internals/is-pure');
var DESCRIPTORS = require('../internals/descriptors');
var NATIVE_SYMBOL = require('../internals/native-symbol');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');
var fails = require('../internals/fails');
var has = require('../internals/has');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var anObject = require('../internals/an-object');
var toObject = require('../internals/to-object');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var nativeObjectCreate = require('../internals/object-create');
var objectKeys = require('../internals/object-keys');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var shared = require('../internals/shared');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');
var uid = require('../internals/uid');
var wellKnownSymbol = require('../internals/well-known-symbol');
var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
var setToStringTag = require('../internals/set-to-string-tag');
var InternalStateModule = require('../internals/internal-state');
var $forEach = require('../internals/array-iteration').forEach;

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var $stringify = getBuiltIn('JSON', 'stringify');
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');
var WellKnownSymbolsStore = shared('wks');
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var isSymbol = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return Object(it) instanceof $Symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPrimitive(P, true);
  anObject(Attributes);
  if (has(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPrimitive(V, true);
  var enumerable = nativePropertyIsEnumerable.call(this, P);
  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPrimitive(P, true);
  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
  });
  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
      result.push(AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.github.io/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return getInternalState(this).tag;
  });

  redefine($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }
}

$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  // `Symbol.for` method
  // https://tc39.github.io/ecma262/#sec-symbol.for
  'for': function (key) {
    var string = String(key);
    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = $Symbol(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  },
  // `Symbol.keyFor` method
  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  },
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.github.io/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames,
  // `Object.getOwnPropertySymbols` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return getOwnPropertySymbolsModule.f(toObject(it));
  }
});

// `JSON.stringify` method behavior with symbols
// https://tc39.github.io/ecma262/#sec-json.stringify
if ($stringify) {
  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
    var symbol = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    return $stringify([symbol]) != '[null]'
      // WebKit converts symbol values to JSON as null
      || $stringify({ a: symbol }) != '{}'
      // V8 throws on boxed symbols
      || $stringify(Object(symbol)) != '{}';
  });

  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
    // eslint-disable-next-line no-unused-vars
    stringify: function stringify(it, replacer, space) {
      var args = [it];
      var index = 1;
      var $replacer;
      while (arguments.length > index) args.push(arguments[index++]);
      $replacer = replacer;
      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      if (!isArray(replacer)) replacer = function (key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return $stringify.apply(null, args);
    }
  });
}

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
  createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
}
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;

},{"../internals/an-object":202,"../internals/array-iteration":211,"../internals/create-non-enumerable-property":230,"../internals/create-property-descriptor":231,"../internals/define-well-known-symbol":236,"../internals/descriptors":237,"../internals/export":244,"../internals/fails":245,"../internals/get-built-in":251,"../internals/global":254,"../internals/has":255,"../internals/hidden-keys":256,"../internals/internal-state":265,"../internals/is-array":267,"../internals/is-object":270,"../internals/is-pure":271,"../internals/native-symbol":282,"../internals/object-create":291,"../internals/object-define-property":293,"../internals/object-get-own-property-descriptor":294,"../internals/object-get-own-property-names":296,"../internals/object-get-own-property-names-external":295,"../internals/object-get-own-property-symbols":297,"../internals/object-keys":300,"../internals/object-property-is-enumerable":301,"../internals/redefine":311,"../internals/set-to-string-tag":320,"../internals/shared":323,"../internals/shared-key":321,"../internals/to-indexed-object":337,"../internals/to-object":340,"../internals/to-primitive":343,"../internals/uid":348,"../internals/use-symbol-as-uid":349,"../internals/well-known-symbol":351,"../internals/well-known-symbol-wrapped":350}],515:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.matchAll` well-known symbol
defineWellKnownSymbol('matchAll');

},{"../internals/define-well-known-symbol":236}],516:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.match` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.match
defineWellKnownSymbol('match');

},{"../internals/define-well-known-symbol":236}],517:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.replace` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.replace
defineWellKnownSymbol('replace');

},{"../internals/define-well-known-symbol":236}],518:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.search` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.search
defineWellKnownSymbol('search');

},{"../internals/define-well-known-symbol":236}],519:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.species` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.species
defineWellKnownSymbol('species');

},{"../internals/define-well-known-symbol":236}],520:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.split` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.split
defineWellKnownSymbol('split');

},{"../internals/define-well-known-symbol":236}],521:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.toPrimitive` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.toprimitive
defineWellKnownSymbol('toPrimitive');

},{"../internals/define-well-known-symbol":236}],522:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.toStringTag` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.tostringtag
defineWellKnownSymbol('toStringTag');

},{"../internals/define-well-known-symbol":236}],523:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.unscopables` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.unscopables
defineWellKnownSymbol('unscopables');

},{"../internals/define-well-known-symbol":236}],524:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $copyWithin = require('../internals/array-copy-within');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.copyWithin` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
exportTypedArrayMethod('copyWithin', function copyWithin(target, start /* , end */) {
  return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-copy-within":206}],525:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $every = require('../internals/array-iteration').every;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.every` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
exportTypedArrayMethod('every', function every(callbackfn /* , thisArg */) {
  return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-iteration":211}],526:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $fill = require('../internals/array-fill');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('fill', function fill(value /* , start, end */) {
  return $fill.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-fill":207}],527:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $filter = require('../internals/array-iteration').filter;
var speciesConstructor = require('../internals/species-constructor');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
exportTypedArrayMethod('filter', function filter(callbackfn /* , thisArg */) {
  var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  var C = speciesConstructor(this, this.constructor);
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
});

},{"../internals/array-buffer-view-core":204,"../internals/array-iteration":211,"../internals/species-constructor":324}],528:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $findIndex = require('../internals/array-iteration').findIndex;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
exportTypedArrayMethod('findIndex', function findIndex(predicate /* , thisArg */) {
  return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-iteration":211}],529:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $find = require('../internals/array-iteration').find;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.find` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
exportTypedArrayMethod('find', function find(predicate /* , thisArg */) {
  return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-iteration":211}],530:[function(require,module,exports){
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Float32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Float32', function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":345}],531:[function(require,module,exports){
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Float64Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Float64', function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":345}],532:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $forEach = require('../internals/array-iteration').forEach;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
exportTypedArrayMethod('forEach', function forEach(callbackfn /* , thisArg */) {
  $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-iteration":211}],533:[function(require,module,exports){
'use strict';
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');
var exportTypedArrayStaticMethod = require('../internals/array-buffer-view-core').exportTypedArrayStaticMethod;
var typedArrayFrom = require('../internals/typed-array-from');

// `%TypedArray%.from` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.from
exportTypedArrayStaticMethod('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

},{"../internals/array-buffer-view-core":204,"../internals/typed-array-constructors-require-wrappers":346,"../internals/typed-array-from":347}],534:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $includes = require('../internals/array-includes').includes;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
exportTypedArrayMethod('includes', function includes(searchElement /* , fromIndex */) {
  return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-includes":210}],535:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $indexOf = require('../internals/array-includes').indexOf;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
exportTypedArrayMethod('indexOf', function indexOf(searchElement /* , fromIndex */) {
  return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-includes":210}],536:[function(require,module,exports){
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Int16Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int16', function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":345}],537:[function(require,module,exports){
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Int32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int32', function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":345}],538:[function(require,module,exports){
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Int8Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int8', function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":345}],539:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var ArrayIterators = require('../modules/es.array.iterator');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var Uint8Array = global.Uint8Array;
var arrayValues = ArrayIterators.values;
var arrayKeys = ArrayIterators.keys;
var arrayEntries = ArrayIterators.entries;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];

var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

var typedArrayValues = function values() {
  return arrayValues.call(aTypedArray(this));
};

// `%TypedArray%.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
exportTypedArrayMethod('entries', function entries() {
  return arrayEntries.call(aTypedArray(this));
});
// `%TypedArray%.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
exportTypedArrayMethod('keys', function keys() {
  return arrayKeys.call(aTypedArray(this));
});
// `%TypedArray%.prototype.values` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
exportTypedArrayMethod('values', typedArrayValues, !CORRECT_ITER_NAME);
// `%TypedArray%.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);

},{"../internals/array-buffer-view-core":204,"../internals/global":254,"../internals/well-known-symbol":351,"../modules/es.array.iterator":370}],540:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $join = [].join;

// `%TypedArray%.prototype.join` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('join', function join(separator) {
  return $join.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":204}],541:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $lastIndexOf = require('../internals/array-last-index-of');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.lastIndexOf` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
  return $lastIndexOf.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-last-index-of":212}],542:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $map = require('../internals/array-iteration').map;
var speciesConstructor = require('../internals/species-constructor');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.map` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
exportTypedArrayMethod('map', function map(mapfn /* , thisArg */) {
  return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
    return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
  });
});

},{"../internals/array-buffer-view-core":204,"../internals/array-iteration":211,"../internals/species-constructor":324}],543:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');

var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayStaticMethod = ArrayBufferViewCore.exportTypedArrayStaticMethod;

// `%TypedArray%.of` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.of
exportTypedArrayStaticMethod('of', function of(/* ...items */) {
  var index = 0;
  var length = arguments.length;
  var result = new (aTypedArrayConstructor(this))(length);
  while (length > index) result[index] = arguments[index++];
  return result;
}, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

},{"../internals/array-buffer-view-core":204,"../internals/typed-array-constructors-require-wrappers":346}],544:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $reduceRight = require('../internals/array-reduce').right;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.reduceRicht` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
exportTypedArrayMethod('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
  return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-reduce":216}],545:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $reduce = require('../internals/array-reduce').left;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.reduce` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
exportTypedArrayMethod('reduce', function reduce(callbackfn /* , initialValue */) {
  return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-reduce":216}],546:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var floor = Math.floor;

// `%TypedArray%.prototype.reverse` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
exportTypedArrayMethod('reverse', function reverse() {
  var that = this;
  var length = aTypedArray(that).length;
  var middle = floor(length / 2);
  var index = 0;
  var value;
  while (index < middle) {
    value = that[index];
    that[index++] = that[--length];
    that[length] = value;
  } return that;
});

},{"../internals/array-buffer-view-core":204}],547:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var toLength = require('../internals/to-length');
var toOffset = require('../internals/to-offset');
var toObject = require('../internals/to-object');
var fails = require('../internals/fails');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

var FORCED = fails(function () {
  // eslint-disable-next-line no-undef
  new Int8Array(1).set({});
});

// `%TypedArray%.prototype.set` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
exportTypedArrayMethod('set', function set(arrayLike /* , offset */) {
  aTypedArray(this);
  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
  var length = this.length;
  var src = toObject(arrayLike);
  var len = toLength(src.length);
  var index = 0;
  if (len + offset > length) throw RangeError('Wrong length');
  while (index < len) this[offset + index] = src[index++];
}, FORCED);

},{"../internals/array-buffer-view-core":204,"../internals/fails":245,"../internals/to-length":339,"../internals/to-object":340,"../internals/to-offset":341}],548:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var speciesConstructor = require('../internals/species-constructor');
var fails = require('../internals/fails');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $slice = [].slice;

var FORCED = fails(function () {
  // eslint-disable-next-line no-undef
  new Int8Array(1).slice();
});

// `%TypedArray%.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
exportTypedArrayMethod('slice', function slice(start, end) {
  var list = $slice.call(aTypedArray(this), start, end);
  var C = speciesConstructor(this, this.constructor);
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
}, FORCED);

},{"../internals/array-buffer-view-core":204,"../internals/fails":245,"../internals/species-constructor":324}],549:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $some = require('../internals/array-iteration').some;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.some` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
exportTypedArrayMethod('some', function some(callbackfn /* , thisArg */) {
  return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":204,"../internals/array-iteration":211}],550:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $sort = [].sort;

// `%TypedArray%.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
exportTypedArrayMethod('sort', function sort(comparefn) {
  return $sort.call(aTypedArray(this), comparefn);
});

},{"../internals/array-buffer-view-core":204}],551:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var toLength = require('../internals/to-length');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var speciesConstructor = require('../internals/species-constructor');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.subarray` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
exportTypedArrayMethod('subarray', function subarray(begin, end) {
  var O = aTypedArray(this);
  var length = O.length;
  var beginIndex = toAbsoluteIndex(begin, length);
  return new (speciesConstructor(O, O.constructor))(
    O.buffer,
    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
    toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
  );
});

},{"../internals/array-buffer-view-core":204,"../internals/species-constructor":324,"../internals/to-absolute-index":335,"../internals/to-length":339}],552:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var fails = require('../internals/fails');

var Int8Array = global.Int8Array;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $toLocaleString = [].toLocaleString;
var $slice = [].slice;

// iOS Safari 6.x fails here
var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {
  $toLocaleString.call(new Int8Array(1));
});

var FORCED = fails(function () {
  return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
}) || !fails(function () {
  Int8Array.prototype.toLocaleString.call([1, 2]);
});

// `%TypedArray%.prototype.toLocaleString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
exportTypedArrayMethod('toLocaleString', function toLocaleString() {
  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
}, FORCED);

},{"../internals/array-buffer-view-core":204,"../internals/fails":245,"../internals/global":254}],553:[function(require,module,exports){
'use strict';
var exportTypedArrayMethod = require('../internals/array-buffer-view-core').exportTypedArrayMethod;
var fails = require('../internals/fails');
var global = require('../internals/global');

var Uint8Array = global.Uint8Array;
var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
var arrayToString = [].toString;
var arrayJoin = [].join;

if (fails(function () { arrayToString.call({}); })) {
  arrayToString = function toString() {
    return arrayJoin.call(this);
  };
}

var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

// `%TypedArray%.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);

},{"../internals/array-buffer-view-core":204,"../internals/fails":245,"../internals/global":254}],554:[function(require,module,exports){
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint16Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint16', function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":345}],555:[function(require,module,exports){
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint32', function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":345}],556:[function(require,module,exports){
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint8Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":345}],557:[function(require,module,exports){
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint8ClampedArray` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"../internals/typed-array-constructor":345}],558:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var redefineAll = require('../internals/redefine-all');
var InternalMetadataModule = require('../internals/internal-metadata');
var collection = require('../internals/collection');
var collectionWeak = require('../internals/collection-weak');
var isObject = require('../internals/is-object');
var enforceIternalState = require('../internals/internal-state').enforce;
var NATIVE_WEAK_MAP = require('../internals/native-weak-map');

var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var isExtensible = Object.isExtensible;
var InternalWeakMap;

var wrapper = function (init) {
  return function WeakMap() {
    return init(this, arguments.length ? arguments[0] : undefined);
  };
};

// `WeakMap` constructor
// https://tc39.github.io/ecma262/#sec-weakmap-constructor
var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak);

// IE11 WeakMap frozen keys fix
// We can't use feature detection because it crash some old IE builds
// https://github.com/zloirock/core-js/issues/485
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
  InternalMetadataModule.REQUIRED = true;
  var WeakMapPrototype = $WeakMap.prototype;
  var nativeDelete = WeakMapPrototype['delete'];
  var nativeHas = WeakMapPrototype.has;
  var nativeGet = WeakMapPrototype.get;
  var nativeSet = WeakMapPrototype.set;
  redefineAll(WeakMapPrototype, {
    'delete': function (key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeDelete.call(this, key) || state.frozen['delete'](key);
      } return nativeDelete.call(this, key);
    },
    has: function has(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas.call(this, key) || state.frozen.has(key);
      } return nativeHas.call(this, key);
    },
    get: function get(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
      } return nativeGet.call(this, key);
    },
    set: function set(key, value) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
      } else nativeSet.call(this, key, value);
      return this;
    }
  });
}

},{"../internals/collection":224,"../internals/collection-weak":223,"../internals/global":254,"../internals/internal-metadata":264,"../internals/internal-state":265,"../internals/is-object":270,"../internals/native-weak-map":284,"../internals/redefine-all":310}],559:[function(require,module,exports){
'use strict';
var collection = require('../internals/collection');
var collectionWeak = require('../internals/collection-weak');

// `WeakSet` constructor
// https://tc39.github.io/ecma262/#sec-weakset-constructor
collection('WeakSet', function (init) {
  return function WeakSet() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionWeak);

},{"../internals/collection":224,"../internals/collection-weak":223}],560:[function(require,module,exports){
var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var forEach = require('../internals/array-for-each');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
}

},{"../internals/array-for-each":208,"../internals/create-non-enumerable-property":230,"../internals/dom-iterables":239,"../internals/global":254}],561:[function(require,module,exports){
var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var ArrayIteratorMethods = require('../modules/es.array.iterator');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
}

},{"../internals/create-non-enumerable-property":230,"../internals/dom-iterables":239,"../internals/global":254,"../internals/well-known-symbol":351,"../modules/es.array.iterator":370}],562:[function(require,module,exports){
var $ = require('../internals/export');
var global = require('../internals/global');
var task = require('../internals/task');

var FORCED = !global.setImmediate || !global.clearImmediate;

// http://w3c.github.io/setImmediate/
$({ global: true, bind: true, enumerable: true, forced: FORCED }, {
  // `setImmediate` method
  // http://w3c.github.io/setImmediate/#si-setImmediate
  setImmediate: task.set,
  // `clearImmediate` method
  // http://w3c.github.io/setImmediate/#si-clearImmediate
  clearImmediate: task.clear
});

},{"../internals/export":244,"../internals/global":254,"../internals/task":333}],563:[function(require,module,exports){
var $ = require('../internals/export');
var global = require('../internals/global');
var microtask = require('../internals/microtask');
var classof = require('../internals/classof-raw');

var process = global.process;
var isNode = classof(process) == 'process';

// `queueMicrotask` method
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask
$({ global: true, enumerable: true, noTargetGet: true }, {
  queueMicrotask: function queueMicrotask(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

},{"../internals/classof-raw":220,"../internals/export":244,"../internals/global":254,"../internals/microtask":280}],564:[function(require,module,exports){
var $ = require('../internals/export');
var global = require('../internals/global');
var userAgent = require('../internals/engine-user-agent');

var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check

var wrap = function (scheduler) {
  return function (handler, timeout /* , ...arguments */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : undefined;
    return scheduler(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
    } : handler, timeout);
  };
};

// ie9- setTimeout & setInterval additional parameters fix
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
$({ global: true, bind: true, forced: MSIE }, {
  // `setTimeout` method
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
  setTimeout: wrap(global.setTimeout),
  // `setInterval` method
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
  setInterval: wrap(global.setInterval)
});

},{"../internals/engine-user-agent":241,"../internals/export":244,"../internals/global":254}],565:[function(require,module,exports){
'use strict';
// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
require('../modules/es.array.iterator');
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var USE_NATIVE_URL = require('../internals/native-url');
var redefine = require('../internals/redefine');
var redefineAll = require('../internals/redefine-all');
var setToStringTag = require('../internals/set-to-string-tag');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var InternalStateModule = require('../internals/internal-state');
var anInstance = require('../internals/an-instance');
var hasOwn = require('../internals/has');
var bind = require('../internals/function-bind-context');
var classof = require('../internals/classof');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var getIterator = require('../internals/get-iterator');
var getIteratorMethod = require('../internals/get-iterator-method');
var wellKnownSymbol = require('../internals/well-known-symbol');

var $fetch = getBuiltIn('fetch');
var Headers = getBuiltIn('Headers');
var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState = InternalStateModule.set;
var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);

var plus = /\+/g;
var sequences = Array(4);

var percentSequence = function (bytes) {
  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};

var percentDecode = function (sequence) {
  try {
    return decodeURIComponent(sequence);
  } catch (error) {
    return sequence;
  }
};

var deserialize = function (it) {
  var result = it.replace(plus, ' ');
  var bytes = 4;
  try {
    return decodeURIComponent(result);
  } catch (error) {
    while (bytes) {
      result = result.replace(percentSequence(bytes--), percentDecode);
    }
    return result;
  }
};

var find = /[!'()~]|%20/g;

var replace = {
  '!': '%21',
  "'": '%27',
  '(': '%28',
  ')': '%29',
  '~': '%7E',
  '%20': '+'
};

var replacer = function (match) {
  return replace[match];
};

var serialize = function (it) {
  return encodeURIComponent(it).replace(find, replacer);
};

var parseSearchParams = function (result, query) {
  if (query) {
    var attributes = query.split('&');
    var index = 0;
    var attribute, entry;
    while (index < attributes.length) {
      attribute = attributes[index++];
      if (attribute.length) {
        entry = attribute.split('=');
        result.push({
          key: deserialize(entry.shift()),
          value: deserialize(entry.join('='))
        });
      }
    }
  }
};

var updateSearchParams = function (query) {
  this.entries.length = 0;
  parseSearchParams(this.entries, query);
};

var validateArgumentsLength = function (passed, required) {
  if (passed < required) throw TypeError('Not enough arguments');
};

var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
  setInternalState(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(params).entries),
    kind: kind
  });
}, 'Iterator', function next() {
  var state = getInternalIteratorState(this);
  var kind = state.kind;
  var step = state.iterator.next();
  var entry = step.value;
  if (!step.done) {
    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
  } return step;
});

// `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams
var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
  var init = arguments.length > 0 ? arguments[0] : undefined;
  var that = this;
  var entries = [];
  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

  setInternalState(that, {
    type: URL_SEARCH_PARAMS,
    entries: entries,
    updateURL: function () { /* empty */ },
    updateSearchParams: updateSearchParams
  });

  if (init !== undefined) {
    if (isObject(init)) {
      iteratorMethod = getIteratorMethod(init);
      if (typeof iteratorMethod === 'function') {
        iterator = iteratorMethod.call(init);
        next = iterator.next;
        while (!(step = next.call(iterator)).done) {
          entryIterator = getIterator(anObject(step.value));
          entryNext = entryIterator.next;
          if (
            (first = entryNext.call(entryIterator)).done ||
            (second = entryNext.call(entryIterator)).done ||
            !entryNext.call(entryIterator).done
          ) throw TypeError('Expected sequence with length 2');
          entries.push({ key: first.value + '', value: second.value + '' });
        }
      } else for (key in init) if (hasOwn(init, key)) entries.push({ key: key, value: init[key] + '' });
    } else {
      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
    }
  }
};

var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

redefineAll(URLSearchParamsPrototype, {
  // `URLSearchParams.prototype.appent` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
  append: function append(name, value) {
    validateArgumentsLength(arguments.length, 2);
    var state = getInternalParamsState(this);
    state.entries.push({ key: name + '', value: value + '' });
    state.updateURL();
  },
  // `URLSearchParams.prototype.delete` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
  'delete': function (name) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index].key === key) entries.splice(index, 1);
      else index++;
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.get` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
  get: function get(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) return entries[index].value;
    }
    return null;
  },
  // `URLSearchParams.prototype.getAll` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
  getAll: function getAll(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var result = [];
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) result.push(entries[index].value);
    }
    return result;
  },
  // `URLSearchParams.prototype.has` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
  has: function has(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index++].key === key) return true;
    }
    return false;
  },
  // `URLSearchParams.prototype.set` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
  set: function set(name, value) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var found = false;
    var key = name + '';
    var val = value + '';
    var index = 0;
    var entry;
    for (; index < entries.length; index++) {
      entry = entries[index];
      if (entry.key === key) {
        if (found) entries.splice(index--, 1);
        else {
          found = true;
          entry.value = val;
        }
      }
    }
    if (!found) entries.push({ key: key, value: val });
    state.updateURL();
  },
  // `URLSearchParams.prototype.sort` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
  sort: function sort() {
    var state = getInternalParamsState(this);
    var entries = state.entries;
    // Array#sort is not stable in some engines
    var slice = entries.slice();
    var entry, entriesIndex, sliceIndex;
    entries.length = 0;
    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
      entry = slice[sliceIndex];
      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
        if (entries[entriesIndex].key > entry.key) {
          entries.splice(entriesIndex, 0, entry);
          break;
        }
      }
      if (entriesIndex === sliceIndex) entries.push(entry);
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.forEach` method
  forEach: function forEach(callback /* , thisArg */) {
    var entries = getInternalParamsState(this).entries;
    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      boundFunction(entry.value, entry.key, this);
    }
  },
  // `URLSearchParams.prototype.keys` method
  keys: function keys() {
    return new URLSearchParamsIterator(this, 'keys');
  },
  // `URLSearchParams.prototype.values` method
  values: function values() {
    return new URLSearchParamsIterator(this, 'values');
  },
  // `URLSearchParams.prototype.entries` method
  entries: function entries() {
    return new URLSearchParamsIterator(this, 'entries');
  }
}, { enumerable: true });

// `URLSearchParams.prototype[@@iterator]` method
redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);

// `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
redefine(URLSearchParamsPrototype, 'toString', function toString() {
  var entries = getInternalParamsState(this).entries;
  var result = [];
  var index = 0;
  var entry;
  while (index < entries.length) {
    entry = entries[index++];
    result.push(serialize(entry.key) + '=' + serialize(entry.value));
  } return result.join('&');
}, { enumerable: true });

setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

$({ global: true, forced: !USE_NATIVE_URL }, {
  URLSearchParams: URLSearchParamsConstructor
});

// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
// https://github.com/zloirock/core-js/issues/674
if (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers == 'function') {
  $({ global: true, enumerable: true, forced: true }, {
    fetch: function fetch(input /* , init */) {
      var args = [input];
      var init, body, headers;
      if (arguments.length > 1) {
        init = arguments[1];
        if (isObject(init)) {
          body = init.body;
          if (classof(body) === URL_SEARCH_PARAMS) {
            headers = init.headers ? new Headers(init.headers) : new Headers();
            if (!headers.has('content-type')) {
              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
            init = create(init, {
              body: createPropertyDescriptor(0, String(body)),
              headers: createPropertyDescriptor(0, headers)
            });
          }
        }
        args.push(init);
      } return $fetch.apply(this, args);
    }
  });
}

module.exports = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
};

},{"../internals/an-instance":201,"../internals/an-object":202,"../internals/classof":221,"../internals/create-iterator-constructor":229,"../internals/create-property-descriptor":231,"../internals/export":244,"../internals/function-bind-context":249,"../internals/get-built-in":251,"../internals/get-iterator":253,"../internals/get-iterator-method":252,"../internals/has":255,"../internals/internal-state":265,"../internals/is-object":270,"../internals/native-url":283,"../internals/object-create":291,"../internals/redefine":311,"../internals/redefine-all":310,"../internals/set-to-string-tag":320,"../internals/well-known-symbol":351,"../modules/es.array.iterator":370}],566:[function(require,module,exports){
'use strict';
// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
require('../modules/es.string.iterator');
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var USE_NATIVE_URL = require('../internals/native-url');
var global = require('../internals/global');
var defineProperties = require('../internals/object-define-properties');
var redefine = require('../internals/redefine');
var anInstance = require('../internals/an-instance');
var has = require('../internals/has');
var assign = require('../internals/object-assign');
var arrayFrom = require('../internals/array-from');
var codeAt = require('../internals/string-multibyte').codeAt;
var toASCII = require('../internals/string-punycode-to-ascii');
var setToStringTag = require('../internals/set-to-string-tag');
var URLSearchParamsModule = require('../modules/web.url-search-params');
var InternalStateModule = require('../internals/internal-state');

var NativeURL = global.URL;
var URLSearchParams = URLSearchParamsModule.URLSearchParams;
var getInternalSearchParamsState = URLSearchParamsModule.getState;
var setInternalState = InternalStateModule.set;
var getInternalURLState = InternalStateModule.getterFor('URL');
var floor = Math.floor;
var pow = Math.pow;

var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';

var ALPHA = /[A-Za-z]/;
var ALPHANUMERIC = /[\d+-.A-Za-z]/;
var DIGIT = /\d/;
var HEX_START = /^(0x|0X)/;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\dA-Fa-f]+$/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
// eslint-disable-next-line no-control-regex
var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
var EOF;

var parseHost = function (url, input) {
  var result, codePoints, index;
  if (input.charAt(0) == '[') {
    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
    result = parseIPv6(input.slice(1, -1));
    if (!result) return INVALID_HOST;
    url.host = result;
  // opaque host
  } else if (!isSpecial(url)) {
    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
    result = '';
    codePoints = arrayFrom(input);
    for (index = 0; index < codePoints.length; index++) {
      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
    }
    url.host = result;
  } else {
    input = toASCII(input);
    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
    result = parseIPv4(input);
    if (result === null) return INVALID_HOST;
    url.host = result;
  }
};

var parseIPv4 = function (input) {
  var parts = input.split('.');
  var partsLength, numbers, index, part, radix, number, ipv4;
  if (parts.length && parts[parts.length - 1] == '') {
    parts.pop();
  }
  partsLength = parts.length;
  if (partsLength > 4) return input;
  numbers = [];
  for (index = 0; index < partsLength; index++) {
    part = parts[index];
    if (part == '') return input;
    radix = 10;
    if (part.length > 1 && part.charAt(0) == '0') {
      radix = HEX_START.test(part) ? 16 : 8;
      part = part.slice(radix == 8 ? 1 : 2);
    }
    if (part === '') {
      number = 0;
    } else {
      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
      number = parseInt(part, radix);
    }
    numbers.push(number);
  }
  for (index = 0; index < partsLength; index++) {
    number = numbers[index];
    if (index == partsLength - 1) {
      if (number >= pow(256, 5 - partsLength)) return null;
    } else if (number > 255) return null;
  }
  ipv4 = numbers.pop();
  for (index = 0; index < numbers.length; index++) {
    ipv4 += numbers[index] * pow(256, 3 - index);
  }
  return ipv4;
};

// eslint-disable-next-line max-statements
var parseIPv6 = function (input) {
  var address = [0, 0, 0, 0, 0, 0, 0, 0];
  var pieceIndex = 0;
  var compress = null;
  var pointer = 0;
  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

  var char = function () {
    return input.charAt(pointer);
  };

  if (char() == ':') {
    if (input.charAt(1) != ':') return;
    pointer += 2;
    pieceIndex++;
    compress = pieceIndex;
  }
  while (char()) {
    if (pieceIndex == 8) return;
    if (char() == ':') {
      if (compress !== null) return;
      pointer++;
      pieceIndex++;
      compress = pieceIndex;
      continue;
    }
    value = length = 0;
    while (length < 4 && HEX.test(char())) {
      value = value * 16 + parseInt(char(), 16);
      pointer++;
      length++;
    }
    if (char() == '.') {
      if (length == 0) return;
      pointer -= length;
      if (pieceIndex > 6) return;
      numbersSeen = 0;
      while (char()) {
        ipv4Piece = null;
        if (numbersSeen > 0) {
          if (char() == '.' && numbersSeen < 4) pointer++;
          else return;
        }
        if (!DIGIT.test(char())) return;
        while (DIGIT.test(char())) {
          number = parseInt(char(), 10);
          if (ipv4Piece === null) ipv4Piece = number;
          else if (ipv4Piece == 0) return;
          else ipv4Piece = ipv4Piece * 10 + number;
          if (ipv4Piece > 255) return;
          pointer++;
        }
        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
        numbersSeen++;
        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
      }
      if (numbersSeen != 4) return;
      break;
    } else if (char() == ':') {
      pointer++;
      if (!char()) return;
    } else if (char()) return;
    address[pieceIndex++] = value;
  }
  if (compress !== null) {
    swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex != 0 && swaps > 0) {
      swap = address[pieceIndex];
      address[pieceIndex--] = address[compress + swaps - 1];
      address[compress + --swaps] = swap;
    }
  } else if (pieceIndex != 8) return;
  return address;
};

var findLongestZeroSequence = function (ipv6) {
  var maxIndex = null;
  var maxLength = 1;
  var currStart = null;
  var currLength = 0;
  var index = 0;
  for (; index < 8; index++) {
    if (ipv6[index] !== 0) {
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      currStart = null;
      currLength = 0;
    } else {
      if (currStart === null) currStart = index;
      ++currLength;
    }
  }
  if (currLength > maxLength) {
    maxIndex = currStart;
    maxLength = currLength;
  }
  return maxIndex;
};

var serializeHost = function (host) {
  var result, index, compress, ignore0;
  // ipv4
  if (typeof host == 'number') {
    result = [];
    for (index = 0; index < 4; index++) {
      result.unshift(host % 256);
      host = floor(host / 256);
    } return result.join('.');
  // ipv6
  } else if (typeof host == 'object') {
    result = '';
    compress = findLongestZeroSequence(host);
    for (index = 0; index < 8; index++) {
      if (ignore0 && host[index] === 0) continue;
      if (ignore0) ignore0 = false;
      if (compress === index) {
        result += index ? ':' : '::';
        ignore0 = true;
      } else {
        result += host[index].toString(16);
        if (index < 7) result += ':';
      }
    }
    return '[' + result + ']';
  } return host;
};

var C0ControlPercentEncodeSet = {};
var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
});
var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
  '#': 1, '?': 1, '{': 1, '}': 1
});
var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
});

var percentEncode = function (char, set) {
  var code = codeAt(char, 0);
  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
};

var specialSchemes = {
  ftp: 21,
  file: null,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

var isSpecial = function (url) {
  return has(specialSchemes, url.scheme);
};

var includesCredentials = function (url) {
  return url.username != '' || url.password != '';
};

var cannotHaveUsernamePasswordPort = function (url) {
  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
};

var isWindowsDriveLetter = function (string, normalized) {
  var second;
  return string.length == 2 && ALPHA.test(string.charAt(0))
    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
};

var startsWithWindowsDriveLetter = function (string) {
  var third;
  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
    string.length == 2 ||
    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
  );
};

var shortenURLsPath = function (url) {
  var path = url.path;
  var pathSize = path.length;
  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
    path.pop();
  }
};

var isSingleDot = function (segment) {
  return segment === '.' || segment.toLowerCase() === '%2e';
};

var isDoubleDot = function (segment) {
  segment = segment.toLowerCase();
  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
};

// States:
var SCHEME_START = {};
var SCHEME = {};
var NO_SCHEME = {};
var SPECIAL_RELATIVE_OR_AUTHORITY = {};
var PATH_OR_AUTHORITY = {};
var RELATIVE = {};
var RELATIVE_SLASH = {};
var SPECIAL_AUTHORITY_SLASHES = {};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
var AUTHORITY = {};
var HOST = {};
var HOSTNAME = {};
var PORT = {};
var FILE = {};
var FILE_SLASH = {};
var FILE_HOST = {};
var PATH_START = {};
var PATH = {};
var CANNOT_BE_A_BASE_URL_PATH = {};
var QUERY = {};
var FRAGMENT = {};

// eslint-disable-next-line max-statements
var parseURL = function (url, input, stateOverride, base) {
  var state = stateOverride || SCHEME_START;
  var pointer = 0;
  var buffer = '';
  var seenAt = false;
  var seenBracket = false;
  var seenPasswordToken = false;
  var codePoints, char, bufferCodePoints, failure;

  if (!stateOverride) {
    url.scheme = '';
    url.username = '';
    url.password = '';
    url.host = null;
    url.port = null;
    url.path = [];
    url.query = null;
    url.fragment = null;
    url.cannotBeABaseURL = false;
    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
  }

  input = input.replace(TAB_AND_NEW_LINE, '');

  codePoints = arrayFrom(input);

  while (pointer <= codePoints.length) {
    char = codePoints[pointer];
    switch (state) {
      case SCHEME_START:
        if (char && ALPHA.test(char)) {
          buffer += char.toLowerCase();
          state = SCHEME;
        } else if (!stateOverride) {
          state = NO_SCHEME;
          continue;
        } else return INVALID_SCHEME;
        break;

      case SCHEME:
        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
          buffer += char.toLowerCase();
        } else if (char == ':') {
          if (stateOverride && (
            (isSpecial(url) != has(specialSchemes, buffer)) ||
            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
            (url.scheme == 'file' && !url.host)
          )) return;
          url.scheme = buffer;
          if (stateOverride) {
            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
            return;
          }
          buffer = '';
          if (url.scheme == 'file') {
            state = FILE;
          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
            state = SPECIAL_RELATIVE_OR_AUTHORITY;
          } else if (isSpecial(url)) {
            state = SPECIAL_AUTHORITY_SLASHES;
          } else if (codePoints[pointer + 1] == '/') {
            state = PATH_OR_AUTHORITY;
            pointer++;
          } else {
            url.cannotBeABaseURL = true;
            url.path.push('');
            state = CANNOT_BE_A_BASE_URL_PATH;
          }
        } else if (!stateOverride) {
          buffer = '';
          state = NO_SCHEME;
          pointer = 0;
          continue;
        } else return INVALID_SCHEME;
        break;

      case NO_SCHEME:
        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
        if (base.cannotBeABaseURL && char == '#') {
          url.scheme = base.scheme;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          url.cannotBeABaseURL = true;
          state = FRAGMENT;
          break;
        }
        state = base.scheme == 'file' ? FILE : RELATIVE;
        continue;

      case SPECIAL_RELATIVE_OR_AUTHORITY:
        if (char == '/' && codePoints[pointer + 1] == '/') {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          pointer++;
        } else {
          state = RELATIVE;
          continue;
        } break;

      case PATH_OR_AUTHORITY:
        if (char == '/') {
          state = AUTHORITY;
          break;
        } else {
          state = PATH;
          continue;
        }

      case RELATIVE:
        url.scheme = base.scheme;
        if (char == EOF) {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
          state = RELATIVE_SLASH;
        } else if (char == '?') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          state = FRAGMENT;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.path.pop();
          state = PATH;
          continue;
        } break;

      case RELATIVE_SLASH:
        if (isSpecial(url) && (char == '/' || char == '\\')) {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        } else if (char == '/') {
          state = AUTHORITY;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          state = PATH;
          continue;
        } break;

      case SPECIAL_AUTHORITY_SLASHES:
        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
        pointer++;
        break;

      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
        if (char != '/' && char != '\\') {
          state = AUTHORITY;
          continue;
        } break;

      case AUTHORITY:
        if (char == '@') {
          if (seenAt) buffer = '%40' + buffer;
          seenAt = true;
          bufferCodePoints = arrayFrom(buffer);
          for (var i = 0; i < bufferCodePoints.length; i++) {
            var codePoint = bufferCodePoints[i];
            if (codePoint == ':' && !seenPasswordToken) {
              seenPasswordToken = true;
              continue;
            }
            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
            if (seenPasswordToken) url.password += encodedCodePoints;
            else url.username += encodedCodePoints;
          }
          buffer = '';
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (seenAt && buffer == '') return INVALID_AUTHORITY;
          pointer -= arrayFrom(buffer).length + 1;
          buffer = '';
          state = HOST;
        } else buffer += char;
        break;

      case HOST:
      case HOSTNAME:
        if (stateOverride && url.scheme == 'file') {
          state = FILE_HOST;
          continue;
        } else if (char == ':' && !seenBracket) {
          if (buffer == '') return INVALID_HOST;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PORT;
          if (stateOverride == HOSTNAME) return;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (isSpecial(url) && buffer == '') return INVALID_HOST;
          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PATH_START;
          if (stateOverride) return;
          continue;
        } else {
          if (char == '[') seenBracket = true;
          else if (char == ']') seenBracket = false;
          buffer += char;
        } break;

      case PORT:
        if (DIGIT.test(char)) {
          buffer += char;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url)) ||
          stateOverride
        ) {
          if (buffer != '') {
            var port = parseInt(buffer, 10);
            if (port > 0xFFFF) return INVALID_PORT;
            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
            buffer = '';
          }
          if (stateOverride) return;
          state = PATH_START;
          continue;
        } else return INVALID_PORT;
        break;

      case FILE:
        url.scheme = 'file';
        if (char == '/' || char == '\\') state = FILE_SLASH;
        else if (base && base.scheme == 'file') {
          if (char == EOF) {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
          } else if (char == '?') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
            url.fragment = '';
            state = FRAGMENT;
          } else {
            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
              url.host = base.host;
              url.path = base.path.slice();
              shortenURLsPath(url);
            }
            state = PATH;
            continue;
          }
        } else {
          state = PATH;
          continue;
        } break;

      case FILE_SLASH:
        if (char == '/' || char == '\\') {
          state = FILE_HOST;
          break;
        }
        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
          else url.host = base.host;
        }
        state = PATH;
        continue;

      case FILE_HOST:
        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
          if (!stateOverride && isWindowsDriveLetter(buffer)) {
            state = PATH;
          } else if (buffer == '') {
            url.host = '';
            if (stateOverride) return;
            state = PATH_START;
          } else {
            failure = parseHost(url, buffer);
            if (failure) return failure;
            if (url.host == 'localhost') url.host = '';
            if (stateOverride) return;
            buffer = '';
            state = PATH_START;
          } continue;
        } else buffer += char;
        break;

      case PATH_START:
        if (isSpecial(url)) {
          state = PATH;
          if (char != '/' && char != '\\') continue;
        } else if (!stateOverride && char == '?') {
          url.query = '';
          state = QUERY;
        } else if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          state = PATH;
          if (char != '/') continue;
        } break;

      case PATH:
        if (
          char == EOF || char == '/' ||
          (char == '\\' && isSpecial(url)) ||
          (!stateOverride && (char == '?' || char == '#'))
        ) {
          if (isDoubleDot(buffer)) {
            shortenURLsPath(url);
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else if (isSingleDot(buffer)) {
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else {
            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
              if (url.host) url.host = '';
              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
            }
            url.path.push(buffer);
          }
          buffer = '';
          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
            while (url.path.length > 1 && url.path[0] === '') {
              url.path.shift();
            }
          }
          if (char == '?') {
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.fragment = '';
            state = FRAGMENT;
          }
        } else {
          buffer += percentEncode(char, pathPercentEncodeSet);
        } break;

      case CANNOT_BE_A_BASE_URL_PATH:
        if (char == '?') {
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case QUERY:
        if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          if (char == "'" && isSpecial(url)) url.query += '%27';
          else if (char == '#') url.query += '%23';
          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case FRAGMENT:
        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
        break;
    }

    pointer++;
  }
};

// `URL` constructor
// https://url.spec.whatwg.org/#url-class
var URLConstructor = function URL(url /* , base */) {
  var that = anInstance(this, URLConstructor, 'URL');
  var base = arguments.length > 1 ? arguments[1] : undefined;
  var urlString = String(url);
  var state = setInternalState(that, { type: 'URL' });
  var baseState, failure;
  if (base !== undefined) {
    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
    else {
      failure = parseURL(baseState = {}, String(base));
      if (failure) throw TypeError(failure);
    }
  }
  failure = parseURL(state, urlString, null, baseState);
  if (failure) throw TypeError(failure);
  var searchParams = state.searchParams = new URLSearchParams();
  var searchParamsState = getInternalSearchParamsState(searchParams);
  searchParamsState.updateSearchParams(state.query);
  searchParamsState.updateURL = function () {
    state.query = String(searchParams) || null;
  };
  if (!DESCRIPTORS) {
    that.href = serializeURL.call(that);
    that.origin = getOrigin.call(that);
    that.protocol = getProtocol.call(that);
    that.username = getUsername.call(that);
    that.password = getPassword.call(that);
    that.host = getHost.call(that);
    that.hostname = getHostname.call(that);
    that.port = getPort.call(that);
    that.pathname = getPathname.call(that);
    that.search = getSearch.call(that);
    that.searchParams = getSearchParams.call(that);
    that.hash = getHash.call(that);
  }
};

var URLPrototype = URLConstructor.prototype;

var serializeURL = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var username = url.username;
  var password = url.password;
  var host = url.host;
  var port = url.port;
  var path = url.path;
  var query = url.query;
  var fragment = url.fragment;
  var output = scheme + ':';
  if (host !== null) {
    output += '//';
    if (includesCredentials(url)) {
      output += username + (password ? ':' + password : '') + '@';
    }
    output += serializeHost(host);
    if (port !== null) output += ':' + port;
  } else if (scheme == 'file') output += '//';
  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
  if (query !== null) output += '?' + query;
  if (fragment !== null) output += '#' + fragment;
  return output;
};

var getOrigin = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var port = url.port;
  if (scheme == 'blob') try {
    return new URL(scheme.path[0]).origin;
  } catch (error) {
    return 'null';
  }
  if (scheme == 'file' || !isSpecial(url)) return 'null';
  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
};

var getProtocol = function () {
  return getInternalURLState(this).scheme + ':';
};

var getUsername = function () {
  return getInternalURLState(this).username;
};

var getPassword = function () {
  return getInternalURLState(this).password;
};

var getHost = function () {
  var url = getInternalURLState(this);
  var host = url.host;
  var port = url.port;
  return host === null ? ''
    : port === null ? serializeHost(host)
    : serializeHost(host) + ':' + port;
};

var getHostname = function () {
  var host = getInternalURLState(this).host;
  return host === null ? '' : serializeHost(host);
};

var getPort = function () {
  var port = getInternalURLState(this).port;
  return port === null ? '' : String(port);
};

var getPathname = function () {
  var url = getInternalURLState(this);
  var path = url.path;
  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
};

var getSearch = function () {
  var query = getInternalURLState(this).query;
  return query ? '?' + query : '';
};

var getSearchParams = function () {
  return getInternalURLState(this).searchParams;
};

var getHash = function () {
  var fragment = getInternalURLState(this).fragment;
  return fragment ? '#' + fragment : '';
};

var accessorDescriptor = function (getter, setter) {
  return { get: getter, set: setter, configurable: true, enumerable: true };
};

if (DESCRIPTORS) {
  defineProperties(URLPrototype, {
    // `URL.prototype.href` accessors pair
    // https://url.spec.whatwg.org/#dom-url-href
    href: accessorDescriptor(serializeURL, function (href) {
      var url = getInternalURLState(this);
      var urlString = String(href);
      var failure = parseURL(url, urlString);
      if (failure) throw TypeError(failure);
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.origin` getter
    // https://url.spec.whatwg.org/#dom-url-origin
    origin: accessorDescriptor(getOrigin),
    // `URL.prototype.protocol` accessors pair
    // https://url.spec.whatwg.org/#dom-url-protocol
    protocol: accessorDescriptor(getProtocol, function (protocol) {
      var url = getInternalURLState(this);
      parseURL(url, String(protocol) + ':', SCHEME_START);
    }),
    // `URL.prototype.username` accessors pair
    // https://url.spec.whatwg.org/#dom-url-username
    username: accessorDescriptor(getUsername, function (username) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(username));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.username = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.password` accessors pair
    // https://url.spec.whatwg.org/#dom-url-password
    password: accessorDescriptor(getPassword, function (password) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(password));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.password = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.host` accessors pair
    // https://url.spec.whatwg.org/#dom-url-host
    host: accessorDescriptor(getHost, function (host) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(host), HOST);
    }),
    // `URL.prototype.hostname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hostname
    hostname: accessorDescriptor(getHostname, function (hostname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(hostname), HOSTNAME);
    }),
    // `URL.prototype.port` accessors pair
    // https://url.spec.whatwg.org/#dom-url-port
    port: accessorDescriptor(getPort, function (port) {
      var url = getInternalURLState(this);
      if (cannotHaveUsernamePasswordPort(url)) return;
      port = String(port);
      if (port == '') url.port = null;
      else parseURL(url, port, PORT);
    }),
    // `URL.prototype.pathname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-pathname
    pathname: accessorDescriptor(getPathname, function (pathname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      url.path = [];
      parseURL(url, pathname + '', PATH_START);
    }),
    // `URL.prototype.search` accessors pair
    // https://url.spec.whatwg.org/#dom-url-search
    search: accessorDescriptor(getSearch, function (search) {
      var url = getInternalURLState(this);
      search = String(search);
      if (search == '') {
        url.query = null;
      } else {
        if ('?' == search.charAt(0)) search = search.slice(1);
        url.query = '';
        parseURL(url, search, QUERY);
      }
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.searchParams` getter
    // https://url.spec.whatwg.org/#dom-url-searchparams
    searchParams: accessorDescriptor(getSearchParams),
    // `URL.prototype.hash` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hash
    hash: accessorDescriptor(getHash, function (hash) {
      var url = getInternalURLState(this);
      hash = String(hash);
      if (hash == '') {
        url.fragment = null;
        return;
      }
      if ('#' == hash.charAt(0)) hash = hash.slice(1);
      url.fragment = '';
      parseURL(url, hash, FRAGMENT);
    })
  });
}

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
redefine(URLPrototype, 'toJSON', function toJSON() {
  return serializeURL.call(this);
}, { enumerable: true });

// `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior
redefine(URLPrototype, 'toString', function toString() {
  return serializeURL.call(this);
}, { enumerable: true });

if (NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL;
  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
  // `URL.createObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
    return nativeCreateObjectURL.apply(NativeURL, arguments);
  });
  // `URL.revokeObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
    return nativeRevokeObjectURL.apply(NativeURL, arguments);
  });
}

setToStringTag(URLConstructor, 'URL');

$({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
  URL: URLConstructor
});

},{"../internals/an-instance":201,"../internals/array-from":209,"../internals/descriptors":237,"../internals/export":244,"../internals/global":254,"../internals/has":255,"../internals/internal-state":265,"../internals/native-url":283,"../internals/object-assign":290,"../internals/object-define-properties":292,"../internals/redefine":311,"../internals/set-to-string-tag":320,"../internals/string-multibyte":326,"../internals/string-punycode-to-ascii":329,"../modules/es.string.iterator":490,"../modules/web.url-search-params":565}],567:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
$({ target: 'URL', proto: true, enumerable: true }, {
  toJSON: function toJSON() {
    return URL.prototype.toString.call(this);
  }
});

},{"../internals/export":244}],568:[function(require,module,exports){
require('../es');
require('../web');
var path = require('../internals/path');

module.exports = path;

},{"../es":196,"../internals/path":307,"../web":569}],569:[function(require,module,exports){
require('../modules/web.dom-collections.for-each');
require('../modules/web.dom-collections.iterator');
require('../modules/web.immediate');
require('../modules/web.queue-microtask');
require('../modules/web.timers');
require('../modules/web.url');
require('../modules/web.url.to-json');
require('../modules/web.url-search-params');
var path = require('../internals/path');

module.exports = path;

},{"../internals/path":307,"../modules/web.dom-collections.for-each":560,"../modules/web.dom-collections.iterator":561,"../modules/web.immediate":562,"../modules/web.queue-microtask":563,"../modules/web.timers":564,"../modules/web.url":566,"../modules/web.url-search-params":565,"../modules/web.url.to-json":567}],570:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],571:[function(require,module,exports){
(function (process,Buffer,__filename,__argument0,__argument1,__argument2,__argument3,__dirname){

var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(Module) {
  Module = Module || {};

/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

  if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
    Module.finishedDataFileDownloads = 0;
  }
  Module.expectedDataFileDownloads++;
  (function() {
   var loadPackage = function(metadata) {
  
    function runWithFS() {
  
      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
  var fileData0 = [];
fileData0.push.apply(fileData0, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 87, 114, 105, 116, 116, 101, 110, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 69, 108, 103, 97, 109, 97, 108, 32, 98, 97, 115, 101, 100, 32, 65, 100, 100, 105, 116, 105, 118, 101, 32, 72, 111, 109, 111, 109, 111, 114, 112, 104, 105, 99, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 32, 115, 99, 104, 101, 109, 101, 32, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 32, 84, 104, 105, 115, 32, 115, 99, 104, 101, 109, 101, 32, 105, 115, 32, 110, 111, 116, 32, 101, 102, 102, 105, 99, 105, 101, 110, 116, 108, 121, 32, 100, 101, 99, 114, 121, 112, 116, 97, 98, 108, 101, 44, 32, 115, 105, 110, 99, 101, 32, 100, 101, 99, 114, 121, 112, 116, 105, 110, 103, 32, 110, 101, 101, 100, 115, 10, 45, 45, 32, 116, 111, 32, 115, 111, 108, 118, 101, 32, 116, 104, 101, 32, 100, 105, 115, 99, 114, 101, 116, 101, 32, 108, 111, 103, 32, 112, 114, 111, 98, 108, 101, 109, 46, 32, 73, 102, 32, 110, 117, 109, 98, 101, 114, 115, 32, 97, 114, 101, 32, 102, 114, 111, 109, 32, 97, 32, 115, 109, 97, 108, 108, 10, 45, 45, 32, 114, 97, 110, 103, 101, 44, 32, 116, 104, 105, 115, 32, 105, 115, 32, 117, 115, 101, 102, 117, 108, 46, 32, 79, 116, 104, 101, 114, 119, 105, 115, 101, 32, 117, 115, 105, 110, 103, 32, 80, 97, 105, 108, 108, 105, 101, 114, 32, 105, 115, 32, 109, 111, 114, 101, 32, 99, 111, 110, 118, 101, 110, 105, 101, 110, 116, 46, 10, 10, 108, 111, 99, 97, 108, 32, 101, 108, 103, 97, 104, 32, 61, 32, 123, 10, 32, 32, 32, 95, 86, 69, 82, 83, 73, 79, 78, 32, 61, 32, 39, 99, 114, 121, 112, 116, 111, 95, 101, 108, 103, 97, 109, 97, 108, 46, 108, 117, 97, 32, 48, 46, 53, 39, 44, 10, 32, 32, 32, 95, 85, 82, 76, 32, 61, 32, 39, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 39, 44, 10, 32, 32, 32, 95, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 32, 61, 32, 39, 69, 108, 103, 97, 109, 97, 108, 32, 98, 97, 115, 101, 100, 32, 65, 100, 100, 105, 116, 105, 118, 101, 32, 72, 111, 109, 111, 109, 111, 114, 112, 104, 105, 99, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 32, 115, 99, 104, 101, 109, 101, 32, 39, 44, 10, 32, 32, 32, 95, 76, 73, 67, 69, 78, 83, 69, 32, 61, 32, 91, 91, 10, 76, 105, 99, 101, 110, 115, 101, 100, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 10, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 59, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 10, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 32, 32, 85, 110, 108, 101, 115, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 98, 121, 32, 97, 112, 112, 108, 105, 99, 97, 98, 108, 101, 10, 108, 97, 119, 32, 111, 114, 32, 97, 103, 114, 101, 101, 100, 32, 116, 111, 32, 105, 110, 32, 119, 114, 105, 116, 105, 110, 103, 44, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 76, 105, 99, 101, 110, 115, 101, 10, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 111, 110, 32, 97, 110, 32, 34, 65, 83, 32, 73, 83, 34, 32, 66, 65, 83, 73, 83, 44, 32, 87, 73, 84, 72, 79, 85, 84, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 79, 82, 10, 67, 79, 78, 68, 73, 84, 73, 79, 78, 83, 32, 79, 70, 32, 65, 78, 89, 32, 75, 73, 78, 68, 44, 32, 101, 105, 116, 104, 101, 114, 32, 101, 120, 112, 114, 101, 115, 115, 32, 111, 114, 32, 105, 109, 112, 108, 105, 101, 100, 46, 10, 93, 93, 10, 125, 10, 10, 108, 111, 99, 97, 108, 32, 71, 32, 61, 32, 69, 67, 80, 46, 103, 101, 110, 101, 114, 97, 116, 111, 114, 40, 41, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 118, 97, 108, 117, 101, 10, 108, 111, 99, 97, 108, 32, 79, 32, 32, 61, 32, 69, 67, 80, 46, 111, 114, 100, 101, 114, 40, 41, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 118, 97, 108, 117, 101, 10, 10, 10, 45, 45, 32, 115, 116, 97, 116, 101, 102, 117, 108, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 104, 97, 114, 100, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 10, 108, 111, 99, 97, 108, 32, 104, 115, 32, 61, 32, 69, 67, 80, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 40, 115, 116, 114, 40, 91, 91, 10, 74, 97, 114, 111, 109, 105, 108, 32, 115, 116, 97, 114, 116, 101, 100, 32, 119, 114, 105, 116, 105, 110, 103, 32, 116, 104, 105, 115, 32, 99, 111, 100, 101, 32, 111, 110, 32, 84, 117, 101, 115, 100, 97, 121, 32, 50, 49, 115, 116, 32, 74, 97, 110, 117, 97, 114, 121, 32, 50, 48, 50, 48, 10, 93, 93, 32, 46, 46, 32, 101, 108, 103, 97, 104, 46, 95, 76, 73, 67, 69, 78, 83, 69, 41, 41, 10, 108, 111, 99, 97, 108, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 61, 32, 71, 58, 111, 99, 116, 101, 116, 40, 41, 32, 46, 46, 32, 104, 115, 58, 111, 99, 116, 101, 116, 40, 41, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 108, 105, 115, 116, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 73, 78, 84, 46, 110, 101, 119, 40, 32, 115, 104, 97, 50, 53, 54, 40, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 46, 46, 32, 79, 67, 84, 69, 84, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 108, 105, 115, 116, 41, 41, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 108, 103, 97, 104, 46, 107, 101, 121, 103, 101, 110, 40, 41, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 32, 112, 114, 105, 118, 97, 116, 101, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 32, 125, 10, 9, 32, 32, 114, 101, 115, 46, 112, 117, 98, 108, 105, 99, 32, 61, 32, 71, 32, 42, 32, 114, 101, 115, 46, 112, 114, 105, 118, 97, 116, 101, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 40, 114, 101, 115, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 108, 103, 97, 104, 46, 110, 101, 119, 40, 112, 117, 98, 44, 32, 109, 41, 10, 32, 32, 32, 45, 45, 32, 115, 105, 103, 110, 32, 61, 61, 32, 118, 111, 116, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 104, 115, 109, 32, 61, 32, 104, 115, 32, 42, 32, 109, 32, 45, 45, 32, 111, 112, 116, 105, 109, 105, 115, 97, 116, 105, 111, 110, 10, 32, 32, 32, 45, 45, 32, 118, 111, 116, 101, 32, 101, 110, 99, 114, 121, 112, 116, 105, 111, 110, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 101, 110, 99, 95, 118, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 71, 32, 42, 32, 107, 44, 10, 9, 9, 9, 9, 32, 32, 32, 114, 105, 103, 104, 116, 32, 61, 32, 112, 117, 98, 32, 42, 32, 107, 32, 43, 32, 104, 115, 109, 32, 125, 10, 32, 32, 32, 45, 45, 32, 111, 112, 112, 111, 115, 105, 116, 101, 32, 111, 102, 32, 118, 111, 116, 101, 32, 101, 110, 99, 114, 121, 112, 116, 105, 111, 110, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 101, 110, 99, 95, 118, 95, 110, 101, 103, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 101, 110, 99, 95, 118, 46, 108, 101, 102, 116, 58, 110, 101, 103, 97, 116, 105, 118, 101, 40, 41, 44, 10, 9, 9, 9, 9, 9, 32, 32, 32, 114, 105, 103, 104, 116, 32, 61, 32, 101, 110, 99, 95, 118, 46, 114, 105, 103, 104, 116, 58, 110, 101, 103, 97, 116, 105, 118, 101, 40, 41, 32, 43, 32, 104, 115, 32, 125, 10, 10, 32, 32, 32, 45, 45, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 32, 116, 111, 32, 116, 104, 101, 32, 118, 111, 116, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 118, 32, 61, 32, 71, 32, 42, 32, 114, 32, 43, 32, 104, 115, 109, 10, 10, 32, 32, 32, 45, 45, 32, 112, 114, 111, 111, 102, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 119, 105, 116, 110, 101, 115, 101, 115, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 107, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 109, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 104, 115, 119, 109, 32, 61, 32, 104, 115, 32, 42, 32, 119, 109, 32, 45, 45, 32, 111, 112, 116, 105, 109, 105, 115, 97, 116, 105, 111, 110, 10, 32, 32, 32, 45, 45, 32, 99, 111, 109, 112, 117, 116, 101, 32, 116, 104, 101, 32, 119, 105, 116, 110, 101, 115, 115, 101, 115, 115, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 71, 32, 32, 42, 32, 119, 107, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 112, 117, 98, 32, 42, 32, 119, 107, 32, 43, 32, 104, 115, 119, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 71, 32, 32, 42, 32, 119, 114, 32, 43, 32, 104, 115, 119, 109, 10, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 32, 61, 32, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 101, 110, 99, 95, 118, 46, 108, 101, 102, 116, 44, 32, 101, 110, 99, 95, 118, 46, 114, 105, 103, 104, 116, 44, 10, 9, 9, 9, 9, 9, 9, 32, 32, 32, 99, 118, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 125, 41, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 114, 101, 115, 112, 111, 110, 115, 101, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 107, 32, 61, 32, 119, 107, 32, 45, 32, 99, 32, 42, 32, 107, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 109, 32, 61, 32, 119, 109, 32, 45, 32, 99, 32, 42, 32, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 114, 32, 61, 32, 119, 114, 32, 45, 32, 99, 32, 42, 32, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 105, 32, 61, 32, 123, 32, 99, 32, 61, 32, 99, 44, 10, 9, 9, 9, 9, 114, 107, 32, 61, 32, 114, 107, 44, 10, 9, 9, 9, 9, 114, 109, 32, 61, 32, 114, 109, 44, 10, 9, 9, 9, 9, 114, 114, 32, 61, 32, 114, 114, 32, 125, 10, 10, 32, 32, 32, 45, 45, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 39, 115, 32, 84, 104, 101, 116, 97, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 118, 97, 108, 117, 101, 32, 61, 32, 123, 32, 112, 111, 115, 32, 61, 32, 101, 110, 99, 95, 118, 44, 10, 9, 9, 9, 9, 9, 32, 32, 110, 101, 103, 32, 61, 32, 101, 110, 99, 95, 118, 95, 110, 101, 103, 32, 125, 44, 32, 45, 45, 32, 108, 101, 102, 116, 47, 114, 105, 103, 104, 116, 32, 116, 117, 112, 108, 101, 115, 10, 9, 9, 9, 99, 118, 32, 61, 32, 99, 118, 44, 32, 45, 45, 32, 101, 99, 112, 10, 9, 9, 9, 112, 105, 32, 61, 32, 112, 105, 32, 125, 32, 45, 45, 32, 112, 105, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 108, 103, 97, 104, 46, 118, 101, 114, 105, 102, 121, 40, 112, 117, 98, 44, 32, 116, 104, 101, 116, 97, 41, 10, 32, 32, 32, 45, 45, 32, 114, 101, 99, 111, 109, 112, 117, 116, 101, 32, 119, 105, 116, 110, 101, 115, 115, 101, 115, 115, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 104, 101, 116, 97, 46, 112, 105, 44, 32, 32, 32, 34, 69, 76, 71, 65, 72, 46, 118, 101, 114, 105, 102, 121, 32, 49, 115, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 104, 97, 115, 32, 110, 111, 32, 112, 114, 111, 111, 102, 34, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 104, 101, 116, 97, 46, 118, 97, 108, 117, 101, 44, 34, 69, 76, 71, 65, 72, 46, 118, 101, 114, 105, 102, 121, 32, 50, 110, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 104, 97, 115, 32, 110, 111, 32, 118, 97, 108, 117, 101, 34, 41, 10, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 118, 97, 108, 117, 101, 32, 61, 32, 116, 104, 101, 116, 97, 46, 118, 97, 108, 117, 101, 46, 112, 111, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 71, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 46, 114, 107, 10, 9, 32, 32, 43, 32, 118, 97, 108, 117, 101, 46, 108, 101, 102, 116, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 46, 99, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 112, 117, 98, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 46, 114, 107, 10, 9, 32, 32, 43, 32, 104, 115, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 46, 114, 109, 10, 9, 32, 32, 43, 32, 118, 97, 108, 117, 101, 46, 114, 105, 103, 104, 116, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 46, 99, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 71, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 46, 114, 114, 10, 9, 32, 32, 43, 32, 104, 115, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 46, 114, 109, 10, 9, 32, 32, 43, 32, 116, 104, 101, 116, 97, 46, 99, 118, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 46, 99, 10, 32, 32, 32, 45, 45, 32, 118, 101, 114, 105, 102, 121, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 104, 101, 116, 97, 46, 112, 105, 46, 99, 32, 61, 61, 32, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 10, 9, 9, 9, 9, 32, 123, 118, 97, 108, 117, 101, 46, 108, 101, 102, 116, 44, 32, 118, 97, 108, 117, 101, 46, 114, 105, 103, 104, 116, 44, 10, 9, 9, 9, 9, 32, 32, 116, 104, 101, 116, 97, 46, 99, 118, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 32, 125, 41, 44, 10, 9, 9, 9, 32, 32, 34, 69, 76, 71, 65, 72, 46, 118, 101, 114, 105, 102, 121, 58, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 102, 97, 105, 108, 115, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 108, 103, 97, 104, 46, 122, 101, 114, 111, 40, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 112, 111, 115, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 69, 67, 80, 46, 105, 110, 102, 105, 110, 105, 116, 121, 40, 41, 44, 32, 114, 105, 103, 104, 116, 32, 61, 32, 69, 67, 80, 46, 105, 110, 102, 105, 110, 105, 116, 121, 40, 41, 32, 125, 44, 10, 9, 9, 9, 110, 101, 103, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 69, 67, 80, 46, 105, 110, 102, 105, 110, 105, 116, 121, 40, 41, 44, 32, 114, 105, 103, 104, 116, 32, 61, 32, 69, 67, 80, 46, 105, 110, 102, 105, 110, 105, 116, 121, 40, 41, 32, 125, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 108, 103, 97, 104, 46, 97, 100, 100, 40, 112, 117, 98, 44, 32, 97, 44, 32, 98, 41, 10, 32, 32, 32, 101, 108, 103, 97, 104, 46, 118, 101, 114, 105, 102, 121, 40, 112, 117, 98, 44, 32, 97, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 111, 115, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 110, 105, 108, 44, 32, 114, 105, 103, 104, 116, 32, 61, 32, 110, 105, 108, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 101, 103, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 110, 105, 108, 44, 32, 114, 105, 103, 104, 116, 32, 61, 32, 110, 105, 108, 32, 125, 10, 32, 32, 32, 112, 111, 115, 46, 108, 101, 102, 116, 32, 32, 61, 32, 97, 46, 118, 97, 108, 117, 101, 46, 112, 111, 115, 46, 108, 101, 102, 116, 32, 32, 43, 32, 98, 46, 112, 111, 115, 46, 108, 101, 102, 116, 10, 32, 32, 32, 112, 111, 115, 46, 114, 105, 103, 104, 116, 32, 61, 32, 97, 46, 118, 97, 108, 117, 101, 46, 112, 111, 115, 46, 114, 105, 103, 104, 116, 32, 43, 32, 98, 46, 112, 111, 115, 46, 114, 105, 103, 104, 116, 10, 32, 32, 32, 110, 101, 103, 46, 108, 101, 102, 116, 32, 32, 61, 32, 97, 46, 118, 97, 108, 117, 101, 46, 110, 101, 103, 46, 108, 101, 102, 116, 32, 32, 43, 32, 98, 46, 110, 101, 103, 46, 108, 101, 102, 116, 10, 32, 32, 32, 110, 101, 103, 46, 114, 105, 103, 104, 116, 32, 61, 32, 97, 46, 118, 97, 108, 117, 101, 46, 110, 101, 103, 46, 114, 105, 103, 104, 116, 32, 43, 32, 98, 46, 110, 101, 103, 46, 114, 105, 103, 104, 116, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 112, 111, 115, 32, 61, 32, 112, 111, 115, 44, 32, 110, 101, 103, 32, 61, 32, 110, 101, 103, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 108, 103, 97, 104, 46, 115, 117, 98, 40, 112, 117, 98, 44, 32, 97, 44, 32, 98, 41, 10, 32, 32, 32, 101, 108, 103, 97, 104, 46, 118, 101, 114, 105, 102, 121, 40, 112, 117, 98, 44, 32, 97, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 111, 115, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 110, 105, 108, 44, 32, 114, 105, 103, 104, 116, 32, 61, 32, 110, 105, 108, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 101, 103, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 110, 105, 108, 44, 32, 114, 105, 103, 104, 116, 32, 61, 32, 110, 105, 108, 32, 125, 10, 32, 32, 32, 112, 111, 115, 46, 108, 101, 102, 116, 32, 32, 61, 32, 97, 46, 118, 97, 108, 117, 101, 46, 112, 111, 115, 46, 108, 101, 102, 116, 32, 32, 45, 32, 98, 46, 112, 111, 115, 46, 108, 101, 102, 116, 10, 32, 32, 32, 112, 111, 115, 46, 114, 105, 103, 104, 116, 32, 61, 32, 97, 46, 118, 97, 108, 117, 101, 46, 112, 111, 115, 46, 114, 105, 103, 104, 116, 32, 45, 32, 98, 46, 112, 111, 115, 46, 114, 105, 103, 104, 116, 10, 32, 32, 32, 110, 101, 103, 46, 108, 101, 102, 116, 32, 32, 61, 32, 97, 46, 118, 97, 108, 117, 101, 46, 110, 101, 103, 46, 108, 101, 102, 116, 32, 32, 45, 32, 98, 46, 110, 101, 103, 46, 108, 101, 102, 116, 10, 32, 32, 32, 110, 101, 103, 46, 114, 105, 103, 104, 116, 32, 61, 32, 97, 46, 118, 97, 108, 117, 101, 46, 110, 101, 103, 46, 114, 105, 103, 104, 116, 32, 45, 32, 98, 46, 110, 101, 103, 46, 114, 105, 103, 104, 116, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 112, 111, 115, 32, 61, 32, 112, 111, 115, 44, 32, 110, 101, 103, 32, 61, 32, 110, 101, 103, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 108, 103, 97, 104, 46, 116, 97, 108, 108, 121, 40, 112, 117, 98, 44, 32, 112, 114, 105, 118, 44, 32, 110, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 120, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 123, 32, 119, 120, 58, 109, 111, 100, 110, 101, 103, 40, 79, 41, 32, 42, 32, 110, 46, 112, 111, 115, 46, 108, 101, 102, 116, 44, 10, 9, 9, 9, 9, 119, 120, 58, 109, 111, 100, 110, 101, 103, 40, 79, 41, 32, 42, 32, 110, 46, 110, 101, 103, 46, 108, 101, 102, 116, 32, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 32, 61, 32, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 65, 119, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 120, 32, 61, 32, 119, 120, 32, 45, 32, 99, 32, 42, 32, 112, 114, 105, 118, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 101, 99, 32, 61, 32, 123, 32, 112, 111, 115, 32, 61, 32, 110, 46, 112, 111, 115, 46, 108, 101, 102, 116, 32, 42, 32, 112, 114, 105, 118, 58, 109, 111, 100, 110, 101, 103, 40, 79, 41, 44, 10, 9, 9, 9, 9, 32, 110, 101, 103, 32, 61, 32, 110, 46, 110, 101, 103, 46, 108, 101, 102, 116, 32, 42, 32, 112, 114, 105, 118, 58, 109, 111, 100, 110, 101, 103, 40, 79, 41, 32, 125, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 112, 105, 95, 116, 97, 108, 108, 121, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 100, 101, 99, 32, 61, 32, 100, 101, 99, 44, 10, 9, 9, 9, 114, 120, 32, 32, 61, 32, 114, 120, 44, 10, 9, 9, 9, 99, 32, 32, 32, 61, 32, 99, 32, 32, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 108, 103, 97, 104, 46, 118, 101, 114, 105, 102, 121, 95, 116, 97, 108, 108, 121, 40, 116, 97, 108, 108, 121, 44, 32, 118, 97, 108, 117, 101, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 120, 110, 101, 103, 32, 61, 32, 116, 97, 108, 108, 121, 46, 114, 120, 58, 109, 111, 100, 110, 101, 103, 40, 79, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 123, 32, 114, 120, 110, 101, 103, 32, 42, 32, 118, 97, 108, 117, 101, 46, 112, 111, 115, 46, 108, 101, 102, 116, 32, 43, 32, 116, 97, 108, 108, 121, 46, 99, 32, 42, 32, 116, 97, 108, 108, 121, 46, 100, 101, 99, 46, 112, 111, 115, 44, 10, 9, 9, 9, 9, 114, 120, 110, 101, 103, 32, 42, 32, 118, 97, 108, 117, 101, 46, 110, 101, 103, 46, 108, 101, 102, 116, 32, 43, 32, 116, 97, 108, 108, 121, 46, 99, 32, 42, 32, 116, 97, 108, 108, 121, 46, 100, 101, 99, 46, 110, 101, 103, 32, 32, 125, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 97, 108, 108, 121, 46, 99, 32, 61, 61, 32, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 65, 119, 41, 44, 10, 9, 9, 32, 32, 34, 69, 76, 71, 65, 72, 46, 118, 101, 114, 105, 102, 121, 95, 116, 97, 108, 108, 121, 58, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 102, 97, 105, 108, 115, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 108, 103, 97, 104, 46, 99, 111, 117, 110, 116, 40, 116, 97, 108, 108, 121, 44, 32, 118, 97, 108, 117, 101, 44, 32, 109, 97, 120, 41, 10, 32, 32, 32, 101, 108, 103, 97, 104, 46, 118, 101, 114, 105, 102, 121, 95, 116, 97, 108, 108, 121, 40, 116, 97, 108, 108, 121, 44, 32, 118, 97, 108, 117, 101, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 116, 97, 98, 32, 61, 32, 123, 32, 125, 10, 32, 32, 32, 109, 97, 120, 32, 61, 32, 109, 97, 120, 32, 111, 114, 32, 49, 48, 48, 48, 10, 32, 32, 32, 102, 111, 114, 32, 105, 100, 120, 61, 49, 44, 109, 97, 120, 32, 100, 111, 10, 9, 32, 32, 114, 101, 115, 116, 97, 98, 91, 40, 66, 73, 71, 46, 110, 101, 119, 40, 105, 100, 120, 41, 32, 42, 32, 104, 115, 41, 58, 111, 99, 116, 101, 116, 40, 41, 58, 117, 114, 108, 54, 52, 40, 41, 93, 32, 61, 32, 105, 100, 120, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 32, 112, 111, 115, 32, 61, 32, 118, 97, 108, 117, 101, 46, 112, 111, 115, 46, 114, 105, 103, 104, 116, 32, 43, 32, 116, 97, 108, 108, 121, 46, 100, 101, 99, 46, 112, 111, 115, 44, 10, 9, 9, 9, 9, 32, 110, 101, 103, 32, 61, 32, 118, 97, 108, 117, 101, 46, 110, 101, 103, 46, 114, 105, 103, 104, 116, 32, 43, 32, 116, 97, 108, 108, 121, 46, 100, 101, 99, 46, 110, 101, 103, 32, 32, 125, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 116, 97, 98, 91, 114, 101, 115, 46, 112, 111, 115, 58, 111, 99, 116, 101, 116, 40, 41, 58, 117, 114, 108, 54, 52, 40, 41, 93, 10, 101, 110, 100, 10, 10, 114, 101, 116, 117, 114, 110, 32, 101, 108, 103, 97, 104, 10]);
Module['FS_createDataFile']('/', 'crypto_elgamal.lua', fileData0, true, true, false);
var fileData1 = [];
fileData1.push.apply(fileData1, [45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 45, 45, 32, 77, 111, 100, 117, 108, 101, 32, 102, 111, 114, 32, 100, 97, 116, 101, 32, 97, 110, 100, 32, 116, 105, 109, 101, 32, 99, 97, 108, 99, 117, 108, 97, 116, 105, 111, 110, 115, 10, 45, 45, 10, 45, 45, 32, 86, 101, 114, 115, 105, 111, 110, 32, 50, 46, 49, 46, 49, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 48, 54, 44, 32, 98, 121, 32, 74, 97, 115, 32, 76, 97, 116, 114, 105, 120, 32, 40, 106, 97, 115, 116, 101, 106, 97, 100, 97, 64, 121, 97, 104, 111, 111, 46, 99, 111, 109, 41, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 51, 45, 50, 48, 49, 52, 44, 32, 98, 121, 32, 84, 104, 105, 106, 115, 32, 83, 99, 104, 114, 101, 105, 106, 101, 114, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 100, 32, 117, 110, 100, 101, 114, 32, 77, 73, 84, 44, 32, 104, 116, 116, 112, 58, 47, 47, 111, 112, 101, 110, 115, 111, 117, 114, 99, 101, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 77, 73, 84, 10, 10, 45, 45, 91, 91, 32, 67, 79, 78, 83, 84, 65, 78, 84, 83, 32, 93, 93, 45, 45, 10, 32, 32, 108, 111, 99, 97, 108, 32, 72, 79, 85, 82, 80, 69, 82, 68, 65, 89, 32, 32, 61, 32, 50, 52, 10, 32, 32, 108, 111, 99, 97, 108, 32, 77, 73, 78, 80, 69, 82, 72, 79, 85, 82, 32, 32, 61, 32, 54, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 77, 73, 78, 80, 69, 82, 68, 65, 89, 32, 32, 32, 32, 61, 32, 49, 52, 52, 48, 32, 32, 45, 45, 32, 50, 52, 42, 54, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 83, 69, 67, 80, 69, 82, 77, 73, 78, 32, 32, 32, 61, 32, 54, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 83, 69, 67, 80, 69, 82, 72, 79, 85, 82, 32, 32, 61, 32, 51, 54, 48, 48, 32, 32, 45, 45, 32, 54, 48, 42, 54, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 83, 69, 67, 80, 69, 82, 68, 65, 89, 32, 32, 32, 61, 32, 56, 54, 52, 48, 48, 32, 45, 45, 32, 50, 52, 42, 54, 48, 42, 54, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 32, 61, 32, 49, 48, 48, 48, 48, 48, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 32, 61, 32, 56, 54, 52, 48, 48, 48, 48, 48, 48, 48, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 84, 73, 67, 75, 83, 80, 69, 82, 72, 79, 85, 82, 32, 61, 32, 51, 54, 48, 48, 48, 48, 48, 48, 48, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 84, 73, 67, 75, 83, 80, 69, 82, 77, 73, 78, 32, 61, 32, 54, 48, 48, 48, 48, 48, 48, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 68, 65, 89, 78, 85, 77, 95, 77, 65, 88, 32, 61, 32, 32, 51, 54, 53, 50, 52, 50, 53, 48, 48, 32, 45, 45, 32, 83, 97, 116, 32, 74, 97, 110, 32, 48, 49, 32, 49, 48, 48, 48, 48, 48, 48, 32, 48, 48, 58, 48, 48, 58, 48, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 68, 65, 89, 78, 85, 77, 95, 77, 73, 78, 32, 61, 32, 45, 51, 54, 53, 50, 52, 50, 53, 48, 48, 32, 45, 45, 32, 77, 111, 110, 32, 74, 97, 110, 32, 48, 49, 32, 49, 48, 48, 48, 48, 48, 48, 32, 66, 67, 69, 32, 48, 48, 58, 48, 48, 58, 48, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 68, 65, 89, 78, 85, 77, 95, 68, 69, 70, 32, 61, 32, 32, 48, 32, 45, 45, 32, 77, 111, 110, 32, 74, 97, 110, 32, 48, 49, 32, 48, 48, 48, 49, 32, 48, 48, 58, 48, 48, 58, 48, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 95, 59, 10, 45, 45, 91, 91, 32, 76, 79, 67, 65, 76, 32, 65, 82, 69, 32, 70, 65, 83, 84, 69, 82, 32, 93, 93, 45, 45, 10, 32, 32, 108, 111, 99, 97, 108, 32, 116, 121, 112, 101, 32, 32, 32, 32, 32, 61, 32, 116, 121, 112, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 112, 97, 105, 114, 115, 32, 32, 32, 32, 61, 32, 112, 97, 105, 114, 115, 10, 32, 32, 108, 111, 99, 97, 108, 32, 101, 114, 114, 111, 114, 32, 32, 32, 32, 61, 32, 101, 114, 114, 111, 114, 10, 32, 32, 108, 111, 99, 97, 108, 32, 97, 115, 115, 101, 114, 116, 32, 32, 32, 61, 32, 97, 115, 115, 101, 114, 116, 10, 32, 32, 108, 111, 99, 97, 108, 32, 116, 111, 110, 117, 109, 98, 101, 114, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 10, 32, 32, 108, 111, 99, 97, 108, 32, 116, 111, 115, 116, 114, 105, 110, 103, 32, 61, 32, 116, 111, 115, 116, 114, 105, 110, 103, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 116, 114, 105, 110, 103, 32, 32, 32, 61, 32, 115, 116, 114, 105, 110, 103, 10, 32, 32, 108, 111, 99, 97, 108, 32, 109, 97, 116, 104, 32, 32, 32, 32, 32, 61, 32, 109, 97, 116, 104, 10, 32, 32, 108, 111, 99, 97, 108, 32, 111, 115, 32, 32, 32, 32, 32, 32, 32, 61, 32, 123, 32, 125, 10, 32, 32, 108, 111, 99, 97, 108, 32, 117, 110, 112, 97, 99, 107, 32, 32, 32, 61, 32, 117, 110, 112, 97, 99, 107, 32, 111, 114, 32, 116, 97, 98, 108, 101, 46, 117, 110, 112, 97, 99, 107, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 32, 61, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 32, 61, 32, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 10, 45, 45, 91, 91, 32, 69, 88, 84, 82, 65, 32, 70, 85, 78, 67, 84, 73, 79, 78, 83, 32, 93, 93, 45, 45, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 109, 116, 32, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 102, 111, 114, 109, 97, 116, 10, 32, 32, 108, 111, 99, 97, 108, 32, 108, 119, 114, 32, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 108, 111, 119, 101, 114, 10, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 112, 32, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 114, 101, 112, 10, 32, 32, 108, 111, 99, 97, 108, 32, 108, 101, 110, 32, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 108, 101, 110, 32, 32, 45, 45, 32, 108, 117, 97, 99, 104, 101, 99, 107, 58, 32, 105, 103, 110, 111, 114, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 117, 98, 32, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 115, 117, 98, 10, 32, 32, 108, 111, 99, 97, 108, 32, 103, 115, 117, 98, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 10, 32, 32, 108, 111, 99, 97, 108, 32, 103, 109, 97, 116, 99, 104, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 109, 97, 116, 99, 104, 32, 111, 114, 32, 115, 116, 114, 105, 110, 103, 46, 103, 102, 105, 110, 100, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 105, 110, 100, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 102, 105, 110, 100, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 108, 111, 111, 114, 32, 61, 32, 109, 97, 116, 104, 46, 102, 108, 111, 111, 114, 10, 32, 32, 108, 111, 99, 97, 108, 32, 99, 101, 105, 108, 32, 32, 61, 32, 109, 97, 116, 104, 46, 99, 101, 105, 108, 10, 32, 32, 108, 111, 99, 97, 108, 32, 97, 98, 115, 32, 32, 32, 61, 32, 109, 97, 116, 104, 46, 97, 98, 115, 10, 32, 32, 108, 111, 99, 97, 108, 32, 111, 115, 100, 97, 116, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 32, 32, 108, 111, 99, 97, 108, 32, 111, 115, 116, 105, 109, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 10, 32, 32, 45, 45, 32, 114, 101, 109, 111, 118, 101, 115, 32, 116, 104, 101, 32, 100, 101, 99, 105, 109, 97, 108, 32, 112, 97, 114, 116, 32, 111, 102, 32, 97, 32, 110, 117, 109, 98, 101, 114, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 102, 105, 120, 40, 110, 41, 32, 110, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 110, 41, 32, 114, 101, 116, 117, 114, 110, 32, 110, 32, 97, 110, 100, 32, 40, 40, 110, 32, 62, 32, 48, 32, 97, 110, 100, 32, 102, 108, 111, 111, 114, 32, 111, 114, 32, 99, 101, 105, 108, 41, 40, 110, 41, 41, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 115, 32, 116, 104, 101, 32, 109, 111, 100, 117, 108, 111, 32, 110, 32, 37, 32, 100, 59, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 111, 100, 40, 110, 44, 100, 41, 32, 114, 101, 116, 117, 114, 110, 32, 110, 32, 45, 32, 100, 42, 102, 108, 111, 111, 114, 40, 110, 47, 100, 41, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 105, 115, 32, 96, 115, 116, 114, 96, 32, 105, 110, 32, 115, 116, 114, 105, 110, 103, 32, 108, 105, 115, 116, 32, 96, 116, 98, 108, 96, 44, 32, 96, 109, 108, 96, 32, 105, 115, 32, 116, 104, 101, 32, 109, 105, 110, 105, 109, 117, 110, 32, 108, 101, 110, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 108, 105, 115, 116, 40, 115, 116, 114, 44, 32, 116, 98, 108, 44, 32, 109, 108, 44, 32, 116, 110, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 108, 32, 61, 32, 108, 101, 110, 40, 115, 116, 114, 41, 10, 32, 32, 32, 32, 105, 102, 32, 115, 108, 32, 60, 32, 40, 109, 108, 32, 111, 114, 32, 48, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 32, 32, 32, 32, 115, 116, 114, 32, 61, 32, 108, 119, 114, 40, 115, 116, 114, 41, 10, 32, 32, 32, 32, 102, 111, 114, 32, 107, 44, 32, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 116, 98, 108, 41, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 115, 116, 114, 32, 61, 61, 32, 108, 119, 114, 40, 115, 117, 98, 40, 118, 44, 32, 49, 44, 32, 115, 108, 41, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 116, 110, 32, 116, 104, 101, 110, 32, 116, 110, 91, 48, 93, 32, 61, 32, 107, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 107, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 102, 110, 105, 108, 40, 41, 32, 101, 110, 100, 10, 45, 45, 91, 91, 32, 68, 65, 84, 69, 32, 70, 85, 78, 67, 84, 73, 79, 78, 83, 32, 93, 93, 45, 45, 10, 32, 32, 108, 111, 99, 97, 108, 32, 68, 65, 84, 69, 95, 69, 80, 79, 67, 72, 32, 45, 45, 32, 116, 111, 32, 98, 101, 32, 115, 101, 116, 32, 108, 97, 116, 101, 114, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 108, 95, 119, 101, 101, 107, 100, 97, 121, 115, 32, 61, 32, 123, 10, 32, 32, 32, 32, 91, 48, 93, 61, 34, 83, 117, 110, 100, 97, 121, 34, 44, 91, 49, 93, 61, 34, 77, 111, 110, 100, 97, 121, 34, 44, 91, 50, 93, 61, 34, 84, 117, 101, 115, 100, 97, 121, 34, 44, 91, 51, 93, 61, 34, 87, 101, 100, 110, 101, 115, 100, 97, 121, 34, 44, 91, 52, 93, 61, 34, 84, 104, 117, 114, 115, 100, 97, 121, 34, 44, 91, 53, 93, 61, 34, 70, 114, 105, 100, 97, 121, 34, 44, 91, 54, 93, 61, 34, 83, 97, 116, 117, 114, 100, 97, 121, 34, 44, 10, 32, 32, 32, 32, 91, 55, 93, 61, 34, 83, 117, 110, 34, 44, 91, 56, 93, 61, 34, 77, 111, 110, 34, 44, 91, 57, 93, 61, 34, 84, 117, 101, 34, 44, 91, 49, 48, 93, 61, 34, 87, 101, 100, 34, 44, 91, 49, 49, 93, 61, 34, 84, 104, 117, 34, 44, 91, 49, 50, 93, 61, 34, 70, 114, 105, 34, 44, 91, 49, 51, 93, 61, 34, 83, 97, 116, 34, 44, 10, 32, 32, 125, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 108, 95, 109, 101, 114, 105, 100, 105, 97, 110, 32, 61, 32, 123, 91, 45, 49, 93, 61, 34, 65, 77, 34, 44, 32, 91, 49, 93, 61, 34, 80, 77, 34, 125, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 108, 95, 109, 111, 110, 116, 104, 115, 32, 61, 32, 123, 10, 32, 32, 32, 32, 91, 48, 48, 93, 61, 34, 74, 97, 110, 117, 97, 114, 121, 34, 44, 32, 91, 48, 49, 93, 61, 34, 70, 101, 98, 114, 117, 97, 114, 121, 34, 44, 32, 91, 48, 50, 93, 61, 34, 77, 97, 114, 99, 104, 34, 44, 10, 32, 32, 32, 32, 91, 48, 51, 93, 61, 34, 65, 112, 114, 105, 108, 34, 44, 32, 32, 32, 91, 48, 52, 93, 61, 34, 77, 97, 121, 34, 44, 32, 32, 32, 32, 32, 32, 91, 48, 53, 93, 61, 34, 74, 117, 110, 101, 34, 44, 10, 32, 32, 32, 32, 91, 48, 54, 93, 61, 34, 74, 117, 108, 121, 34, 44, 32, 32, 32, 32, 91, 48, 55, 93, 61, 34, 65, 117, 103, 117, 115, 116, 34, 44, 32, 32, 32, 91, 48, 56, 93, 61, 34, 83, 101, 112, 116, 101, 109, 98, 101, 114, 34, 44, 10, 32, 32, 32, 32, 91, 48, 57, 93, 61, 34, 79, 99, 116, 111, 98, 101, 114, 34, 44, 32, 91, 49, 48, 93, 61, 34, 78, 111, 118, 101, 109, 98, 101, 114, 34, 44, 32, 91, 49, 49, 93, 61, 34, 68, 101, 99, 101, 109, 98, 101, 114, 34, 44, 10, 32, 32, 32, 32, 91, 49, 50, 93, 61, 34, 74, 97, 110, 34, 44, 32, 91, 49, 51, 93, 61, 34, 70, 101, 98, 34, 44, 32, 91, 49, 52, 93, 61, 34, 77, 97, 114, 34, 44, 10, 32, 32, 32, 32, 91, 49, 53, 93, 61, 34, 65, 112, 114, 34, 44, 32, 91, 49, 54, 93, 61, 34, 77, 97, 121, 34, 44, 32, 91, 49, 55, 93, 61, 34, 74, 117, 110, 34, 44, 10, 32, 32, 32, 32, 91, 49, 56, 93, 61, 34, 74, 117, 108, 34, 44, 32, 91, 49, 57, 93, 61, 34, 65, 117, 103, 34, 44, 32, 91, 50, 48, 93, 61, 34, 83, 101, 112, 34, 44, 10, 32, 32, 32, 32, 91, 50, 49, 93, 61, 34, 79, 99, 116, 34, 44, 32, 91, 50, 50, 93, 61, 34, 78, 111, 118, 34, 44, 32, 91, 50, 51, 93, 61, 34, 68, 101, 99, 34, 44, 10, 32, 32, 125, 10, 32, 32, 45, 45, 32, 97, 100, 100, 101, 100, 32, 116, 104, 101, 32, 39, 46, 50, 39, 32, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 99, 111, 108, 108, 105, 115, 105, 111, 110, 44, 32, 117, 115, 101, 32, 96, 102, 105, 120, 96, 32, 116, 111, 32, 114, 101, 109, 111, 118, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 108, 95, 116, 105, 109, 101, 122, 111, 110, 101, 32, 61, 32, 123, 10, 32, 32, 32, 32, 91, 48, 48, 48, 93, 61, 34, 117, 116, 99, 34, 44, 32, 32, 32, 32, 91, 48, 46, 50, 93, 61, 34, 103, 109, 116, 34, 44, 10, 32, 32, 32, 32, 91, 51, 48, 48, 93, 61, 34, 101, 115, 116, 34, 44, 32, 32, 32, 32, 91, 50, 52, 48, 93, 61, 34, 101, 100, 116, 34, 44, 10, 32, 32, 32, 32, 91, 51, 54, 48, 93, 61, 34, 99, 115, 116, 34, 44, 32, 32, 91, 51, 48, 48, 46, 50, 93, 61, 34, 99, 100, 116, 34, 44, 10, 32, 32, 32, 32, 91, 52, 50, 48, 93, 61, 34, 109, 115, 116, 34, 44, 32, 32, 91, 51, 54, 48, 46, 50, 93, 61, 34, 109, 100, 116, 34, 44, 10, 32, 32, 32, 32, 91, 52, 56, 48, 93, 61, 34, 112, 115, 116, 34, 44, 32, 32, 91, 52, 50, 48, 46, 50, 93, 61, 34, 112, 100, 116, 34, 44, 10, 32, 32, 125, 10, 32, 32, 45, 45, 32, 115, 101, 116, 32, 116, 104, 101, 32, 100, 97, 121, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 114, 101, 115, 111, 108, 117, 116, 105, 111, 110, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 116, 105, 99, 107, 115, 40, 116, 41, 10, 32, 32, 32, 32, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 32, 61, 32, 116, 59, 10, 32, 32, 32, 32, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 32, 61, 32, 83, 69, 67, 80, 69, 82, 68, 65, 89, 42, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 10, 32, 32, 32, 32, 84, 73, 67, 75, 83, 80, 69, 82, 72, 79, 85, 82, 61, 32, 83, 69, 67, 80, 69, 82, 72, 79, 85, 82, 42, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 10, 32, 32, 32, 32, 84, 73, 67, 75, 83, 80, 69, 82, 77, 73, 78, 32, 61, 32, 83, 69, 67, 80, 69, 82, 77, 73, 78, 42, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 105, 115, 32, 121, 101, 97, 114, 32, 121, 32, 108, 101, 97, 112, 32, 121, 101, 97, 114, 63, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 108, 101, 97, 112, 121, 101, 97, 114, 40, 121, 41, 32, 45, 45, 32, 121, 32, 109, 117, 115, 116, 32, 98, 101, 32, 105, 110, 116, 33, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 109, 111, 100, 40, 121, 44, 32, 52, 41, 32, 61, 61, 32, 48, 32, 97, 110, 100, 32, 40, 109, 111, 100, 40, 121, 44, 32, 49, 48, 48, 41, 32, 126, 61, 32, 48, 32, 111, 114, 32, 109, 111, 100, 40, 121, 44, 32, 52, 48, 48, 41, 32, 61, 61, 32, 48, 41, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 100, 97, 121, 32, 115, 105, 110, 99, 101, 32, 121, 101, 97, 114, 32, 48, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 121, 102, 114, 111, 109, 121, 101, 97, 114, 40, 121, 41, 32, 45, 45, 32, 121, 32, 109, 117, 115, 116, 32, 98, 101, 32, 105, 110, 116, 33, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 51, 54, 53, 42, 121, 32, 43, 32, 102, 108, 111, 111, 114, 40, 121, 47, 52, 41, 32, 45, 32, 102, 108, 111, 111, 114, 40, 121, 47, 49, 48, 48, 41, 32, 43, 32, 102, 108, 111, 111, 114, 40, 121, 47, 52, 48, 48, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 100, 97, 121, 32, 110, 117, 109, 98, 101, 114, 32, 102, 114, 111, 109, 32, 100, 97, 116, 101, 44, 32, 109, 111, 110, 116, 104, 32, 105, 115, 32, 122, 101, 114, 111, 32, 98, 97, 115, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 121, 44, 32, 109, 44, 32, 100, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 109, 32, 61, 32, 109, 111, 100, 40, 109, 111, 100, 40, 109, 44, 49, 50, 41, 32, 43, 32, 49, 48, 44, 32, 49, 50, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 121, 102, 114, 111, 109, 121, 101, 97, 114, 40, 121, 32, 43, 32, 102, 108, 111, 111, 114, 40, 109, 47, 49, 50, 41, 32, 45, 32, 102, 108, 111, 111, 114, 40, 109, 109, 47, 49, 48, 41, 41, 32, 43, 32, 102, 108, 111, 111, 114, 40, 40, 109, 109, 42, 51, 48, 54, 32, 43, 32, 53, 41, 47, 49, 48, 41, 32, 43, 32, 100, 32, 45, 32, 51, 48, 55, 10, 32, 32, 32, 32, 45, 45, 108, 111, 99, 97, 108, 32, 121, 121, 32, 61, 32, 121, 32, 43, 32, 102, 108, 111, 111, 114, 40, 109, 47, 49, 50, 41, 32, 45, 32, 102, 108, 111, 111, 114, 40, 109, 109, 47, 49, 48, 41, 10, 32, 32, 32, 32, 45, 45, 114, 101, 116, 117, 114, 110, 32, 100, 97, 121, 102, 114, 111, 109, 121, 101, 97, 114, 40, 121, 121, 41, 32, 43, 32, 102, 108, 111, 111, 114, 40, 40, 109, 109, 42, 51, 48, 54, 32, 43, 32, 53, 41, 47, 49, 48, 41, 32, 43, 32, 40, 100, 32, 45, 32, 49, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 100, 97, 116, 101, 32, 102, 114, 111, 109, 32, 100, 97, 121, 32, 110, 117, 109, 98, 101, 114, 44, 32, 109, 111, 110, 116, 104, 32, 105, 115, 32, 122, 101, 114, 111, 32, 98, 97, 115, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 103, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 103, 32, 61, 32, 103, 32, 43, 32, 51, 48, 54, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 32, 61, 32, 102, 108, 111, 111, 114, 40, 40, 49, 48, 48, 48, 48, 42, 103, 32, 43, 32, 49, 52, 55, 56, 48, 41, 47, 51, 54, 53, 50, 52, 50, 53, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 32, 61, 32, 103, 32, 45, 32, 100, 97, 121, 102, 114, 111, 109, 121, 101, 97, 114, 40, 121, 41, 10, 32, 32, 32, 32, 105, 102, 32, 100, 32, 60, 32, 48, 32, 116, 104, 101, 110, 32, 121, 32, 61, 32, 121, 32, 45, 32, 49, 59, 32, 100, 32, 61, 32, 103, 32, 45, 32, 100, 97, 121, 102, 114, 111, 109, 121, 101, 97, 114, 40, 121, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 105, 32, 61, 32, 102, 108, 111, 111, 114, 40, 40, 49, 48, 48, 42, 100, 32, 43, 32, 53, 50, 41, 47, 51, 48, 54, 48, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 102, 108, 111, 111, 114, 40, 40, 109, 105, 32, 43, 32, 50, 41, 47, 49, 50, 41, 32, 43, 32, 121, 41, 44, 32, 109, 111, 100, 40, 109, 105, 32, 43, 32, 50, 44, 49, 50, 41, 44, 32, 40, 100, 32, 45, 32, 102, 108, 111, 111, 114, 40, 40, 109, 105, 42, 51, 48, 54, 32, 43, 32, 53, 41, 47, 49, 48, 41, 32, 43, 32, 49, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 91, 91, 32, 102, 111, 114, 32, 102, 108, 111, 97, 116, 115, 32, 111, 114, 32, 105, 110, 116, 51, 50, 32, 76, 117, 97, 32, 78, 117, 109, 98, 101, 114, 32, 100, 97, 116, 97, 32, 116, 121, 112, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 50, 40, 103, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 103, 44, 32, 110, 32, 61, 32, 103, 32, 43, 32, 51, 48, 54, 59, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 52, 48, 48, 32, 61, 32, 102, 108, 111, 111, 114, 40, 103, 47, 68, 73, 52, 48, 48, 89, 41, 59, 110, 32, 61, 32, 109, 111, 100, 40, 103, 44, 68, 73, 52, 48, 48, 89, 41, 59, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 49, 48, 48, 32, 61, 32, 102, 108, 111, 111, 114, 40, 110, 47, 68, 73, 49, 48, 48, 89, 41, 59, 110, 32, 61, 32, 109, 111, 100, 40, 110, 44, 68, 73, 49, 48, 48, 89, 41, 59, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 48, 48, 52, 32, 61, 32, 102, 108, 111, 111, 114, 40, 110, 47, 68, 73, 52, 89, 41, 59, 32, 32, 32, 110, 32, 61, 32, 109, 111, 100, 40, 110, 44, 68, 73, 52, 89, 41, 59, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 48, 48, 49, 32, 61, 32, 102, 108, 111, 111, 114, 40, 110, 47, 51, 54, 53, 41, 59, 32, 32, 32, 110, 32, 61, 32, 109, 111, 100, 40, 110, 44, 51, 54, 53, 41, 59, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 32, 61, 32, 40, 110, 52, 48, 48, 42, 52, 48, 48, 41, 32, 43, 32, 40, 110, 49, 48, 48, 42, 49, 48, 48, 41, 32, 43, 32, 40, 110, 48, 48, 52, 42, 52, 41, 32, 43, 32, 110, 48, 48, 49, 32, 32, 45, 32, 40, 40, 110, 48, 48, 49, 32, 61, 61, 32, 52, 32, 111, 114, 32, 110, 49, 48, 48, 32, 61, 61, 32, 52, 41, 32, 97, 110, 100, 32, 49, 32, 111, 114, 32, 48, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 32, 61, 32, 103, 32, 45, 32, 100, 97, 121, 102, 114, 111, 109, 121, 101, 97, 114, 40, 121, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 105, 32, 61, 32, 102, 108, 111, 111, 114, 40, 40, 49, 48, 48, 42, 100, 32, 43, 32, 53, 50, 41, 47, 51, 48, 54, 48, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 102, 108, 111, 111, 114, 40, 40, 109, 105, 32, 43, 32, 50, 41, 47, 49, 50, 41, 32, 43, 32, 121, 41, 44, 32, 109, 111, 100, 40, 109, 105, 32, 43, 32, 50, 44, 49, 50, 41, 44, 32, 40, 100, 32, 45, 32, 102, 108, 111, 111, 114, 40, 40, 109, 105, 42, 51, 48, 54, 32, 43, 32, 53, 41, 47, 49, 48, 41, 32, 43, 32, 49, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 93, 93, 10, 32, 32, 45, 45, 32, 100, 97, 121, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 102, 114, 111, 109, 32, 116, 105, 109, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 107, 101, 100, 97, 121, 102, 114, 99, 40, 104, 44, 114, 44, 115, 44, 116, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 40, 104, 42, 54, 48, 32, 43, 32, 114, 41, 42, 54, 48, 32, 43, 32, 115, 41, 42, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 32, 43, 32, 116, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 116, 105, 109, 101, 32, 102, 114, 111, 109, 32, 100, 97, 121, 32, 102, 114, 97, 99, 116, 105, 111, 110, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 98, 114, 101, 97, 107, 100, 97, 121, 102, 114, 99, 40, 100, 102, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 10, 32, 32, 32, 32, 32, 32, 109, 111, 100, 40, 102, 108, 111, 111, 114, 40, 100, 102, 47, 84, 73, 67, 75, 83, 80, 69, 82, 72, 79, 85, 82, 41, 44, 72, 79, 85, 82, 80, 69, 82, 68, 65, 89, 41, 44, 10, 32, 32, 32, 32, 32, 32, 109, 111, 100, 40, 102, 108, 111, 111, 114, 40, 100, 102, 47, 84, 73, 67, 75, 83, 80, 69, 82, 77, 73, 78, 32, 41, 44, 77, 73, 78, 80, 69, 82, 72, 79, 85, 82, 41, 44, 10, 32, 32, 32, 32, 32, 32, 109, 111, 100, 40, 102, 108, 111, 111, 114, 40, 100, 102, 47, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 32, 41, 44, 83, 69, 67, 80, 69, 82, 77, 73, 78, 41, 44, 10, 32, 32, 32, 32, 32, 32, 109, 111, 100, 40, 100, 102, 44, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 119, 101, 101, 107, 100, 97, 121, 32, 115, 117, 110, 100, 97, 121, 32, 61, 32, 48, 44, 32, 109, 111, 110, 100, 97, 121, 32, 61, 32, 49, 32, 46, 46, 46, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 119, 101, 101, 107, 100, 97, 121, 40, 100, 110, 41, 32, 114, 101, 116, 117, 114, 110, 32, 109, 111, 100, 40, 100, 110, 32, 43, 32, 49, 44, 32, 55, 41, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 121, 101, 97, 114, 100, 97, 121, 32, 48, 32, 98, 97, 115, 101, 100, 32, 46, 46, 46, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 121, 101, 97, 114, 100, 97, 121, 40, 100, 110, 41, 10, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 110, 32, 45, 32, 100, 97, 121, 102, 114, 111, 109, 121, 101, 97, 114, 40, 40, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 100, 110, 41, 41, 45, 49, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 112, 97, 114, 115, 101, 32, 118, 32, 97, 115, 32, 97, 32, 109, 111, 110, 116, 104, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 109, 111, 110, 116, 104, 97, 114, 103, 40, 118, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 118, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 109, 32, 97, 110, 100, 32, 102, 105, 120, 40, 109, 32, 45, 32, 49, 41, 41, 32, 111, 114, 32, 105, 110, 108, 105, 115, 116, 40, 116, 111, 115, 116, 114, 105, 110, 103, 40, 118, 41, 32, 111, 114, 32, 34, 34, 44, 32, 115, 108, 95, 109, 111, 110, 116, 104, 115, 44, 32, 50, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 103, 101, 116, 32, 100, 97, 121, 110, 117, 109, 32, 111, 102, 32, 105, 115, 111, 119, 101, 101, 107, 32, 111, 110, 101, 32, 111, 102, 32, 121, 101, 97, 114, 32, 121, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 111, 119, 49, 40, 121, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 32, 61, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 121, 44, 32, 48, 44, 32, 52, 41, 32, 45, 45, 32, 103, 101, 116, 32, 116, 104, 101, 32, 100, 97, 116, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 52, 45, 74, 97, 110, 32, 111, 102, 32, 121, 101, 97, 114, 32, 96, 121, 96, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 32, 61, 32, 119, 101, 101, 107, 100, 97, 121, 40, 102, 41, 10, 32, 32, 32, 32, 100, 32, 61, 32, 100, 32, 61, 61, 32, 48, 32, 97, 110, 100, 32, 55, 32, 111, 114, 32, 100, 32, 45, 45, 32, 103, 101, 116, 32, 116, 104, 101, 32, 73, 83, 79, 32, 100, 97, 121, 32, 110, 117, 109, 98, 101, 114, 44, 32, 49, 32, 61, 61, 32, 77, 111, 110, 100, 97, 121, 44, 32, 55, 32, 61, 61, 32, 83, 117, 110, 100, 97, 121, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 32, 43, 32, 40, 49, 32, 45, 32, 100, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 111, 119, 121, 40, 100, 110, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 49, 59, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 32, 61, 32, 40, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 100, 110, 41, 41, 10, 32, 32, 32, 32, 105, 102, 32, 100, 110, 32, 62, 61, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 121, 44, 32, 49, 49, 44, 32, 50, 57, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 119, 49, 32, 61, 32, 105, 115, 111, 119, 49, 40, 121, 32, 43, 32, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 100, 110, 32, 60, 32, 119, 49, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 49, 32, 61, 32, 105, 115, 111, 119, 49, 40, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 121, 32, 61, 32, 121, 32, 43, 32, 49, 59, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 119, 49, 32, 61, 32, 105, 115, 111, 119, 49, 40, 121, 41, 59, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 100, 110, 32, 60, 32, 119, 49, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 49, 32, 61, 32, 105, 115, 111, 119, 49, 40, 121, 45, 49, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 121, 32, 61, 32, 121, 32, 45, 32, 49, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 108, 111, 111, 114, 40, 40, 100, 110, 45, 119, 49, 41, 47, 55, 41, 43, 49, 44, 32, 121, 10, 32, 32, 101, 110, 100, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 111, 121, 40, 100, 110, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 32, 61, 32, 40, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 100, 110, 41, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 121, 32, 43, 32, 40, 40, 40, 100, 110, 32, 62, 61, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 121, 44, 32, 49, 49, 44, 32, 50, 57, 41, 41, 32, 97, 110, 100, 32, 40, 100, 110, 32, 62, 61, 32, 105, 115, 111, 119, 49, 40, 121, 32, 43, 32, 49, 41, 41, 41, 32, 97, 110, 100, 32, 49, 32, 111, 114, 32, 40, 100, 110, 32, 60, 32, 105, 115, 111, 119, 49, 40, 121, 41, 32, 97, 110, 100, 32, 45, 49, 32, 111, 114, 32, 48, 41, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 95, 105, 115, 111, 121, 119, 100, 40, 121, 44, 119, 44, 100, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 105, 115, 111, 119, 49, 40, 121, 41, 32, 43, 32, 55, 42, 119, 32, 43, 32, 100, 32, 45, 32, 56, 32, 45, 45, 32, 115, 105, 109, 112, 108, 105, 102, 105, 101, 100, 58, 32, 105, 115, 111, 119, 49, 40, 121, 41, 32, 43, 32, 40, 40, 119, 45, 49, 41, 42, 55, 41, 32, 43, 32, 40, 100, 45, 49, 41, 10, 32, 32, 101, 110, 100, 10, 45, 45, 91, 91, 32, 84, 72, 69, 32, 68, 65, 84, 69, 32, 77, 79, 68, 85, 76, 69, 32, 93, 93, 45, 45, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 109, 116, 115, 116, 114, 32, 32, 61, 32, 34, 37, 120, 32, 37, 88, 34, 59, 10, 45, 45, 35, 105, 102, 32, 110, 111, 116, 32, 68, 65, 84, 69, 95, 79, 66, 74, 69, 67, 84, 95, 65, 70, 88, 32, 116, 104, 101, 110, 10, 32, 32, 108, 111, 99, 97, 108, 32, 100, 97, 116, 101, 32, 61, 32, 123, 125, 10, 32, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 100, 97, 116, 101, 44, 32, 100, 97, 116, 101, 41, 10, 45, 45, 32, 86, 101, 114, 115, 105, 111, 110, 58, 32, 32, 86, 77, 77, 77, 82, 82, 82, 82, 59, 32, 86, 45, 77, 97, 106, 111, 114, 44, 32, 77, 45, 77, 105, 110, 111, 114, 44, 32, 82, 45, 82, 101, 118, 105, 115, 105, 111, 110, 59, 32, 32, 101, 46, 103, 46, 32, 53, 46, 52, 53, 46, 51, 50, 49, 32, 61, 61, 32, 53, 48, 52, 53, 48, 51, 50, 49, 10, 32, 32, 100, 97, 116, 101, 46, 118, 101, 114, 115, 105, 111, 110, 32, 61, 32, 50, 48, 48, 49, 48, 48, 48, 49, 32, 45, 45, 32, 50, 46, 49, 46, 49, 10, 45, 45, 35, 101, 110, 100, 32, 45, 45, 32, 110, 111, 116, 32, 68, 65, 84, 69, 95, 79, 66, 74, 69, 67, 84, 95, 65, 70, 88, 10, 45, 45, 91, 91, 32, 84, 72, 69, 32, 68, 65, 84, 69, 32, 79, 66, 74, 69, 67, 84, 32, 93, 93, 45, 45, 10, 32, 32, 108, 111, 99, 97, 108, 32, 100, 111, 98, 106, 32, 61, 32, 123, 125, 10, 32, 32, 100, 111, 98, 106, 46, 95, 95, 105, 110, 100, 101, 120, 32, 61, 32, 100, 111, 98, 106, 10, 32, 32, 100, 111, 98, 106, 46, 95, 95, 109, 101, 116, 97, 116, 97, 98, 108, 101, 32, 61, 32, 100, 111, 98, 106, 10, 32, 32, 45, 45, 32, 115, 104, 111, 117, 116, 32, 105, 110, 118, 97, 108, 105, 100, 32, 97, 114, 103, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 95, 101, 114, 114, 111, 114, 95, 97, 114, 103, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 101, 114, 114, 111, 114, 40, 34, 105, 110, 118, 97, 108, 105, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 40, 115, 41, 34, 44, 48, 41, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 110, 101, 119, 32, 100, 97, 116, 101, 32, 111, 98, 106, 101, 99, 116, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 100, 110, 44, 32, 100, 102, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 123, 100, 97, 121, 110, 117, 109, 61, 100, 110, 44, 32, 100, 97, 121, 102, 114, 99, 61, 100, 102, 125, 44, 32, 100, 111, 98, 106, 41, 10, 32, 32, 101, 110, 100, 10, 10, 45, 45, 35, 105, 102, 32, 110, 111, 116, 32, 78, 79, 95, 76, 79, 67, 65, 76, 95, 84, 73, 77, 69, 95, 83, 85, 80, 80, 79, 82, 84, 32, 116, 104, 101, 110, 10, 32, 32, 45, 45, 32, 109, 97, 103, 105, 99, 32, 121, 101, 97, 114, 32, 116, 97, 98, 108, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 100, 97, 116, 101, 95, 101, 112, 111, 99, 104, 44, 32, 121, 116, 59, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 101, 113, 117, 105, 118, 121, 101, 97, 114, 40, 121, 41, 10, 32, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 121, 116, 41, 10, 32, 32, 32, 32, 121, 116, 32, 61, 32, 123, 125, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 101, 32, 61, 32, 100, 97, 116, 101, 95, 101, 112, 111, 99, 104, 58, 99, 111, 112, 121, 40, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 119, 44, 32, 100, 121, 10, 32, 32, 32, 32, 102, 111, 114, 32, 95, 32, 61, 32, 48, 44, 32, 51, 48, 48, 48, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 100, 101, 58, 115, 101, 116, 121, 101, 97, 114, 40, 100, 101, 58, 103, 101, 116, 121, 101, 97, 114, 40, 41, 32, 43, 32, 49, 44, 32, 49, 44, 32, 49, 41, 10, 32, 32, 32, 32, 32, 32, 100, 121, 32, 61, 32, 100, 101, 58, 103, 101, 116, 121, 101, 97, 114, 40, 41, 10, 32, 32, 32, 32, 32, 32, 100, 119, 32, 61, 32, 100, 101, 58, 103, 101, 116, 119, 101, 101, 107, 100, 97, 121, 40, 41, 32, 42, 32, 40, 105, 115, 108, 101, 97, 112, 121, 101, 97, 114, 40, 100, 121, 41, 32, 97, 110, 100, 32, 32, 45, 49, 32, 111, 114, 32, 49, 41, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 121, 116, 91, 100, 119, 93, 32, 116, 104, 101, 110, 32, 121, 116, 91, 100, 119, 93, 32, 61, 32, 100, 121, 32, 101, 110, 100, 32, 32, 45, 45, 112, 114, 105, 110, 116, 40, 100, 101, 41, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 121, 116, 91, 49, 93, 32, 97, 110, 100, 32, 121, 116, 91, 50, 93, 32, 97, 110, 100, 32, 121, 116, 91, 51, 93, 32, 97, 110, 100, 32, 121, 116, 91, 52, 93, 32, 97, 110, 100, 32, 121, 116, 91, 53, 93, 32, 97, 110, 100, 32, 121, 116, 91, 54, 93, 32, 97, 110, 100, 32, 121, 116, 91, 55, 93, 32, 97, 110, 100, 32, 121, 116, 91, 45, 49, 93, 32, 97, 110, 100, 32, 121, 116, 91, 45, 50, 93, 32, 97, 110, 100, 32, 121, 116, 91, 45, 51, 93, 32, 97, 110, 100, 32, 121, 116, 91, 45, 52, 93, 32, 97, 110, 100, 32, 121, 116, 91, 45, 53, 93, 32, 97, 110, 100, 32, 121, 116, 91, 45, 54, 93, 32, 97, 110, 100, 32, 121, 116, 91, 45, 55, 93, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 103, 101, 116, 101, 113, 117, 105, 118, 121, 101, 97, 114, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 121, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 121, 116, 91, 32, 40, 119, 101, 101, 107, 100, 97, 121, 40, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 121, 44, 32, 48, 44, 32, 49, 41, 41, 32, 43, 32, 49, 41, 32, 42, 32, 40, 105, 115, 108, 101, 97, 112, 121, 101, 97, 114, 40, 121, 41, 32, 97, 110, 100, 32, 32, 45, 49, 32, 111, 114, 32, 49, 41, 32, 93, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 103, 101, 116, 101, 113, 117, 105, 118, 121, 101, 97, 114, 40, 121, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 84, 105, 109, 101, 86, 97, 108, 117, 101, 32, 102, 114, 111, 109, 32, 100, 97, 116, 101, 32, 97, 110, 100, 32, 116, 105, 109, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 111, 116, 118, 40, 121, 44, 109, 44, 100, 44, 104, 44, 114, 44, 115, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 121, 44, 32, 109, 44, 32, 100, 41, 32, 45, 32, 68, 65, 84, 69, 95, 69, 80, 79, 67, 72, 41, 32, 42, 32, 83, 69, 67, 80, 69, 82, 68, 65, 89, 32, 32, 43, 32, 40, 40, 104, 42, 54, 48, 32, 43, 32, 114, 41, 42, 54, 48, 32, 43, 32, 115, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 84, 105, 109, 101, 86, 97, 108, 117, 101, 32, 102, 114, 111, 109, 32, 84, 105, 109, 101, 84, 97, 98, 108, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 109, 116, 111, 116, 118, 40, 116, 109, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 109, 32, 97, 110, 100, 32, 116, 111, 116, 118, 40, 116, 109, 46, 121, 101, 97, 114, 44, 32, 116, 109, 46, 109, 111, 110, 116, 104, 32, 45, 32, 49, 44, 32, 116, 109, 46, 100, 97, 121, 44, 32, 116, 109, 46, 104, 111, 117, 114, 44, 32, 116, 109, 46, 109, 105, 110, 44, 32, 116, 109, 46, 115, 101, 99, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 82, 101, 116, 117, 114, 110, 115, 32, 116, 104, 101, 32, 98, 105, 97, 115, 32, 105, 110, 32, 115, 101, 99, 111, 110, 100, 115, 32, 111, 102, 32, 117, 116, 99, 32, 116, 105, 109, 101, 32, 100, 97, 121, 110, 117, 109, 32, 97, 110, 100, 32, 100, 97, 121, 102, 114, 99, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 98, 105, 97, 115, 117, 116, 99, 50, 40, 115, 101, 108, 102, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 44, 109, 44, 100, 32, 61, 32, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 104, 44, 114, 44, 115, 32, 61, 32, 98, 114, 101, 97, 107, 100, 97, 121, 102, 114, 99, 40, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 118, 117, 32, 61, 32, 116, 111, 116, 118, 40, 121, 44, 109, 44, 100, 44, 104, 44, 114, 44, 115, 41, 32, 45, 45, 32, 103, 101, 116, 32, 116, 104, 101, 32, 117, 116, 99, 32, 84, 105, 109, 101, 86, 97, 108, 117, 101, 32, 111, 102, 32, 100, 97, 116, 101, 32, 97, 110, 100, 32, 116, 105, 109, 101, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 109, 108, 32, 61, 32, 111, 115, 100, 97, 116, 101, 40, 34, 42, 116, 34, 44, 32, 116, 118, 117, 41, 32, 45, 45, 32, 103, 101, 116, 32, 116, 104, 101, 32, 108, 111, 99, 97, 108, 32, 84, 105, 109, 101, 84, 97, 98, 108, 101, 32, 111, 102, 32, 116, 118, 117, 10, 32, 32, 32, 32, 105, 102, 32, 40, 110, 111, 116, 32, 116, 109, 108, 41, 32, 111, 114, 32, 40, 116, 109, 108, 46, 121, 101, 97, 114, 32, 62, 32, 40, 121, 43, 49, 41, 32, 111, 114, 32, 116, 109, 108, 46, 121, 101, 97, 114, 32, 60, 32, 40, 121, 45, 49, 41, 41, 32, 116, 104, 101, 110, 32, 45, 45, 32, 102, 97, 105, 108, 101, 100, 32, 116, 114, 121, 32, 116, 104, 101, 32, 109, 97, 103, 105, 99, 10, 32, 32, 32, 32, 32, 32, 121, 32, 61, 32, 103, 101, 116, 101, 113, 117, 105, 118, 121, 101, 97, 114, 40, 121, 41, 10, 32, 32, 32, 32, 32, 32, 116, 118, 117, 32, 61, 32, 116, 111, 116, 118, 40, 121, 44, 109, 44, 100, 44, 104, 44, 114, 44, 115, 41, 10, 32, 32, 32, 32, 32, 32, 116, 109, 108, 32, 61, 32, 111, 115, 100, 97, 116, 101, 40, 34, 42, 116, 34, 44, 32, 116, 118, 117, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 118, 108, 32, 61, 32, 116, 109, 116, 111, 116, 118, 40, 116, 109, 108, 41, 10, 32, 32, 32, 32, 105, 102, 32, 116, 118, 117, 32, 97, 110, 100, 32, 116, 118, 108, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 118, 117, 32, 45, 32, 116, 118, 108, 44, 32, 116, 118, 117, 44, 32, 116, 118, 108, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 101, 114, 114, 111, 114, 40, 34, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 103, 101, 116, 32, 98, 105, 97, 115, 32, 102, 114, 111, 109, 32, 117, 116, 99, 32, 116, 105, 109, 101, 34, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 82, 101, 116, 117, 114, 110, 115, 32, 116, 104, 101, 32, 98, 105, 97, 115, 32, 105, 110, 32, 115, 101, 99, 111, 110, 100, 115, 32, 111, 102, 32, 108, 111, 99, 97, 108, 32, 116, 105, 109, 101, 32, 100, 97, 121, 110, 117, 109, 32, 97, 110, 100, 32, 100, 97, 121, 102, 114, 99, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 98, 105, 97, 115, 108, 111, 99, 50, 40, 100, 97, 121, 110, 117, 109, 44, 32, 100, 97, 121, 102, 114, 99, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 118, 117, 10, 32, 32, 32, 32, 45, 45, 32, 101, 120, 116, 114, 97, 99, 116, 32, 100, 97, 116, 101, 32, 97, 110, 100, 32, 116, 105, 109, 101, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 44, 109, 44, 100, 32, 61, 32, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 100, 97, 121, 110, 117, 109, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 104, 44, 114, 44, 115, 32, 61, 32, 98, 114, 101, 97, 107, 100, 97, 121, 102, 114, 99, 40, 100, 97, 121, 102, 114, 99, 41, 10, 32, 32, 32, 32, 45, 45, 32, 103, 101, 116, 32, 101, 113, 117, 105, 118, 97, 108, 101, 110, 116, 32, 84, 105, 109, 101, 84, 97, 98, 108, 101, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 109, 108, 32, 61, 32, 123, 121, 101, 97, 114, 61, 121, 44, 32, 109, 111, 110, 116, 104, 61, 109, 43, 49, 44, 32, 100, 97, 121, 61, 100, 44, 32, 104, 111, 117, 114, 61, 104, 44, 32, 109, 105, 110, 61, 114, 44, 32, 115, 101, 99, 61, 115, 125, 10, 32, 32, 32, 32, 45, 45, 32, 103, 101, 116, 32, 101, 113, 117, 105, 118, 97, 108, 101, 110, 116, 32, 84, 105, 109, 101, 86, 97, 108, 117, 101, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 118, 108, 32, 61, 32, 116, 109, 116, 111, 116, 118, 40, 116, 109, 108, 41, 10, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 104, 107, 117, 116, 99, 40, 41, 10, 32, 32, 32, 32, 32, 32, 116, 109, 108, 46, 105, 115, 100, 115, 116, 32, 61, 32, 32, 110, 105, 108, 59, 32, 108, 111, 99, 97, 108, 32, 116, 118, 117, 103, 32, 61, 32, 111, 115, 116, 105, 109, 101, 40, 116, 109, 108, 41, 32, 105, 102, 32, 116, 118, 117, 103, 32, 97, 110, 100, 32, 40, 116, 118, 108, 32, 61, 61, 32, 116, 109, 116, 111, 116, 118, 40, 111, 115, 100, 97, 116, 101, 40, 34, 42, 116, 34, 44, 32, 116, 118, 117, 103, 41, 41, 41, 32, 116, 104, 101, 110, 32, 116, 118, 117, 32, 61, 32, 116, 118, 117, 103, 32, 114, 101, 116, 117, 114, 110, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 116, 109, 108, 46, 105, 115, 100, 115, 116, 32, 61, 32, 116, 114, 117, 101, 59, 32, 108, 111, 99, 97, 108, 32, 116, 118, 117, 100, 32, 61, 32, 111, 115, 116, 105, 109, 101, 40, 116, 109, 108, 41, 32, 105, 102, 32, 116, 118, 117, 100, 32, 97, 110, 100, 32, 40, 116, 118, 108, 32, 61, 61, 32, 116, 109, 116, 111, 116, 118, 40, 111, 115, 100, 97, 116, 101, 40, 34, 42, 116, 34, 44, 32, 116, 118, 117, 100, 41, 41, 41, 32, 116, 104, 101, 110, 32, 116, 118, 117, 32, 61, 32, 116, 118, 117, 100, 32, 114, 101, 116, 117, 114, 110, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 116, 118, 117, 32, 61, 32, 116, 118, 117, 100, 32, 111, 114, 32, 116, 118, 117, 103, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 99, 104, 107, 117, 116, 99, 40, 41, 10, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 116, 118, 117, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 116, 109, 108, 46, 121, 101, 97, 114, 32, 61, 32, 103, 101, 116, 101, 113, 117, 105, 118, 121, 101, 97, 114, 40, 121, 41, 10, 32, 32, 32, 32, 32, 32, 116, 118, 108, 32, 61, 32, 116, 109, 116, 111, 116, 118, 40, 116, 109, 108, 41, 10, 32, 32, 32, 32, 32, 32, 99, 104, 107, 117, 116, 99, 40, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 40, 116, 118, 117, 32, 97, 110, 100, 32, 116, 118, 108, 41, 32, 97, 110, 100, 32, 40, 116, 118, 117, 32, 45, 32, 116, 118, 108, 41, 41, 32, 111, 114, 32, 101, 114, 114, 111, 114, 40, 34, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 103, 101, 116, 32, 98, 105, 97, 115, 32, 102, 114, 111, 109, 32, 108, 111, 99, 97, 108, 32, 116, 105, 109, 101, 34, 41, 44, 32, 116, 118, 117, 44, 32, 116, 118, 108, 10, 32, 32, 101, 110, 100, 10, 45, 45, 35, 101, 110, 100, 32, 45, 45, 32, 110, 111, 116, 32, 78, 79, 95, 76, 79, 67, 65, 76, 95, 84, 73, 77, 69, 95, 83, 85, 80, 80, 79, 82, 84, 10, 10, 45, 45, 35, 105, 102, 32, 110, 111, 116, 32, 68, 65, 84, 69, 95, 79, 66, 74, 69, 67, 84, 95, 65, 70, 88, 32, 116, 104, 101, 110, 10, 32, 32, 45, 45, 32, 116, 104, 101, 32, 100, 97, 116, 101, 32, 112, 97, 114, 115, 101, 114, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 116, 114, 119, 97, 108, 107, 101, 114, 32, 61, 32, 123, 125, 32, 45, 45, 32, 94, 76, 117, 97, 32, 114, 101, 103, 117, 108, 97, 114, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 105, 115, 32, 110, 111, 116, 32, 97, 115, 32, 112, 111, 119, 101, 114, 102, 117, 108, 32, 97, 115, 32, 80, 101, 114, 108, 36, 10, 32, 32, 115, 116, 114, 119, 97, 108, 107, 101, 114, 46, 95, 95, 105, 110, 100, 101, 120, 32, 61, 32, 115, 116, 114, 119, 97, 108, 107, 101, 114, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 101, 119, 115, 116, 114, 119, 97, 108, 107, 101, 114, 40, 115, 41, 114, 101, 116, 117, 114, 110, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 123, 115, 61, 115, 44, 32, 105, 61, 49, 44, 32, 101, 61, 49, 44, 32, 99, 61, 108, 101, 110, 40, 115, 41, 125, 44, 32, 115, 116, 114, 119, 97, 108, 107, 101, 114, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 116, 114, 119, 97, 108, 107, 101, 114, 58, 97, 105, 109, 99, 104, 114, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 34, 92, 110, 34, 32, 46, 46, 32, 115, 101, 108, 102, 46, 115, 32, 46, 46, 32, 34, 92, 110, 34, 32, 46, 46, 32, 114, 101, 112, 40, 34, 46, 34, 44, 115, 101, 108, 102, 46, 101, 45]);
fileData1.push.apply(fileData1, [49, 41, 32, 46, 46, 32, 34, 94, 34, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 116, 114, 119, 97, 108, 107, 101, 114, 58, 102, 105, 110, 105, 115, 104, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 46, 105, 32, 62, 32, 115, 101, 108, 102, 46, 99, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 116, 114, 119, 97, 108, 107, 101, 114, 58, 98, 97, 99, 107, 40, 41, 32, 32, 115, 101, 108, 102, 46, 105, 32, 61, 32, 115, 101, 108, 102, 46, 101, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 116, 114, 119, 97, 108, 107, 101, 114, 58, 114, 101, 115, 116, 97, 114, 116, 40, 41, 32, 115, 101, 108, 102, 46, 105, 44, 32, 115, 101, 108, 102, 46, 101, 32, 61, 32, 49, 44, 32, 49, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 116, 114, 119, 97, 108, 107, 101, 114, 58, 109, 97, 116, 99, 104, 40, 115, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 102, 105, 110, 100, 40, 115, 101, 108, 102, 46, 115, 44, 32, 115, 44, 32, 115, 101, 108, 102, 46, 105, 41, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 116, 114, 119, 97, 108, 107, 101, 114, 58, 95, 95, 99, 97, 108, 108, 40, 115, 44, 32, 102, 41, 45, 45, 32, 112, 114, 105, 110, 116, 40, 34, 115, 116, 114, 119, 97, 108, 107, 101, 114, 58, 95, 95, 99, 97, 108, 108, 32, 34, 46, 46, 115, 46, 46, 115, 101, 108, 102, 58, 97, 105, 109, 99, 104, 114, 40, 41, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 105, 115, 44, 32, 105, 101, 59, 32, 105, 115, 44, 32, 105, 101, 44, 32, 115, 101, 108, 102, 91, 49, 93, 44, 32, 115, 101, 108, 102, 91, 50, 93, 44, 32, 115, 101, 108, 102, 91, 51, 93, 44, 32, 115, 101, 108, 102, 91, 52, 93, 44, 32, 115, 101, 108, 102, 91, 53, 93, 32, 61, 32, 102, 105, 110, 100, 40, 115, 101, 108, 102, 46, 115, 44, 32, 115, 44, 32, 115, 101, 108, 102, 46, 105, 41, 10, 32, 32, 32, 32, 105, 102, 32, 105, 115, 32, 116, 104, 101, 110, 32, 115, 101, 108, 102, 46, 101, 44, 32, 115, 101, 108, 102, 46, 105, 32, 61, 32, 115, 101, 108, 102, 46, 105, 44, 32, 49, 43, 105, 101, 59, 32, 105, 102, 32, 102, 32, 116, 104, 101, 110, 32, 102, 40, 117, 110, 112, 97, 99, 107, 40, 115, 101, 108, 102, 41, 41, 32, 101, 110, 100, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 95, 112, 97, 114, 115, 101, 40, 115, 116, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 44, 109, 44, 100, 44, 32, 104, 44, 114, 44, 115, 44, 32, 32, 122, 44, 32, 32, 119, 44, 117, 44, 32, 106, 44, 32, 32, 101, 44, 32, 32, 120, 44, 99, 44, 32, 32, 100, 110, 44, 100, 102, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 119, 32, 61, 32, 110, 101, 119, 115, 116, 114, 119, 97, 108, 107, 101, 114, 40, 103, 115, 117, 98, 40, 103, 115, 117, 98, 40, 115, 116, 114, 44, 32, 34, 40, 37, 98, 40, 41, 41, 34, 44, 32, 34, 34, 41, 44, 34, 94, 40, 37, 115, 42, 41, 34, 44, 34, 34, 41, 41, 32, 45, 45, 32, 114, 101, 109, 111, 118, 101, 32, 99, 111, 109, 109, 101, 110, 116, 44, 32, 116, 114, 105, 109, 32, 108, 101, 97, 100, 105, 110, 103, 32, 115, 112, 97, 99, 101, 10, 32, 32, 32, 32, 45, 45, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 95, 111, 117, 116, 40, 41, 32, 112, 114, 105, 110, 116, 40, 121, 44, 109, 44, 100, 44, 104, 44, 114, 44, 115, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 95, 100, 117, 112, 40, 113, 41, 32, 45, 45, 91, 91, 101, 114, 114, 111, 114, 95, 111, 117, 116, 40, 41, 93, 93, 32, 101, 114, 114, 111, 114, 40, 34, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 118, 97, 108, 117, 101, 58, 32, 34, 32, 46, 46, 32, 40, 113, 32, 111, 114, 32, 34, 34, 41, 32, 46, 46, 32, 115, 119, 58, 97, 105, 109, 99, 104, 114, 40, 41, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 95, 115, 121, 110, 40, 113, 41, 32, 45, 45, 91, 91, 101, 114, 114, 111, 114, 95, 111, 117, 116, 40, 41, 93, 93, 32, 101, 114, 114, 111, 114, 40, 34, 115, 121, 110, 116, 97, 120, 32, 101, 114, 114, 111, 114, 58, 32, 34, 32, 46, 46, 32, 40, 113, 32, 111, 114, 32, 34, 34, 41, 32, 46, 46, 32, 115, 119, 58, 97, 105, 109, 99, 104, 114, 40, 41, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 95, 105, 110, 118, 40, 113, 41, 32, 45, 45, 91, 91, 101, 114, 114, 111, 114, 95, 111, 117, 116, 40, 41, 93, 93, 32, 101, 114, 114, 111, 114, 40, 34, 105, 110, 118, 97, 108, 105, 100, 32, 100, 97, 116, 101, 58, 32, 34, 32, 46, 46, 32, 40, 113, 32, 111, 114, 32, 34, 34, 41, 32, 46, 46, 32, 115, 119, 58, 97, 105, 109, 99, 104, 114, 40, 41, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 121, 40, 113, 41, 32, 121, 32, 61, 32, 121, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 95, 100, 117, 112, 40, 41, 32, 111, 114, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 113, 41, 59, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 109, 40, 113, 41, 32, 109, 32, 61, 32, 40, 109, 32, 111, 114, 32, 119, 32, 111, 114, 32, 106, 41, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 95, 100, 117, 112, 40, 109, 32, 111, 114, 32, 119, 32, 111, 114, 32, 106, 41, 32, 111, 114, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 113, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 100, 40, 113, 41, 32, 100, 32, 61, 32, 100, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 95, 100, 117, 112, 40, 41, 32, 111, 114, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 113, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 104, 40, 113, 41, 32, 104, 32, 61, 32, 104, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 95, 100, 117, 112, 40, 41, 32, 111, 114, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 113, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 114, 40, 113, 41, 32, 114, 32, 61, 32, 114, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 95, 100, 117, 112, 40, 41, 32, 111, 114, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 113, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 115, 40, 113, 41, 32, 115, 32, 61, 32, 115, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 95, 100, 117, 112, 40, 41, 32, 111, 114, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 113, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 100, 100, 115, 40, 113, 41, 32, 115, 32, 61, 32, 115, 32, 43, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 113, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 106, 40, 113, 41, 32, 106, 32, 61, 32, 40, 109, 32, 111, 114, 32, 119, 32, 111, 114, 32, 106, 41, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 95, 100, 117, 112, 40, 41, 32, 111, 114, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 113, 41, 59, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 122, 40, 113, 41, 32, 122, 32, 61, 32, 40, 122, 32, 126, 61, 32, 48, 32, 97, 110, 100, 32, 122, 41, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 95, 100, 117, 112, 40, 41, 32, 111, 114, 32, 113, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 122, 110, 40, 122, 115, 44, 122, 110, 41, 32, 122, 110, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 122, 110, 41, 59, 32, 115, 101, 116, 122, 40, 32, 40, 40, 122, 110, 60, 50, 52, 41, 32, 97, 110, 100, 32, 40, 122, 110, 42, 54, 48, 41, 32, 111, 114, 32, 40, 109, 111, 100, 40, 122, 110, 44, 49, 48, 48, 41, 32, 43, 32, 102, 108, 111, 111, 114, 40, 122, 110, 47, 49, 48, 48, 41, 32, 42, 32, 54, 48, 41, 41, 42, 40, 32, 122, 115, 61, 61, 39, 43, 39, 32, 97, 110, 100, 32, 45, 49, 32, 111, 114, 32, 49, 41, 32, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 122, 99, 40, 122, 115, 44, 122, 104, 44, 122, 109, 41, 32, 115, 101, 116, 122, 40, 32, 40, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 122, 104, 41, 42, 54, 48, 41, 32, 43, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 122, 109, 41, 41, 42, 40, 32, 122, 115, 61, 61, 39, 43, 39, 32, 97, 110, 100, 32, 45, 49, 32, 111, 114, 32, 49, 41, 32, 41, 32, 101, 110, 100, 10, 10, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 40, 115, 119, 40, 34, 94, 40, 37, 100, 37, 100, 37, 100, 37, 100, 41, 34, 44, 115, 101, 116, 121, 41, 32, 97, 110, 100, 32, 40, 115, 119, 40, 34, 94, 40, 37, 45, 63, 41, 40, 37, 100, 37, 100, 41, 37, 49, 40, 37, 100, 37, 100, 41, 34, 44, 102, 117, 110, 99, 116, 105, 111, 110, 40, 95, 44, 97, 44, 98, 41, 32, 115, 101, 116, 109, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 97, 41, 41, 59, 32, 115, 101, 116, 100, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 98, 41, 41, 32, 101, 110, 100, 41, 32, 111, 114, 32, 115, 119, 40, 34, 94, 40, 37, 45, 63, 41, 91, 87, 119, 93, 40, 37, 100, 37, 100, 41, 37, 49, 40, 37, 100, 63, 41, 34, 44, 102, 117, 110, 99, 116, 105, 111, 110, 40, 95, 44, 97, 44, 98, 41, 32, 119, 44, 32, 117, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 97, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 98, 32, 111, 114, 32, 49, 41, 32, 101, 110, 100, 41, 32, 111, 114, 32, 115, 119, 40, 34, 94, 37, 45, 63, 40, 37, 100, 37, 100, 37, 100, 41, 34, 44, 115, 101, 116, 106, 41, 32, 111, 114, 32, 115, 119, 40, 34, 94, 37, 45, 63, 40, 37, 100, 37, 100, 41, 34, 44, 102, 117, 110, 99, 116, 105, 111, 110, 40, 97, 41, 32, 115, 101, 116, 109, 40, 97, 41, 59, 115, 101, 116, 100, 40, 49, 41, 32, 101, 110, 100, 41, 41, 10, 32, 32, 32, 32, 97, 110, 100, 32, 40, 40, 115, 119, 40, 34, 94, 37, 115, 42, 91, 84, 116, 93, 63, 40, 37, 100, 37, 100, 41, 58, 63, 34, 44, 115, 101, 116, 104, 41, 32, 97, 110, 100, 32, 115, 119, 40, 34, 94, 40, 37, 100, 37, 100, 41, 58, 63, 34, 44, 115, 101, 116, 114, 41, 32, 97, 110, 100, 32, 115, 119, 40, 34, 94, 40, 37, 100, 37, 100, 41, 34, 44, 115, 101, 116, 115, 41, 32, 97, 110, 100, 32, 115, 119, 40, 34, 94, 40, 37, 46, 37, 100, 43, 41, 34, 44, 97, 100, 100, 115, 41, 41, 10, 32, 32, 32, 32, 32, 32, 111, 114, 32, 115, 119, 58, 102, 105, 110, 105, 115, 104, 40, 41, 32, 111, 114, 32, 40, 115, 119, 34, 94, 37, 115, 42, 36, 34, 32, 111, 114, 32, 115, 119, 34, 94, 37, 115, 42, 91, 90, 122, 93, 37, 115, 42, 36, 34, 32, 111, 114, 32, 115, 119, 40, 34, 94, 37, 115, 45, 40, 91, 37, 43, 37, 45, 93, 41, 40, 37, 100, 37, 100, 41, 58, 63, 40, 37, 100, 37, 100, 41, 37, 115, 42, 36, 34, 44, 115, 101, 116, 122, 99, 41, 32, 111, 114, 32, 115, 119, 40, 34, 94, 37, 115, 42, 40, 91, 37, 43, 37, 45, 93, 41, 40, 37, 100, 37, 100, 41, 37, 115, 42, 36, 34, 44, 115, 101, 116, 122, 110, 41, 41, 10, 32, 32, 32, 32, 32, 32, 41, 32, 32, 41, 10, 32, 32, 32, 32, 116, 104, 101, 110, 32, 45, 45, 112, 114, 105, 110, 116, 40, 121, 44, 109, 44, 100, 44, 104, 44, 114, 44, 115, 44, 122, 44, 119, 44, 117, 44, 106, 41, 10, 32, 32, 32, 32, 115, 119, 58, 114, 101, 115, 116, 97, 114, 116, 40, 41, 59, 32, 121, 44, 109, 44, 100, 44, 104, 44, 114, 44, 115, 44, 122, 44, 119, 44, 117, 44, 106, 32, 61, 32, 110, 105, 108, 44, 110, 105, 108, 44, 110, 105, 108, 44, 110, 105, 108, 44, 110, 105, 108, 44, 110, 105, 108, 44, 110, 105, 108, 44, 110, 105, 108, 44, 110, 105, 108, 44, 110, 105, 108, 10, 32, 32, 32, 32, 32, 32, 114, 101, 112, 101, 97, 116, 32, 45, 45, 32, 112, 114, 105, 110, 116, 40, 115, 119, 58, 97, 105, 109, 99, 104, 114, 40, 41, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 115, 119, 40, 34, 94, 91, 116, 84, 58, 93, 63, 37, 115, 42, 40, 37, 100, 37, 100, 63, 41, 58, 34, 44, 115, 101, 116, 104, 41, 32, 116, 104, 101, 110, 32, 45, 45, 112, 114, 105, 110, 116, 40, 34, 36, 84, 105, 109, 101, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 32, 61, 32, 115, 119, 40, 34, 94, 37, 115, 42, 40, 37, 100, 37, 100, 63, 41, 34, 44, 115, 101, 116, 114, 41, 32, 97, 110, 100, 32, 115, 119, 40, 34, 94, 37, 115, 42, 58, 37, 115, 42, 40, 37, 100, 37, 100, 63, 41, 34, 44, 115, 101, 116, 115, 41, 32, 97, 110, 100, 32, 115, 119, 40, 34, 94, 40, 37, 46, 37, 100, 43, 41, 34, 44, 97, 100, 100, 115, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 119, 40, 34, 94, 40, 37, 100, 43, 41, 91, 47, 92, 92, 37, 115, 44, 45, 93, 63, 37, 115, 42, 34, 41, 32, 116, 104, 101, 110, 32, 45, 45, 112, 114, 105, 110, 116, 40, 34, 36, 68, 105, 103, 105, 116, 115, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 44, 32, 99, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 115, 119, 91, 49, 93, 41, 44, 32, 108, 101, 110, 40, 115, 119, 91, 49, 93, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 120, 32, 62, 61, 32, 55, 48, 41, 32, 111, 114, 32, 40, 109, 32, 97, 110, 100, 32, 100, 32, 97, 110, 100, 32, 40, 110, 111, 116, 32, 121, 41, 41, 32, 111, 114, 32, 40, 99, 32, 62, 32, 51, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 116, 121, 40, 32, 120, 32, 43, 32, 40, 40, 120, 32, 62, 61, 32, 49, 48, 48, 32, 111, 114, 32, 99, 62, 51, 41, 97, 110, 100, 32, 48, 32, 111, 114, 32, 49, 57, 48, 48, 41, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 109, 32, 116, 104, 101, 110, 32, 115, 101, 116, 100, 40, 120, 41, 32, 101, 108, 115, 101, 32, 109, 32, 61, 32, 120, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 119, 40, 34, 94, 40, 37, 97, 43, 41, 91, 47, 92, 92, 37, 115, 44, 45, 93, 63, 37, 115, 42, 34, 41, 32, 116, 104, 101, 110, 32, 45, 45, 112, 114, 105, 110, 116, 40, 34, 36, 87, 111, 114, 100, 115, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 32, 61, 32, 115, 119, 91, 49, 93, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 105, 110, 108, 105, 115, 116, 40, 120, 44, 32, 115, 108, 95, 109, 111, 110, 116, 104, 115, 44, 32, 32, 32, 50, 44, 32, 115, 119, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 109, 32, 97, 110, 100, 32, 40, 110, 111, 116, 32, 100, 41, 32, 97, 110, 100, 32, 40, 110, 111, 116, 32, 121, 41, 32, 116, 104, 101, 110, 32, 100, 44, 32, 109, 32, 61, 32, 109, 44, 32, 102, 97, 108, 115, 101, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 116, 109, 40, 109, 111, 100, 40, 115, 119, 91, 48, 93, 44, 49, 50, 41, 43, 49, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 105, 110, 108, 105, 115, 116, 40, 120, 44, 32, 115, 108, 95, 116, 105, 109, 101, 122, 111, 110, 101, 44, 32, 50, 44, 32, 115, 119, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 32, 61, 32, 102, 105, 120, 40, 115, 119, 91, 48, 93, 41, 32, 45, 45, 32, 105, 103, 110, 111, 114, 101, 32, 103, 109, 116, 32, 97, 110, 100, 32, 117, 116, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 99, 32, 126, 61, 32, 48, 32, 116, 104, 101, 110, 32, 115, 101, 116, 122, 40, 99, 44, 32, 120, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 110, 111, 116, 32, 105, 110, 108, 105, 115, 116, 40, 120, 44, 32, 115, 108, 95, 119, 101, 101, 107, 100, 97, 121, 115, 44, 32, 50, 44, 32, 115, 119, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 119, 58, 98, 97, 99, 107, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 97, 109, 32, 112, 109, 32, 98, 99, 101, 32, 97, 100, 32, 99, 101, 32, 98, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 115, 119, 40, 34, 94, 40, 91, 98, 66, 93, 41, 37, 115, 42, 40, 37, 46, 63, 41, 37, 115, 42, 91, 67, 99, 93, 37, 115, 42, 40, 37, 50, 41, 37, 115, 42, 91, 69, 101, 93, 37, 115, 42, 40, 37, 50, 41, 37, 115, 42, 34, 41, 32, 111, 114, 32, 115, 119, 40, 34, 94, 40, 91, 98, 66, 93, 41, 37, 115, 42, 40, 37, 46, 63, 41, 37, 115, 42, 91, 67, 99, 93, 37, 115, 42, 40, 37, 50, 41, 37, 115, 42, 34, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 32, 61, 32, 101, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 95, 100, 117, 112, 40, 41, 32, 111, 114, 32, 45, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 119, 40, 34, 94, 40, 91, 97, 65, 93, 41, 37, 115, 42, 40, 37, 46, 63, 41, 37, 115, 42, 91, 68, 100, 93, 37, 115, 42, 40, 37, 50, 41, 37, 115, 42, 34, 41, 32, 111, 114, 32, 115, 119, 40, 34, 94, 40, 91, 99, 67, 93, 41, 37, 115, 42, 40, 37, 46, 63, 41, 37, 115, 42, 91, 69, 101, 93, 37, 115, 42, 40, 37, 50, 41, 37, 115, 42, 34, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 32, 61, 32, 101, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 95, 100, 117, 112, 40, 41, 32, 111, 114, 32, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 119, 40, 34, 94, 40, 91, 80, 65, 112, 97, 93, 41, 37, 115, 42, 40, 37, 46, 63, 41, 37, 115, 42, 91, 77, 109, 93, 63, 37, 115, 42, 40, 37, 50, 41, 37, 115, 42, 34, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 32, 61, 32, 108, 119, 114, 40, 115, 119, 91, 49, 93, 41, 32, 45, 45, 32, 116, 104, 101, 114, 101, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 104, 111, 117, 114, 32, 97, 110, 100, 32, 105, 116, 32, 109, 117, 115, 116, 32, 98, 101, 32, 99, 111, 114, 114, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 110, 111, 116, 32, 104, 41, 32, 111, 114, 32, 40, 104, 32, 62, 32, 49, 50, 41, 32, 111, 114, 32, 40, 104, 32, 60, 32, 48, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 101, 114, 114, 111, 114, 95, 105, 110, 118, 40, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 120, 32, 61, 61, 32, 39, 97, 39, 32, 97, 110, 100, 32, 104, 32, 61, 61, 32, 49, 50, 32, 116, 104, 101, 110, 32, 104, 32, 61, 32, 48, 32, 101, 110, 100, 32, 45, 45, 32, 97, 109, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 120, 32, 61, 61, 32, 39, 112, 39, 32, 97, 110, 100, 32, 104, 32, 126, 61, 32, 49, 50, 32, 116, 104, 101, 110, 32, 104, 32, 61, 32, 104, 32, 43, 32, 49, 50, 32, 101, 110, 100, 32, 45, 45, 32, 112, 109, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 32, 101, 114, 114, 111, 114, 95, 115, 121, 110, 40, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 110, 111, 116, 40, 115, 119, 40, 34, 94, 40, 91, 43, 45, 93, 41, 40, 37, 100, 37, 100, 63, 41, 58, 40, 37, 100, 37, 100, 41, 34, 44, 115, 101, 116, 122, 99, 41, 32, 111, 114, 32, 115, 119, 40, 34, 94, 40, 91, 43, 45, 93, 41, 40, 37, 100, 43, 41, 34, 44, 115, 101, 116, 122, 110, 41, 32, 111, 114, 32, 115, 119, 40, 34, 94, 91, 90, 122, 93, 37, 115, 42, 36, 34, 41, 41, 32, 116, 104, 101, 110, 32, 45, 45, 32, 115, 119, 123, 34, 40, 91, 43, 45, 93, 41, 34, 44, 123, 34, 40, 37, 100, 37, 100, 63, 41, 58, 40, 37, 100, 37, 100, 41, 34, 44, 34, 40, 37, 100, 43, 41, 34, 125, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 114, 114, 111, 114, 95, 115, 121, 110, 40, 34, 63, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 115, 119, 40, 34, 94, 37, 115, 42, 34, 41, 32, 32, 117, 110, 116, 105, 108, 32, 115, 119, 58, 102, 105, 110, 105, 115, 104, 40, 41, 10, 32, 32, 32, 32, 45, 45, 101, 108, 115, 101, 32, 112, 114, 105, 110, 116, 40, 34, 36, 73, 115, 111, 40, 68, 97, 116, 101, 124, 84, 105, 109, 101, 124, 90, 111, 110, 101, 41, 34, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 45, 45, 32, 105, 102, 32, 100, 97, 116, 101, 32, 105, 115, 32, 103, 105, 118, 101, 110, 44, 32, 105, 116, 32, 109, 117, 115, 116, 32, 98, 101, 32, 99, 111, 109, 112, 108, 101, 116, 101, 32, 121, 101, 97, 114, 44, 32, 109, 111, 110, 116, 104, 32, 38, 32, 100, 97, 121, 10, 32, 32, 32, 32, 105, 102, 32, 40, 110, 111, 116, 32, 121, 32, 97, 110, 100, 32, 110, 111, 116, 32, 104, 41, 32, 111, 114, 32, 40, 40, 109, 32, 97, 110, 100, 32, 110, 111, 116, 32, 100, 41, 32, 111, 114, 32, 40, 100, 32, 97, 110, 100, 32, 110, 111, 116, 32, 109, 41, 41, 32, 111, 114, 32, 40, 40, 109, 32, 97, 110, 100, 32, 119, 41, 32, 111, 114, 32, 40, 109, 32, 97, 110, 100, 32, 106, 41, 32, 111, 114, 32, 40, 106, 32, 97, 110, 100, 32, 119, 41, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 101, 114, 114, 111, 114, 95, 105, 110, 118, 40, 34, 33, 34, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 45, 45, 32, 102, 105, 120, 32, 109, 111, 110, 116, 104, 10, 32, 32, 32, 32, 105, 102, 32, 109, 32, 116, 104, 101, 110, 32, 109, 32, 61, 32, 109, 32, 45, 32, 49, 32, 101, 110, 100, 10, 32, 32, 32, 32, 45, 45, 32, 102, 105, 120, 32, 121, 101, 97, 114, 32, 105, 102, 32, 119, 101, 32, 97, 114, 101, 32, 111, 110, 32, 66, 67, 69, 10, 32, 32, 32, 32, 105, 102, 32, 101, 32, 97, 110, 100, 32, 101, 32, 60, 32, 48, 32, 97, 110, 100, 32, 121, 32, 62, 32, 48, 32, 116, 104, 101, 110, 32, 121, 32, 61, 32, 49, 32, 45, 32, 121, 32, 101, 110, 100, 10, 32, 32, 32, 32, 45, 45, 32, 32, 99, 114, 101, 97, 116, 101, 32, 100, 97, 116, 101, 32, 111, 98, 106, 101, 99, 116, 10, 32, 32, 32, 32, 100, 110, 32, 61, 32, 40, 121, 32, 97, 110, 100, 32, 40, 40, 119, 32, 97, 110, 100, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 95, 105, 115, 111, 121, 119, 100, 40, 121, 44, 119, 44, 117, 41, 41, 32, 111, 114, 32, 40, 106, 32, 97, 110, 100, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 121, 44, 32, 48, 44, 32, 106, 41, 41, 32, 111, 114, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 121, 44, 32, 109, 44, 32, 100, 41, 41, 41, 32, 111, 114, 32, 68, 65, 89, 78, 85, 77, 95, 68, 69, 70, 10, 32, 32, 32, 32, 100, 102, 32, 61, 32, 109, 97, 107, 101, 100, 97, 121, 102, 114, 99, 40, 104, 32, 111, 114, 32, 48, 44, 32, 114, 32, 111, 114, 32, 48, 44, 32, 115, 32, 111, 114, 32, 48, 44, 32, 48, 41, 32, 43, 32, 40, 40, 122, 32, 111, 114, 32, 48, 41, 42, 84, 73, 67, 75, 83, 80, 69, 82, 77, 73, 78, 41, 10, 32, 32, 32, 32, 45, 45, 112, 114, 105, 110, 116, 40, 34, 90, 111, 110, 101, 34, 44, 104, 44, 114, 44, 115, 44, 122, 44, 109, 44, 100, 44, 121, 44, 100, 102, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 100, 110, 44, 32, 100, 102, 41, 32, 45, 45, 32, 110, 111, 32, 110, 101, 101, 100, 32, 116, 111, 32, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 59, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 95, 102, 114, 111, 109, 116, 97, 98, 108, 101, 40, 118, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 44, 32, 109, 44, 32, 100, 32, 61, 32, 102, 105, 120, 40, 118, 46, 121, 101, 97, 114, 41, 44, 32, 103, 101, 116, 109, 111, 110, 116, 104, 97, 114, 103, 40, 118, 46, 109, 111, 110, 116, 104, 41, 44, 32, 102, 105, 120, 40, 118, 46, 100, 97, 121, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 104, 44, 32, 114, 44, 32, 115, 44, 32, 116, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 118, 46, 104, 111, 117, 114, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 118, 46, 109, 105, 110, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 118, 46, 115, 101, 99, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 118, 46, 116, 105, 99, 107, 115, 41, 10, 32, 32, 32, 32, 45, 45, 32, 97, 116, 108, 101, 97, 115, 116, 32, 116, 104, 101, 114, 101, 32, 105, 115, 32, 116, 105, 109, 101, 32, 111, 114, 32, 99, 111, 109, 112, 108, 101, 116, 101, 32, 100, 97, 116, 101, 10, 32, 32, 32, 32, 105, 102, 32, 40, 121, 32, 111, 114, 32, 109, 32, 111, 114, 32, 100, 41, 32, 97, 110, 100, 32, 40, 110, 111, 116, 40, 121, 32, 97, 110, 100, 32, 109, 32, 97, 110, 100, 32, 100, 41, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 101, 114, 114, 111, 114, 40, 34, 105, 110, 99, 111, 109, 112, 108, 101, 116, 101, 32, 116, 97, 98, 108, 101, 34, 41, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 121, 32, 111, 114, 32, 104, 32, 111, 114, 32, 114, 32, 111, 114, 32, 115, 32, 111, 114, 32, 116, 41, 32, 97, 110, 100, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 121, 32, 97, 110, 100, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 121, 44, 32, 109, 44, 32, 100, 41, 32, 111, 114, 32, 68, 65, 89, 78, 85, 77, 95, 68, 69, 70, 44, 32, 109, 97, 107, 101, 100, 97, 121, 102, 114, 99, 40, 104, 32, 111, 114, 32, 48, 44, 32, 114, 32, 111, 114, 32, 48, 44, 32, 115, 32, 111, 114, 32, 48, 44, 32, 116, 32, 111, 114, 32, 48, 41, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 108, 111, 99, 97, 108, 32, 116, 109, 97, 112, 32, 61, 32, 123, 10, 32, 32, 32, 32, 91, 39, 110, 117, 109, 98, 101, 114, 39, 93, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 41, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 101, 112, 111, 99, 104, 58, 99, 111, 112, 121, 40, 41, 58, 97, 100, 100, 115, 101, 99, 111, 110, 100, 115, 40, 118, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 91, 39, 115, 116, 114, 105, 110, 103, 39, 93, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 41, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 112, 97, 114, 115, 101, 40, 118, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 91, 39, 98, 111, 111, 108, 101, 97, 110, 39, 93, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 41, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 102, 114, 111, 109, 116, 97, 98, 108, 101, 40, 111, 115, 100, 97, 116, 101, 40, 118, 32, 97, 110, 100, 32, 34, 33, 42, 116, 34, 32, 111, 114, 32, 34, 42, 116, 34, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 91, 39, 116, 97, 98, 108, 101, 39, 93, 32, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 41, 32, 108, 111, 99, 97, 108, 32, 114, 101, 102, 32, 61, 32, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 118, 41, 32, 61, 61, 32, 100, 111, 98, 106, 59, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 102, 32, 97, 110, 100, 32, 118, 32, 111, 114, 32, 100, 97, 116, 101, 95, 102, 114, 111, 109, 116, 97, 98, 108, 101, 40, 118, 41, 44, 32, 114, 101, 102, 32, 101, 110, 100, 10, 32, 32, 125, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 95, 103, 101, 116, 100, 111, 98, 106, 40, 118, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 111, 44, 32, 114, 32, 61, 32, 40, 116, 109, 97, 112, 91, 116, 121, 112, 101, 40, 118, 41, 93, 32, 111, 114, 32, 102, 110, 105, 108, 41, 40, 118, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 111, 32, 97, 110, 100, 32, 111, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 32, 111, 114, 32, 101, 114, 114, 111, 114, 34, 105, 110, 118, 97, 108, 105, 100, 32, 100, 97, 116, 101, 32, 116, 105, 109, 101, 32, 118, 97, 108, 117, 101, 34, 41, 44, 32, 114, 32, 45, 45, 32, 105, 102, 32, 114, 32, 105, 115, 32, 116, 114, 117, 101, 32, 116, 104, 101, 110, 32, 111, 32, 105, 115, 32, 97, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 116, 111, 32, 97, 32, 100, 97, 116, 101, 32, 111, 98, 106, 10, 32, 32, 101, 110, 100, 10, 45, 45, 35, 101, 110, 100, 32, 45, 45, 32, 110, 111, 116, 32, 68, 65, 84, 69, 95, 79, 66, 74, 69, 67, 84, 95, 65, 70, 88, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 95, 102, 114, 111, 109, 40, 97, 114, 103, 49, 44, 32, 97, 114, 103, 50, 44, 32, 97, 114, 103, 51, 44, 32, 97, 114, 103, 52, 44, 32, 97, 114, 103, 53, 44, 32, 97, 114, 103, 54, 44, 32, 97, 114, 103, 55, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 44, 32, 109, 44, 32, 100, 32, 61, 32, 102, 105, 120, 40, 97, 114, 103, 49, 41, 44, 32, 103, 101, 116, 109, 111, 110, 116, 104, 97, 114, 103, 40, 97, 114, 103, 50, 41, 44, 32, 102, 105, 120, 40, 97, 114, 103, 51, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 104, 44, 32, 114, 44, 32, 115, 44, 32, 116, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 97, 114, 103, 52, 32, 111, 114, 32, 48, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 97, 114, 103, 53, 32, 111, 114, 32, 48, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 97, 114, 103, 54, 32, 111, 114, 32, 48, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 97, 114, 103, 55, 32, 111, 114, 32, 48, 41, 10, 32, 32, 32, 32, 105, 102, 32, 121, 32, 97, 110, 100, 32, 109, 32, 97, 110, 100, 32, 100, 32, 97, 110, 100, 32, 104, 32, 97, 110, 100, 32, 114, 32, 97, 110, 100, 32, 115, 32, 97, 110, 100, 32, 116, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 121, 44, 32, 109, 44, 32, 100, 41, 44, 32, 109, 97, 107, 101, 100, 97, 121, 102, 114, 99, 40, 104, 44, 32, 114, 44, 32, 115, 44, 32, 116, 41, 41, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 101, 114, 114, 111, 114, 95, 97, 114, 103, 40, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 10, 32, 45, 45, 91, 91, 32, 84, 72, 69, 32, 68, 65, 84, 69, 32, 79, 66, 74, 69, 67, 84, 32, 77, 69, 84, 72, 79, 68, 83, 32, 93, 93, 45, 45, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 110, 44, 32, 100, 102, 32, 61, 32, 102, 105, 120, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 44, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 10, 32, 32, 32, 32, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 44, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 32, 61, 32, 100, 110, 32, 43, 32, 102, 108, 111, 111, 114, 40, 100, 102, 47, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 41, 44, 32, 109, 111, 100, 40, 100, 102, 44, 32, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 100, 110, 32, 62, 61, 32, 68, 65, 89, 78, 85, 77, 95, 77, 73, 78, 32, 97, 110, 100, 32, 100, 110, 32, 60, 61, 32, 68, 65, 89, 78, 85, 77, 95, 77, 65, 88, 41, 32, 97, 110, 100, 32, 115, 101, 108, 102, 32, 111, 114, 32, 101, 114, 114, 111, 114, 40, 34, 100, 97, 116, 101, 32, 98, 101, 121, 111, 110, 100, 32, 105, 109, 112, 111, 115, 101, 100, 32, 108, 105, 109, 105, 116, 115, 58, 34, 46, 46, 115, 101, 108, 102, 41, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 100, 97, 116, 101, 40, 41, 32, 32, 108, 111, 99, 97, 108, 32, 121, 44, 32, 109, 44, 32, 100, 32, 61, 32, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 32, 114, 101, 116, 117, 114, 110, 32, 121, 44, 32, 109, 43, 49, 44, 32, 100, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 116, 105, 109, 101, 40, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 98, 114, 101, 97, 107, 100, 97, 121, 102, 114, 99, 40, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 41, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 99, 108, 111, 99, 107, 104, 111, 117, 114, 40, 41, 32, 108, 111, 99, 97, 108, 32, 104, 32, 61, 32, 115, 101, 108, 102, 58, 103, 101, 116, 104, 111, 117, 114, 115, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 104, 62, 49, 50, 32, 97, 110, 100, 32, 109, 111, 100, 40, 104, 44, 49, 50, 41, 32, 111, 114, 32, 40, 104, 61, 61, 48, 32, 97, 110, 100, 32, 49, 50, 32, 111, 114, 32, 104, 41, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 121, 101, 97, 114, 100, 97, 121, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 121, 101, 97, 114, 100, 97, 121, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 32, 43, 32, 49, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 119, 101, 101, 107, 100, 97, 121, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 119, 101, 101, 107, 100, 97, 121, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 32, 43, 32, 49, 32, 101, 110, 100, 32, 32, 32, 45, 45, 32, 105, 110, 32, 108, 117, 97, 32, 119, 101, 101, 107, 100, 97, 121, 32, 105, 115, 32, 115, 117, 110, 100, 97, 121, 32, 61, 32, 49, 44, 32, 109, 111, 110, 100, 97, 121, 32, 61, 32, 50, 32, 46, 46, 46, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 121, 101, 97, 114, 40, 41, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 44, 95, 44, 95, 32, 61, 32, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 109, 111, 110, 116, 104, 40, 41, 32, 108, 111, 99, 97, 108, 32, 95, 44, 114, 44, 95, 32, 61, 32, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 43, 49, 32, 101, 110, 100, 45, 45, 32, 105, 110, 32, 108, 117, 97, 32, 109, 111, 110, 116, 104, 32, 105, 115, 32, 49, 32, 98, 97, 115, 101, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 100, 97, 121, 40, 41, 32, 32, 32, 108, 111, 99, 97, 108, 32, 95, 44, 95, 44, 114, 32, 61, 32, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 104, 111, 117, 114, 115, 40, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 109, 111, 100, 40, 102, 108, 111, 111, 114, 40, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 47, 84, 73, 67, 75, 83, 80, 69, 82, 72, 79, 85, 82, 41, 44, 72, 79, 85, 82, 80, 69, 82, 68, 65, 89, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 109, 105, 110, 117, 116, 101, 115, 40, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 109, 111, 100, 40, 102, 108, 111, 111, 114, 40, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 47, 84, 73, 67, 75, 83, 80, 69, 82, 77, 73, 78, 41, 44, 32, 77, 73, 78, 80, 69, 82, 72, 79, 85, 82, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 115, 101, 99, 111, 110, 100, 115, 40, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 109, 111, 100, 40, 102, 108, 111, 111, 114, 40, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 47, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 32, 41, 44, 83, 69, 67, 80, 69, 82, 77, 73, 78, 41, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 102, 114, 97, 99, 115, 101, 99, 40, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 109, 111, 100, 40, 102, 108, 111, 111, 114, 40, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 47, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 32, 41, 44, 83, 69, 67, 80, 69, 82, 77, 73, 78, 41, 43, 40, 109, 111, 100, 40, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 44, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 41, 47, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 116, 105, 99, 107, 115, 40, 117, 41, 32, 32, 108, 111, 99, 97, 108, 32, 120, 32, 61, 32, 109, 111, 100, 40, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 44, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 41, 32, 114, 101, 116, 117, 114, 110, 32, 117, 32, 97, 110, 100, 32, 40, 40, 120, 42, 117, 41, 47, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 41, 32, 111, 114, 32, 120, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 119, 101, 101, 107, 110, 117, 109, 98, 101, 114, 40, 119, 100, 98, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 100, 44, 32, 121, 100, 32, 61, 32, 119, 101, 101, 107, 100, 97, 121, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 44, 32, 121, 101, 97, 114, 100, 97, 121, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 10, 32, 32, 32, 32, 105, 102, 32, 119, 100, 98, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 119, 100, 98, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 119, 100, 98, 41, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 119, 100, 98, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 100, 32, 61, 32, 109, 111, 100, 40, 119, 100, 45, 40, 119, 100, 98, 45, 49, 41, 44, 55, 41, 45, 45, 32, 115, 104, 105, 102, 116, 32, 116, 104, 101, 32, 119, 101, 101, 107, 32, 100, 97, 121, 32, 98, 97, 115, 101, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 101, 114, 114, 111, 114, 95, 97, 114, 103, 40, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 121, 100, 32, 60, 32, 119, 100, 32, 97, 110, 100, 32, 48, 41, 32, 111, 114, 32, 40, 102, 108, 111, 111, 114, 40, 121, 100, 47, 55, 41, 32, 43, 32, 40, 40, 109, 111, 100, 40, 121, 100, 44, 32, 55, 41, 62, 61, 119, 100, 41, 32, 97, 110, 100, 32, 49, 32, 111, 114, 32, 48, 41, 41, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 105, 115, 111, 119, 101, 101, 107, 100, 97, 121, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 109, 111, 100, 40, 119, 101, 101, 107, 100, 97, 121, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 45, 49, 44, 55, 41, 43, 49, 32, 101, 110, 100, 32, 32, 32, 45, 45, 32, 115, 117, 110, 100, 97, 121, 32, 61, 32, 55, 44, 32, 109, 111, 110, 100, 97, 121, 32, 61, 32, 49, 32, 46, 46, 46, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 105, 115, 111, 119, 101, 101, 107, 110, 117, 109, 98, 101, 114, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 40, 105, 115, 111, 119, 121, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 105, 115, 111, 121, 101, 97, 114, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 105, 115, 111, 121, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 105, 115, 111, 100, 97, 116, 101, 40, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 44, 32, 121, 32, 61, 32, 105, 115, 111, 119, 121, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 121, 44, 32, 119, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 105, 115, 111, 119, 101, 101, 107, 100, 97, 121, 40, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 101, 116, 105, 115, 111, 121, 101, 97, 114, 40, 121, 44, 32, 119, 44, 32, 100, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 121, 44, 32, 99, 119, 44, 32, 99, 100, 32, 61, 32, 115, 101, 108, 102, 58, 103, 101, 116, 105, 115, 111, 100, 97, 116, 101, 40, 41, 10, 32, 32, 32, 32, 105, 102, 32, 121, 32, 116, 104, 101, 110, 32, 99, 121, 32, 61, 32, 102, 105, 120, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 121, 41, 41, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 119, 32, 116, 104, 101, 110, 32, 99, 119, 32, 61, 32, 102, 105, 120, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 119, 41, 41, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 100, 32, 116, 104, 101, 110, 32, 99, 100, 32, 61, 32, 102, 105, 120, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 100, 41, 41, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 99, 121, 32, 97, 110, 100, 32, 99, 119, 32, 97, 110, 100, 32, 99, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 32, 61, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 95, 105, 115, 111, 121, 119, 100, 40, 99, 121, 44, 32, 99, 119, 44, 32, 99, 100, 41, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 101, 114, 114, 111, 114, 95, 97, 114, 103, 40, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 101, 116, 105, 115, 111, 119, 101, 101, 107, 100, 97, 121, 40, 100, 41, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 115, 101, 116, 105, 115, 111, 121, 101, 97, 114, 40, 110, 105, 108, 44, 32, 110, 105, 108, 44, 32, 100, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 101, 116, 105, 115, 111, 119, 101, 101, 107, 110, 117, 109, 98, 101, 114, 40, 119, 44, 100, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 115, 101, 116, 105, 115, 111, 121, 101, 97, 114, 40, 110, 105, 108, 44, 32, 119, 44, 32, 100, 41, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 101, 116, 121, 101, 97, 114, 40, 121, 44, 32, 109, 44, 32, 100, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 121, 44, 32, 99, 109, 44, 32, 99, 100, 32, 61, 32, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 10, 32, 32, 32, 32, 105, 102, 32, 121, 32, 116, 104, 101, 110, 32, 99, 121, 32, 61, 32, 102, 105, 120, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 121, 41, 41, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 109, 32, 116, 104, 101, 110, 32, 99, 109, 32, 61, 32, 103, 101, 116, 109, 111, 110, 116, 104, 97, 114, 103, 40, 109, 41, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 100, 32, 116, 104, 101, 110, 32, 99, 100, 32, 61, 32, 102, 105, 120, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 100, 41, 41, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 99, 121, 32, 97, 110, 100, 32, 99, 109, 32, 97, 110, 100, 32, 99, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 32, 32, 61, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 99, 121, 44, 32, 99, 109, 44, 32, 99, 100, 41, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 101, 114, 114, 111, 114, 95, 97, 114, 103, 40, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 101, 116, 109, 111, 110, 116, 104, 40, 109, 44, 32, 100, 41, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 115, 101, 116, 121, 101, 97, 114, 40, 110, 105, 108, 44, 32, 109, 44, 32, 100, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 101, 116, 100, 97, 121, 40, 100, 41, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 115, 101, 116, 121, 101, 97, 114, 40, 110, 105, 108, 44, 32, 110, 105, 108, 44, 32, 100, 41, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 101, 116, 104, 111, 117, 114, 115, 40, 104, 44, 32, 109, 44, 32, 115, 44, 32, 116, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 104, 44, 99, 109, 44, 99, 115, 44, 99, 107, 32, 61, 32, 98, 114, 101, 97, 107, 100, 97, 121, 102, 114, 99, 40, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 41, 10, 32, 32, 32, 32, 99, 104, 44, 32, 99, 109, 44, 32, 99, 115, 44, 32, 99, 107, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 104, 32, 111, 114, 32, 99, 104, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 109, 32, 111, 114, 32, 99, 109, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 115, 32, 111, 114, 32, 99, 115, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 116, 32, 111, 114, 32, 99, 107, 41, 10, 32, 32, 32, 32, 105, 102, 32, 99, 104, 32, 97, 110, 100, 32, 99, 109, 32, 97, 110, 100, 32, 99, 115, 32, 97, 110, 100, 32, 99, 107, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 32, 61, 32, 109, 97, 107, 101, 100, 97, 121, 102, 114, 99, 40, 99, 104, 44, 32, 99, 109, 44, 32, 99, 115, 44, 32, 99, 107, 41, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101]);
fileData1.push.apply(fileData1, [108, 102, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 101, 114, 114, 111, 114, 95, 97, 114, 103, 40, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 101, 116, 109, 105, 110, 117, 116, 101, 115, 40, 109, 44, 115, 44, 116, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 115, 101, 116, 104, 111, 117, 114, 115, 40, 110, 105, 108, 44, 32, 32, 32, 109, 44, 32, 32, 32, 115, 44, 32, 116, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 101, 116, 115, 101, 99, 111, 110, 100, 115, 40, 115, 44, 32, 116, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 115, 101, 116, 104, 111, 117, 114, 115, 40, 110, 105, 108, 44, 32, 110, 105, 108, 44, 32, 32, 32, 115, 44, 32, 116, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 101, 116, 116, 105, 99, 107, 115, 40, 116, 41, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 115, 101, 116, 104, 111, 117, 114, 115, 40, 110, 105, 108, 44, 32, 110, 105, 108, 44, 32, 110, 105, 108, 44, 32, 116, 41, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 112, 97, 110, 116, 105, 99, 107, 115, 40, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 42, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 32, 43, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 112, 97, 110, 115, 101, 99, 111, 110, 100, 115, 40, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 42, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 32, 43, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 41, 47, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 112, 97, 110, 109, 105, 110, 117, 116, 101, 115, 40, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 42, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 32, 43, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 41, 47, 84, 73, 67, 75, 83, 80, 69, 82, 77, 73, 78, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 112, 97, 110, 104, 111, 117, 114, 115, 40, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 42, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 32, 43, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 41, 47, 84, 73, 67, 75, 83, 80, 69, 82, 72, 79, 85, 82, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 115, 112, 97, 110, 100, 97, 121, 115, 40, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 42, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 32, 43, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 41, 47, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 97, 100, 100, 121, 101, 97, 114, 115, 40, 121, 44, 32, 109, 44, 32, 100, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 121, 44, 32, 99, 109, 44, 32, 99, 100, 32, 61, 32, 98, 114, 101, 97, 107, 100, 97, 121, 110, 117, 109, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 10, 32, 32, 32, 32, 105, 102, 32, 121, 32, 116, 104, 101, 110, 32, 121, 32, 61, 32, 102, 105, 120, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 121, 41, 41, 101, 108, 115, 101, 32, 121, 32, 61, 32, 48, 32, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 109, 32, 116, 104, 101, 110, 32, 109, 32, 61, 32, 102, 105, 120, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 109, 41, 41, 101, 108, 115, 101, 32, 109, 32, 61, 32, 48, 32, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 100, 32, 116, 104, 101, 110, 32, 100, 32, 61, 32, 102, 105, 120, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 100, 41, 41, 101, 108, 115, 101, 32, 100, 32, 61, 32, 48, 32, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 121, 32, 97, 110, 100, 32, 109, 32, 97, 110, 100, 32, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 32, 32, 61, 32, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 99, 121, 43, 121, 44, 32, 99, 109, 43, 109, 44, 32, 99, 100, 43, 100, 41, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 101, 114, 114, 111, 114, 95, 97, 114, 103, 40, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 97, 100, 100, 109, 111, 110, 116, 104, 115, 40, 109, 44, 32, 100, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 97, 100, 100, 121, 101, 97, 114, 115, 40, 110, 105, 108, 44, 32, 109, 44, 32, 100, 41, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 95, 97, 100, 100, 100, 97, 121, 102, 114, 99, 40, 115, 101, 108, 102, 44, 110, 44, 112, 116, 44, 112, 100, 41, 10, 32, 32, 32, 32, 110, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 110, 41, 10, 32, 32, 32, 32, 105, 102, 32, 110, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 120, 32, 61, 32, 102, 108, 111, 111, 114, 40, 110, 47, 112, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 32, 61, 32, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 32, 43, 32, 120, 59, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 32, 61, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 32, 43, 32, 40, 110, 45, 120, 42, 112, 100, 41, 42, 112, 116, 59, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 101, 114, 114, 111, 114, 95, 97, 114, 103, 40, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 97, 100, 100, 100, 97, 121, 115, 40, 110, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 111, 98, 106, 95, 97, 100, 100, 100, 97, 121, 102, 114, 99, 40, 115, 101, 108, 102, 44, 110, 44, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 44, 49, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 97, 100, 100, 104, 111, 117, 114, 115, 40, 110, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 111, 98, 106, 95, 97, 100, 100, 100, 97, 121, 102, 114, 99, 40, 115, 101, 108, 102, 44, 110, 44, 84, 73, 67, 75, 83, 80, 69, 82, 72, 79, 85, 82, 44, 72, 79, 85, 82, 80, 69, 82, 68, 65, 89, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 97, 100, 100, 109, 105, 110, 117, 116, 101, 115, 40, 110, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 111, 98, 106, 95, 97, 100, 100, 100, 97, 121, 102, 114, 99, 40, 115, 101, 108, 102, 44, 110, 44, 84, 73, 67, 75, 83, 80, 69, 82, 77, 73, 78, 44, 77, 73, 78, 80, 69, 82, 68, 65, 89, 41, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 97, 100, 100, 115, 101, 99, 111, 110, 100, 115, 40, 110, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 111, 98, 106, 95, 97, 100, 100, 100, 97, 121, 102, 114, 99, 40, 115, 101, 108, 102, 44, 110, 44, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 44, 83, 69, 67, 80, 69, 82, 68, 65, 89, 41, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 97, 100, 100, 116, 105, 99, 107, 115, 40, 110, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 111, 98, 106, 95, 97, 100, 100, 100, 97, 121, 102, 114, 99, 40, 115, 101, 108, 102, 44, 110, 44, 49, 44, 84, 73, 67, 75, 83, 80, 69, 82, 68, 65, 89, 41, 32, 101, 110, 100, 10, 32, 32, 108, 111, 99, 97, 108, 32, 116, 118, 115, 112, 101, 99, 32, 61, 32, 123, 10, 32, 32, 32, 32, 45, 45, 32, 65, 98, 98, 114, 101, 118, 105, 97, 116, 101, 100, 32, 119, 101, 101, 107, 100, 97, 121, 32, 110, 97, 109, 101, 32, 40, 83, 117, 110, 41, 10, 32, 32, 32, 32, 91, 39, 37, 97, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 108, 95, 119, 101, 101, 107, 100, 97, 121, 115, 91, 119, 101, 101, 107, 100, 97, 121, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 32, 43, 32, 55, 93, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 70, 117, 108, 108, 32, 119, 101, 101, 107, 100, 97, 121, 32, 110, 97, 109, 101, 32, 40, 83, 117, 110, 100, 97, 121, 41, 10, 32, 32, 32, 32, 91, 39, 37, 65, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 108, 95, 119, 101, 101, 107, 100, 97, 121, 115, 91, 119, 101, 101, 107, 100, 97, 121, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 41, 93, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 65, 98, 98, 114, 101, 118, 105, 97, 116, 101, 100, 32, 109, 111, 110, 116, 104, 32, 110, 97, 109, 101, 32, 40, 68, 101, 99, 41, 10, 32, 32, 32, 32, 91, 39, 37, 98, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 108, 95, 109, 111, 110, 116, 104, 115, 91, 115, 101, 108, 102, 58, 103, 101, 116, 109, 111, 110, 116, 104, 40, 41, 32, 45, 32, 49, 32, 43, 32, 49, 50, 93, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 70, 117, 108, 108, 32, 109, 111, 110, 116, 104, 32, 110, 97, 109, 101, 32, 40, 68, 101, 99, 101, 109, 98, 101, 114, 41, 10, 32, 32, 32, 32, 91, 39, 37, 66, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 108, 95, 109, 111, 110, 116, 104, 115, 91, 115, 101, 108, 102, 58, 103, 101, 116, 109, 111, 110, 116, 104, 40, 41, 32, 45, 32, 49, 93, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 89, 101, 97, 114, 47, 49, 48, 48, 32, 40, 49, 57, 44, 32, 50, 48, 44, 32, 51, 48, 41, 10, 32, 32, 32, 32, 91, 39, 37, 67, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 102, 105, 120, 40, 115, 101, 108, 102, 58, 103, 101, 116, 121, 101, 97, 114, 40, 41, 47, 49, 48, 48, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 84, 104, 101, 32, 100, 97, 121, 32, 111, 102, 32, 116, 104, 101, 32, 109, 111, 110, 116, 104, 32, 97, 115, 32, 97, 32, 110, 117, 109, 98, 101, 114, 32, 40, 114, 97, 110, 103, 101, 32, 49, 32, 45, 32, 51, 49, 41, 10, 32, 32, 32, 32, 91, 39, 37, 100, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 100, 97, 121, 40, 41, 41, 32, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 121, 101, 97, 114, 32, 102, 111, 114, 32, 73, 83, 79, 32, 56, 54, 48, 49, 32, 119, 101, 101, 107, 44, 32, 102, 114, 111, 109, 32, 48, 48, 32, 40, 55, 57, 41, 10, 32, 32, 32, 32, 91, 39, 37, 103, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 109, 111, 100, 40, 115, 101, 108, 102, 58, 103, 101, 116, 105, 115, 111, 121, 101, 97, 114, 40, 41, 32, 44, 49, 48, 48, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 121, 101, 97, 114, 32, 102, 111, 114, 32, 73, 83, 79, 32, 56, 54, 48, 49, 32, 119, 101, 101, 107, 44, 32, 102, 114, 111, 109, 32, 48, 48, 48, 48, 32, 40, 49, 57, 55, 57, 41, 10, 32, 32, 32, 32, 91, 39, 37, 71, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 52, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 105, 115, 111, 121, 101, 97, 114, 40, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 115, 97, 109, 101, 32, 97, 115, 32, 37, 98, 10, 32, 32, 32, 32, 91, 39, 37, 104, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 98, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 104, 111, 117, 114, 32, 111, 102, 32, 116, 104, 101, 32, 50, 52, 45, 104, 111, 117, 114, 32, 100, 97, 121, 44, 32, 102, 114, 111, 109, 32, 48, 48, 32, 40, 48, 54, 41, 10, 32, 32, 32, 32, 91, 39, 37, 72, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 104, 111, 117, 114, 115, 40, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 84, 104, 101, 32, 32, 104, 111, 117, 114, 32, 97, 115, 32, 97, 32, 110, 117, 109, 98, 101, 114, 32, 117, 115, 105, 110, 103, 32, 97, 32, 49, 50, 45, 104, 111, 117, 114, 32, 99, 108, 111, 99, 107, 32, 40, 48, 49, 32, 45, 32, 49, 50, 41, 10, 32, 32, 32, 32, 91, 39, 37, 73, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 99, 108, 111, 99, 107, 104, 111, 117, 114, 40, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 84, 104, 101, 32, 100, 97, 121, 32, 111, 102, 32, 116, 104, 101, 32, 121, 101, 97, 114, 32, 97, 115, 32, 97, 32, 110, 117, 109, 98, 101, 114, 32, 40, 48, 48, 49, 32, 45, 32, 51, 54, 54, 41, 10, 32, 32, 32, 32, 91, 39, 37, 106, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 51, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 121, 101, 97, 114, 100, 97, 121, 40, 41, 41, 32, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 77, 111, 110, 116, 104, 32, 111, 102, 32, 116, 104, 101, 32, 121, 101, 97, 114, 44, 32, 102, 114, 111, 109, 32, 48, 49, 32, 116, 111, 32, 49, 50, 10, 32, 32, 32, 32, 91, 39, 37, 109, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 109, 111, 110, 116, 104, 40, 41, 41, 32, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 77, 105, 110, 117, 116, 101, 115, 32, 97, 102, 116, 101, 114, 32, 116, 104, 101, 32, 104, 111, 117, 114, 32, 53, 53, 10, 32, 32, 32, 32, 91, 39, 37, 77, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 109, 105, 110, 117, 116, 101, 115, 40, 41, 41, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 65, 77, 47, 80, 77, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 32, 40, 65, 77, 41, 10, 32, 32, 32, 32, 91, 39, 37, 112, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 108, 95, 109, 101, 114, 105, 100, 105, 97, 110, 91, 115, 101, 108, 102, 58, 103, 101, 116, 104, 111, 117, 114, 115, 40, 41, 32, 62, 32, 49, 49, 32, 97, 110, 100, 32, 49, 32, 111, 114, 32, 45, 49, 93, 32, 101, 110, 100, 44, 32, 45, 45, 65, 77, 47, 80, 77, 32, 105, 110, 100, 105, 99, 97, 116, 111, 114, 32, 40, 65, 77, 41, 10, 32, 32, 32, 32, 45, 45, 32, 84, 104, 101, 32, 115, 101, 99, 111, 110, 100, 32, 97, 115, 32, 97, 32, 110, 117, 109, 98, 101, 114, 32, 40, 53, 57, 44, 32, 50, 48, 32, 44, 32, 48, 49, 41, 10, 32, 32, 32, 32, 91, 39, 37, 83, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 115, 101, 99, 111, 110, 100, 115, 40, 41, 41, 32, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 73, 83, 79, 32, 56, 54, 48, 49, 32, 100, 97, 121, 32, 111, 102, 32, 116, 104, 101, 32, 119, 101, 101, 107, 44, 32, 116, 111, 32, 55, 32, 102, 111, 114, 32, 83, 117, 110, 100, 97, 121, 32, 40, 55, 44, 32, 49, 41, 10, 32, 32, 32, 32, 91, 39, 37, 117, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 103, 101, 116, 105, 115, 111, 119, 101, 101, 107, 100, 97, 121, 40, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 83, 117, 110, 100, 97, 121, 32, 119, 101, 101, 107, 32, 111, 102, 32, 116, 104, 101, 32, 121, 101, 97, 114, 44, 32, 102, 114, 111, 109, 32, 48, 48, 32, 40, 52, 56, 41, 10, 32, 32, 32, 32, 91, 39, 37, 85, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 119, 101, 101, 107, 110, 117, 109, 98, 101, 114, 40, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 73, 83, 79, 32, 56, 54, 48, 49, 32, 119, 101, 101, 107, 32, 111, 102, 32, 116, 104, 101, 32, 121, 101, 97, 114, 44, 32, 102, 114, 111, 109, 32, 48, 49, 32, 40, 52, 56, 41, 10, 32, 32, 32, 32, 91, 39, 37, 86, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 105, 115, 111, 119, 101, 101, 107, 110, 117, 109, 98, 101, 114, 40, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 84, 104, 101, 32, 100, 97, 121, 32, 111, 102, 32, 116, 104, 101, 32, 119, 101, 101, 107, 32, 97, 115, 32, 97, 32, 100, 101, 99, 105, 109, 97, 108, 44, 32, 83, 117, 110, 100, 97, 121, 32, 98, 101, 105, 110, 103, 32, 48, 10, 32, 32, 32, 32, 91, 39, 37, 119, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 103, 101, 116, 119, 101, 101, 107, 100, 97, 121, 40, 41, 32, 45, 32, 49, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 77, 111, 110, 100, 97, 121, 32, 119, 101, 101, 107, 32, 111, 102, 32, 116, 104, 101, 32, 121, 101, 97, 114, 44, 32, 102, 114, 111, 109, 32, 48, 48, 32, 40, 52, 56, 41, 10, 32, 32, 32, 32, 91, 39, 37, 87, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 119, 101, 101, 107, 110, 117, 109, 98, 101, 114, 40, 50, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 84, 104, 101, 32, 121, 101, 97, 114, 32, 97, 115, 32, 97, 32, 110, 117, 109, 98, 101, 114, 32, 119, 105, 116, 104, 111, 117, 116, 32, 97, 32, 99, 101, 110, 116, 117, 114, 121, 32, 40, 114, 97, 110, 103, 101, 32, 48, 48, 32, 116, 111, 32, 57, 57, 41, 10, 32, 32, 32, 32, 91, 39, 37, 121, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 50, 100, 34, 44, 32, 109, 111, 100, 40, 115, 101, 108, 102, 58, 103, 101, 116, 121, 101, 97, 114, 40, 41, 32, 44, 49, 48, 48, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 89, 101, 97, 114, 32, 119, 105, 116, 104, 32, 99, 101, 110, 116, 117, 114, 121, 32, 40, 50, 48, 48, 48, 44, 32, 49, 57, 49, 52, 44, 32, 48, 51, 50, 53, 44, 32, 48, 48, 48, 49, 41, 10, 32, 32, 32, 32, 91, 39, 37, 89, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 52, 100, 34, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 121, 101, 97, 114, 40, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 84, 105, 109, 101, 32, 122, 111, 110, 101, 32, 111, 102, 102, 115, 101, 116, 44, 32, 116, 104, 101, 32, 100, 97, 116, 101, 32, 111, 98, 106, 101, 99, 116, 32, 105, 115, 32, 97, 115, 115, 117, 109, 101, 100, 32, 108, 111, 99, 97, 108, 32, 116, 105, 109, 101, 32, 40, 43, 49, 48, 48, 48, 44, 32, 45, 48, 50, 51, 48, 41, 10, 32, 32, 32, 32, 91, 39, 37, 122, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 108, 111, 99, 97, 108, 32, 98, 32, 61, 32, 45, 115, 101, 108, 102, 58, 103, 101, 116, 98, 105, 97, 115, 40, 41, 59, 32, 108, 111, 99, 97, 108, 32, 120, 32, 61, 32, 97, 98, 115, 40, 98, 41, 59, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 115, 37, 46, 52, 100, 34, 44, 32, 98, 32, 60, 32, 48, 32, 97, 110, 100, 32, 34, 45, 34, 32, 111, 114, 32, 34, 43, 34, 44, 32, 102, 105, 120, 40, 120, 47, 54, 48, 41, 42, 49, 48, 48, 32, 43, 32, 102, 108, 111, 111, 114, 40, 109, 111, 100, 40, 120, 44, 54, 48, 41, 41, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 84, 105, 109, 101, 32, 122, 111, 110, 101, 32, 110, 97, 109, 101, 44, 32, 116, 104, 101, 32, 100, 97, 116, 101, 32, 111, 98, 106, 101, 99, 116, 32, 105, 115, 32, 97, 115, 115, 117, 109, 101, 100, 32, 108, 111, 99, 97, 108, 32, 116, 105, 109, 101, 10, 32, 32, 32, 32, 91, 39, 37, 90, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 103, 101, 116, 116, 122, 110, 97, 109, 101, 40, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 77, 105, 115, 99, 32, 45, 45, 10, 32, 32, 32, 32, 45, 45, 32, 89, 101, 97, 114, 44, 32, 105, 102, 32, 121, 101, 97, 114, 32, 105, 115, 32, 105, 110, 32, 66, 67, 69, 44, 32, 112, 114, 105, 110, 116, 115, 32, 116, 104, 101, 32, 66, 67, 69, 32, 89, 101, 97, 114, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 44, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 32, 114, 101, 115, 117, 108, 116, 32, 105, 115, 32, 115, 105, 109, 105, 108, 97, 114, 32, 116, 111, 32, 34, 37, 89, 34, 32, 40, 49, 32, 66, 67, 69, 44, 32, 52, 48, 32, 66, 67, 69, 41, 10, 32, 32, 32, 32, 91, 39, 37, 92, 98, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 108, 111, 99, 97, 108, 32, 120, 32, 61, 32, 115, 101, 108, 102, 58, 103, 101, 116, 121, 101, 97, 114, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 46, 52, 100, 37, 115, 34, 44, 32, 120, 62, 48, 32, 97, 110, 100, 32, 120, 32, 111, 114, 32, 40, 45, 120, 43, 49, 41, 44, 32, 120, 62, 48, 32, 97, 110, 100, 32, 34, 34, 32, 111, 114, 32, 34, 32, 66, 67, 69, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 83, 101, 99, 111, 110, 100, 115, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 40, 53, 57, 46, 57, 57, 56, 44, 32, 48, 49, 46, 49, 50, 51, 41, 10, 32, 32, 32, 32, 91, 39, 37, 92, 102, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 108, 111, 99, 97, 108, 32, 120, 32, 61, 32, 115, 101, 108, 102, 58, 103, 101, 116, 102, 114, 97, 99, 115, 101, 99, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 40, 34, 37, 115, 37, 46, 57, 102, 34, 44, 120, 32, 62, 61, 32, 49, 48, 32, 97, 110, 100, 32, 34, 34, 32, 111, 114, 32, 34, 48, 34, 44, 32, 120, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 112, 101, 114, 99, 101, 110, 116, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 37, 10, 32, 32, 32, 32, 91, 39, 37, 37, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 34, 37, 34, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 71, 114, 111, 117, 112, 32, 83, 112, 101, 99, 32, 45, 45, 10, 32, 32, 32, 32, 45, 45, 32, 49, 50, 45, 104, 111, 117, 114, 32, 116, 105, 109, 101, 44, 32, 102, 114, 111, 109, 32, 48, 49, 58, 48, 48, 58, 48, 48, 32, 65, 77, 32, 40, 48, 54, 58, 53, 53, 58, 49, 53, 32, 65, 77, 41, 59, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 73, 58, 37, 77, 58, 37, 83, 32, 37, 112, 34, 10, 32, 32, 32, 32, 91, 39, 37, 114, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 73, 58, 37, 77, 58, 37, 83, 32, 37, 112, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 104, 111, 117, 114, 58, 109, 105, 110, 117, 116, 101, 44, 32, 102, 114, 111, 109, 32, 48, 49, 58, 48, 48, 32, 40, 48, 54, 58, 53, 53, 41, 59, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 73, 58, 37, 77, 34, 10, 32, 32, 32, 32, 91, 39, 37, 82, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 73, 58, 37, 77, 34, 41, 32, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 50, 52, 45, 104, 111, 117, 114, 32, 116, 105, 109, 101, 44, 32, 102, 114, 111, 109, 32, 48, 48, 58, 48, 48, 58, 48, 48, 32, 40, 48, 54, 58, 53, 53, 58, 49, 53, 41, 59, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 72, 58, 37, 77, 58, 37, 83, 34, 10, 32, 32, 32, 32, 91, 39, 37, 84, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 72, 58, 37, 77, 58, 37, 83, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 109, 111, 110, 116, 104, 47, 100, 97, 121, 47, 121, 101, 97, 114, 32, 102, 114, 111, 109, 32, 48, 49, 47, 48, 49, 47, 48, 48, 32, 40, 49, 50, 47, 48, 50, 47, 55, 57, 41, 59, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 109, 47, 37, 100, 47, 37, 121, 34, 10, 32, 32, 32, 32, 91, 39, 37, 68, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 109, 47, 37, 100, 47, 37, 121, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 121, 101, 97, 114, 45, 109, 111, 110, 116, 104, 45, 100, 97, 121, 32, 40, 49, 57, 55, 57, 45, 49, 50, 45, 48, 50, 41, 59, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 89, 45, 37, 109, 45, 37, 100, 34, 10, 32, 32, 32, 32, 91, 39, 37, 70, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 89, 45, 37, 109, 45, 37, 100, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 84, 104, 101, 32, 112, 114, 101, 102, 101, 114, 114, 101, 100, 32, 100, 97, 116, 101, 32, 97, 110, 100, 32, 116, 105, 109, 101, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 59, 32, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 120, 32, 37, 88, 34, 10, 32, 32, 32, 32, 91, 39, 37, 99, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 120, 32, 37, 88, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 84, 104, 101, 32, 112, 114, 101, 102, 101, 114, 114, 101, 100, 32, 100, 97, 116, 101, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 44, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 97, 32, 37, 98, 32, 37, 100, 32, 37, 92, 98, 34, 10, 32, 32, 32, 32, 91, 39, 37, 120, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 97, 32, 37, 98, 32, 37, 100, 32, 37, 92, 98, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 84, 104, 101, 32, 112, 114, 101, 102, 101, 114, 114, 101, 100, 32, 116, 105, 109, 101, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 44, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 72, 58, 37, 77, 58, 37, 92, 102, 34, 10, 32, 32, 32, 32, 91, 39, 37, 88, 39, 93, 61, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 72, 58, 37, 77, 58, 37, 92, 102, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 71, 114, 111, 117, 112, 83, 112, 101, 99, 32, 45, 45, 10, 32, 32, 32, 32, 45, 45, 32, 73, 115, 111, 32, 102, 111, 114, 109, 97, 116, 44, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 89, 45, 37, 109, 45, 37, 100, 84, 37, 84, 34, 10, 32, 32, 32, 32, 91, 39, 36, 123, 105, 115, 111, 125, 39, 93, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 89, 45, 37, 109, 45, 37, 100, 84, 37, 84, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 104, 116, 116, 112, 32, 102, 111, 114, 109, 97, 116, 44, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 97, 44, 32, 37, 100, 32, 37, 98, 32, 37, 89, 32, 37, 84, 32, 71, 77, 84, 34, 10, 32, 32, 32, 32, 91, 39, 36, 123, 104, 116, 116, 112, 125, 39, 93, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 97, 44, 32, 37, 100, 32, 37, 98, 32, 37, 89, 32, 37, 84, 32, 71, 77, 84, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 99, 116, 105, 109, 101, 32, 102, 111, 114, 109, 97, 116, 44, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 97, 32, 37, 98, 32, 37, 100, 32, 37, 84, 32, 71, 77, 84, 32, 37, 89, 34, 10, 32, 32, 32, 32, 91, 39, 36, 123, 99, 116, 105, 109, 101, 125, 39, 93, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 97, 32, 37, 98, 32, 37, 100, 32, 37, 84, 32, 71, 77, 84, 32, 37, 89, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 82, 70, 67, 56, 53, 48, 32, 102, 111, 114, 109, 97, 116, 44, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 65, 44, 32, 37, 100, 45, 37, 98, 45, 37, 121, 32, 37, 84, 32, 71, 77, 84, 34, 10, 32, 32, 32, 32, 91, 39, 36, 123, 114, 102, 99, 56, 53, 48, 125, 39, 93, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 65, 44, 32, 37, 100, 45, 37, 98, 45, 37, 121, 32, 37, 84, 32, 71, 77, 84, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 82, 70, 67, 49, 49, 50, 51, 32, 102, 111, 114, 109, 97, 116, 44, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 97, 44, 32, 37, 100, 32, 37, 98, 32, 37, 89, 32, 37, 84, 32, 71, 77, 84, 34, 10, 32, 32, 32, 32, 91, 39, 36, 123, 114, 102, 99, 49, 49, 50, 51, 125, 39, 93, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 97, 44, 32, 37, 100, 32, 37, 98, 32, 37, 89, 32, 37, 84, 32, 71, 77, 84, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 45, 45, 32, 97, 115, 99, 116, 105, 109, 101, 32, 102, 111, 114, 109, 97, 116, 44, 32, 115, 97, 109, 101, 32, 97, 115, 32, 34, 37, 97, 32, 37, 98, 32, 37, 100, 32, 37, 84, 32, 37, 89, 34, 10, 32, 32, 32, 32, 91, 39, 36, 123, 97, 115, 99, 116, 105, 109, 101, 125, 39, 93, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 34, 37, 97, 32, 37, 98, 32, 37, 100, 32, 37, 84, 32, 37, 89, 34, 41, 32, 101, 110, 100, 44, 10, 32, 32, 125, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 102, 109, 116, 48, 40, 115, 116, 114, 41, 32, 114, 101, 116, 117, 114, 110, 32, 40, 103, 115, 117, 98, 40, 115, 116, 114, 44, 32, 34, 37, 37, 91, 37, 97, 37, 37, 92, 98, 92, 102, 93, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 120, 41, 32, 108, 111, 99, 97, 108, 32, 102, 32, 61, 32, 116, 118, 115, 112, 101, 99, 91, 120, 93, 59, 114, 101, 116, 117, 114, 110, 32, 40, 102, 32, 97, 110, 100, 32, 102, 40, 115, 101, 108, 102, 41, 41, 32, 111, 114, 32, 120, 32, 101, 110, 100, 41, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 102, 109, 116, 40, 115, 116, 114, 41, 10, 32, 32, 32, 32, 115, 116, 114, 32, 61, 32, 115, 116, 114, 32, 111, 114, 32, 115, 101, 108, 102, 46, 102, 109, 116, 115, 116, 114, 32, 111, 114, 32, 102, 109, 116, 115, 116, 114, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 48, 40, 40, 103, 109, 97, 116, 99, 104, 40, 115, 116, 114, 44, 32, 34, 36, 123, 37, 119, 43, 125, 34, 41, 41, 32, 97, 110, 100, 32, 40, 103, 115, 117, 98, 40, 115, 116, 114, 44, 32, 34, 36, 123, 37, 119, 43, 125, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 120, 41, 108, 111, 99, 97, 108, 32, 102, 61, 116, 118, 115, 112, 101, 99, 91, 120, 93, 59, 114, 101, 116, 117, 114, 110, 32, 40, 102, 32, 97, 110, 100, 32, 102, 40, 115, 101, 108, 102, 41, 41, 32, 111, 114, 32, 120, 32, 101, 110, 100, 41, 41, 32, 111, 114, 32, 115, 116, 114, 41, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 46, 95, 95, 108, 116, 40, 97, 44, 32, 98, 41, 32, 105, 102, 32, 40, 97, 46, 100, 97, 121, 110, 117, 109, 32, 61, 61, 32, 98, 46, 100, 97, 121, 110, 117, 109, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 40, 97, 46, 100, 97, 121, 102, 114, 99, 32, 60, 32, 98, 46, 100, 97, 121, 102, 114, 99, 41, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 32, 40, 97, 46, 100, 97, 121, 110, 117, 109, 32, 60, 32, 98, 46, 100, 97, 121, 110, 117, 109, 41, 32, 101, 110, 100, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 46, 95, 95, 108, 101, 40, 97, 44, 32, 98, 41, 32, 105, 102, 32, 40, 97, 46, 100, 97, 121, 110, 117, 109, 32, 61, 61, 32, 98, 46, 100, 97, 121, 110, 117, 109, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 40, 97, 46, 100, 97, 121, 102, 114, 99, 32, 60, 61, 32, 98, 46, 100, 97, 121, 102, 114, 99, 41, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 32, 40, 97, 46, 100, 97, 121, 110, 117, 109, 32, 60, 61, 32, 98, 46, 100, 97, 121, 110, 117, 109, 41, 32, 101, 110, 100, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 46, 95, 95, 101, 113, 40, 97, 44, 32, 98, 41, 114, 101, 116, 117, 114, 110, 32, 40, 97, 46, 100, 97, 121, 110, 117, 109, 32, 61, 61, 32, 98, 46, 100, 97, 121, 110, 117, 109, 41, 32, 97, 110, 100, 32, 40, 97, 46, 100, 97, 121, 102, 114, 99, 32, 61, 61, 32, 98, 46, 100, 97, 121, 102, 114, 99, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 46, 95, 95, 115, 117, 98, 40, 97, 44, 98, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 49, 44, 32, 100, 50, 32, 61, 32, 100, 97, 116, 101, 95, 103, 101, 116, 100, 111, 98, 106, 40, 97, 41, 44, 32, 100, 97, 116, 101, 95, 103, 101, 116, 100, 111, 98, 106, 40, 98, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 48, 32, 61, 32, 100, 49, 32, 97, 110, 100, 32, 100, 50, 32, 97, 110, 100, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 100, 49, 46, 100, 97, 121, 110, 117, 109, 32, 45, 32, 100, 50, 46, 100, 97, 121, 110, 117, 109, 44, 32, 100, 49, 46, 100, 97, 121, 102, 114, 99, 32, 45, 32, 100, 50, 46, 100, 97, 121, 102, 114, 99, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 48, 32, 97, 110, 100, 32, 100, 48, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 46, 95, 95, 97, 100, 100, 40, 97, 44, 98, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 49, 44, 32, 100, 50, 32, 61, 32, 100, 97, 116, 101, 95, 103, 101, 116, 100, 111, 98, 106, 40, 97, 41, 44, 32, 100, 97, 116, 101, 95, 103, 101, 116, 100, 111, 98, 106, 40, 98, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 48, 32, 61, 32, 100, 49, 32, 97, 110, 100, 32, 100, 50, 32, 97, 110, 100, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 100, 49, 46, 100, 97, 121, 110, 117, 109, 32, 43, 32, 100, 50, 46, 100, 97, 121, 110, 117, 109, 44, 32, 100, 49, 46, 100, 97, 121, 102, 114, 99, 32, 43, 32, 100, 50, 46, 100, 97, 121, 102, 114, 99, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 48, 32, 97, 110, 100, 32, 100, 48, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 46, 95, 95, 99, 111, 110, 99, 97, 116, 40, 97, 44, 32, 98, 41, 32, 114, 101, 116, 117, 114, 110, 32, 116, 111, 115, 116, 114, 105, 110, 103, 40, 97, 41, 32, 46, 46, 32, 116, 111, 115, 116, 114, 105, 110, 103, 40, 98, 41, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 95, 95, 116, 111, 115, 116, 114, 105, 110, 103, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 102, 109, 116, 40, 41, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 99, 111, 112, 121, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 44, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 41, 32, 101, 110, 100, 10, 10, 45, 45, 91, 91, 32, 84, 72, 69, 32, 76, 79, 67, 65, 76, 32, 68, 65, 84, 69, 32, 79, 66, 74, 69, 67, 84, 32, 77, 69, 84, 72, 79, 68, 83, 32, 93, 93, 45, 45, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 116, 111, 108, 111, 99, 97, 108, 40, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 110, 44, 100, 102, 32, 61, 32, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 44, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 98, 105, 97, 115, 32, 32, 61, 32, 103, 101, 116, 98, 105, 97, 115, 117, 116, 99, 50, 40, 115, 101, 108, 102, 41, 10, 32, 32, 32, 32, 105, 102, 32, 98, 105, 97, 115, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 45, 45, 32, 117, 116, 99, 32, 61, 32, 108, 111, 99, 97, 108, 32, 43, 32, 98, 105, 97, 115, 59, 32, 108, 111, 99, 97, 108, 32, 61, 32, 117, 116, 99, 32, 45, 32, 98, 105, 97, 115, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 32, 61, 32, 100, 110, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 32, 61, 32, 100, 102, 32, 45, 32, 98, 105, 97, 115, 42, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 116, 111, 117, 116, 99, 40, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 110, 44, 100, 102, 32, 61, 32, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 44, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 98, 105, 97, 115, 32, 32, 61, 32, 103, 101, 116, 98, 105, 97, 115, 108, 111, 99, 50, 40, 100, 110, 44, 32, 100, 102, 41, 10, 32, 32, 32, 32, 105, 102, 32, 98, 105, 97, 115, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 45, 45, 32, 117, 116, 99, 32, 61, 32, 108, 111, 99, 97, 108, 32, 43, 32, 98, 105, 97, 115, 59, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 32, 61, 32, 100, 110, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 32, 61, 32, 100, 102, 32, 43, 32, 98, 105, 97, 115, 42, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 98, 105, 97, 115, 40, 41, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 103, 101, 116, 98, 105, 97, 115, 108, 111, 99, 50, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 44, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 41, 41, 47, 83, 69, 67, 80, 69, 82, 77, 73, 78, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 111, 98, 106, 58, 103, 101, 116, 116, 122, 110, 97, 109, 101, 40, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 95, 44, 32, 116, 118, 117, 44, 32, 95, 32, 61, 32, 103, 101, 116, 98, 105, 97, 115, 108, 111, 99, 50, 40, 115, 101, 108, 102, 46, 100, 97, 121, 110, 117, 109, 44, 32, 115, 101, 108, 102, 46, 100, 97, 121, 102, 114, 99, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 118, 117, 32, 97, 110, 100, 32, 111, 115, 100, 97, 116, 101, 40, 34, 37, 90, 34, 44, 116, 118, 117, 41, 32, 111, 114, 32, 34, 34, 10, 32, 32, 101, 110, 100, 10, 10, 45, 45, 35, 105, 102, 32, 110, 111, 116, 32, 68, 65, 84, 69, 95, 79, 66, 74, 69, 67, 84, 95, 65, 70, 88, 32, 116, 104, 101, 110, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 46, 116, 105, 109, 101, 40, 104, 44, 32, 114, 44, 32, 115, 44, 32, 116, 41, 10, 32, 32, 32, 32, 104, 44, 32, 114, 44, 32, 115, 44, 32, 116, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 104, 32, 111, 114, 32, 48, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 114, 32, 111, 114, 32, 48, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 115, 32, 111, 114, 32, 48, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 116, 32, 111, 114, 32, 48, 41, 10, 32, 32, 32, 32, 105, 102, 32, 104, 32, 97, 110, 100, 32, 114, 32, 97, 110, 100, 32, 115, 32, 97, 110, 100, 32, 116, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 68, 65, 89, 78, 85, 77, 95, 68, 69, 70, 44, 32, 109, 97, 107, 101, 100, 97, 121, 102, 114, 99, 40, 104, 44, 32, 114, 44, 32, 115, 44, 32, 116, 41, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 101, 114, 114, 111, 114, 95, 97, 114, 103, 40, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 58, 95, 95, 99, 97, 108, 108, 40, 97, 114, 103, 49, 44, 32, 46, 46, 46, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 114, 103, 95, 99, 111, 117, 110, 116, 32, 61, 32, 115, 101, 108, 101, 99, 116, 40, 34, 35, 34, 44, 32, 46, 46, 46, 41, 32, 43, 32, 40, 97, 114, 103, 49, 32, 61, 61, 32, 110, 105, 108, 32, 97, 110, 100, 32, 48, 32, 111, 114, 32, 49, 41, 10, 32, 32, 32, 32, 105, 102, 32, 97, 114, 103, 95, 99, 111, 117, 110, 116, 32, 32, 62, 32, 49, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 40, 100, 97, 116, 101, 95, 102, 114, 111, 109, 40, 97, 114, 103, 49, 44, 32, 46, 46, 46, 41, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 97, 114, 103, 95, 99, 111, 117, 110, 116, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 40, 100, 97, 116, 101, 95, 103, 101, 116, 100, 111, 98, 106, 40, 102, 97, 108, 115, 101, 41, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 32, 108, 111, 99, 97, 108, 32, 111, 44, 32, 114, 32, 61, 32, 100, 97, 116, 101, 95, 103, 101, 116, 100, 111, 98, 106, 40, 97, 114, 103, 49, 41, 59, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 32, 97, 110, 100, 32, 111, 58, 99, 111, 112, 121, 40, 41, 32, 111, 114, 32, 111, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 100, 97, 116, 101, 46, 100, 105, 102, 102, 32, 61, 32, 100, 111, 98, 106, 46, 95, 95, 115, 117, 98, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 46, 105, 115, 108, 101, 97, 112, 121, 101, 97, 114, 40, 118, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 32, 61, 32, 102, 105, 120, 40, 118, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 121, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 121, 32, 61, 32, 100, 97, 116, 101, 95, 103, 101, 116, 100, 111, 98, 106, 40, 118, 41, 10, 32, 32, 32, 32, 32, 32, 121, 32, 61, 32, 121, 32, 97, 110, 100, 32, 121, 58, 103, 101, 116, 121, 101, 97, 114, 40, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 105, 115, 108, 101, 97, 112, 121, 101, 97, 114, 40, 121, 43, 48, 41, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 46, 101, 112, 111, 99, 104, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 101, 112, 111, 99, 104, 58, 99, 111, 112, 121, 40, 41, 32, 32, 101, 110, 100, 10, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 46, 105, 115, 111, 100, 97, 116, 101, 40, 121, 44, 119, 44, 100, 41, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 95, 105, 115, 111, 121]);
fileData1.push.apply(fileData1, [119, 100, 40, 121, 32, 43, 32, 48, 44, 32, 119, 32, 97, 110, 100, 32, 40, 119, 43, 48, 41, 32, 111, 114, 32, 49, 44, 32, 100, 32, 97, 110, 100, 32, 40, 100, 43, 48, 41, 32, 111, 114, 32, 49, 41, 44, 32, 48, 41, 32, 32, 101, 110, 100, 10, 10, 45, 45, 32, 73, 110, 116, 101, 114, 110, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 46, 102, 109, 116, 40, 115, 116, 114, 41, 32, 105, 102, 32, 115, 116, 114, 32, 116, 104, 101, 110, 32, 102, 109, 116, 115, 116, 114, 32, 61, 32, 115, 116, 114, 32, 101, 110, 100, 59, 32, 114, 101, 116, 117, 114, 110, 32, 102, 109, 116, 115, 116, 114, 32, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 46, 100, 97, 121, 110, 117, 109, 109, 105, 110, 40, 110, 41, 32, 32, 68, 65, 89, 78, 85, 77, 95, 77, 73, 78, 32, 61, 32, 40, 110, 32, 97, 110, 100, 32, 110, 32, 60, 32, 68, 65, 89, 78, 85, 77, 95, 77, 65, 88, 41, 32, 97, 110, 100, 32, 110, 32, 111, 114, 32, 68, 65, 89, 78, 85, 77, 95, 77, 73, 78, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 32, 97, 110, 100, 32, 68, 65, 89, 78, 85, 77, 95, 77, 73, 78, 32, 111, 114, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 68, 65, 89, 78, 85, 77, 95, 77, 73, 78, 44, 32, 48, 41, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 46, 100, 97, 121, 110, 117, 109, 109, 97, 120, 40, 110, 41, 32, 32, 68, 65, 89, 78, 85, 77, 95, 77, 65, 88, 32, 61, 32, 40, 110, 32, 97, 110, 100, 32, 110, 32, 62, 32, 68, 65, 89, 78, 85, 77, 95, 77, 73, 78, 41, 32, 97, 110, 100, 32, 110, 32, 111, 114, 32, 68, 65, 89, 78, 85, 77, 95, 77, 65, 88, 32, 114, 101, 116, 117, 114, 110, 32, 110, 32, 97, 110, 100, 32, 68, 65, 89, 78, 85, 77, 95, 77, 65, 88, 32, 111, 114, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 68, 65, 89, 78, 85, 77, 95, 77, 65, 88, 44, 32, 48, 41, 58, 110, 111, 114, 109, 97, 108, 105, 122, 101, 40, 41, 101, 110, 100, 10, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 97, 116, 101, 46, 116, 105, 99, 107, 115, 40, 116, 41, 32, 105, 102, 32, 116, 32, 116, 104, 101, 110, 32, 115, 101, 116, 116, 105, 99, 107, 115, 40, 116, 41, 32, 101, 110, 100, 32, 114, 101, 116, 117, 114, 110, 32, 84, 73, 67, 75, 83, 80, 69, 82, 83, 69, 67, 32, 32, 101, 110, 100, 10, 45, 45, 35, 101, 110, 100, 32, 45, 45, 32, 110, 111, 116, 32, 68, 65, 84, 69, 95, 79, 66, 74, 69, 67, 84, 95, 65, 70, 88, 10, 10, 32, 32, 45, 45, 32, 108, 111, 99, 97, 108, 32, 116, 109, 32, 61, 32, 111, 115, 100, 97, 116, 101, 40, 34, 33, 42, 116, 34, 44, 32, 48, 41, 59, 10, 32, 32, 45, 45, 32, 105, 102, 32, 116, 109, 32, 116, 104, 101, 110, 10, 32, 32, 45, 45, 32, 32, 32, 100, 97, 116, 101, 95, 101, 112, 111, 99, 104, 32, 61, 32, 100, 97, 116, 101, 95, 110, 101, 119, 40, 109, 97, 107, 101, 100, 97, 121, 110, 117, 109, 40, 116, 109, 46, 121, 101, 97, 114, 44, 32, 116, 109, 46, 109, 111, 110, 116, 104, 32, 45, 32, 49, 44, 32, 116, 109, 46, 100, 97, 121, 41, 44, 32, 109, 97, 107, 101, 100, 97, 121, 102, 114, 99, 40, 116, 109, 46, 104, 111, 117, 114, 44, 32, 116, 109, 46, 109, 105, 110, 44, 32, 116, 109, 46, 115, 101, 99, 44, 32, 48, 41, 41, 10, 32, 32, 45, 45, 32, 32, 32, 45, 45, 32, 116, 104, 101, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 102, 114, 111, 109, 32, 111, 117, 114, 32, 101, 112, 111, 99, 104, 32, 116, 111, 32, 111, 115, 32, 101, 112, 111, 99, 104, 32, 105, 110, 32, 100, 97, 121, 110, 117, 109, 10, 32, 32, 45, 45, 32, 32, 32, 68, 65, 84, 69, 95, 69, 80, 79, 67, 72, 32, 61, 32, 100, 97, 116, 101, 95, 101, 112, 111, 99, 104, 32, 97, 110, 100, 32, 100, 97, 116, 101, 95, 101, 112, 111, 99, 104, 58, 115, 112, 97, 110, 100, 97, 121, 115, 40, 41, 10, 32, 32, 45, 45, 32, 101, 108, 115, 101, 32, 45, 45, 32, 101, 114, 114, 111, 114, 32, 119, 105, 108, 108, 32, 98, 101, 32, 114, 97, 105, 115, 101, 32, 111, 110, 108, 121, 32, 105, 102, 32, 99, 97, 108, 108, 101, 100, 33, 10, 32, 32, 45, 45, 32, 32, 32, 100, 97, 116, 101, 95, 101, 112, 111, 99, 104, 32, 61, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 123, 125, 44, 123, 95, 95, 105, 110, 100, 101, 120, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 101, 114, 114, 111, 114, 40, 34, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 103, 101, 116, 32, 116, 104, 101, 32, 101, 112, 111, 99, 104, 32, 100, 97, 116, 101, 34, 41, 32, 101, 110, 100, 125, 41, 10, 32, 32, 45, 45, 32, 101, 110, 100, 10, 10, 45, 45, 35, 105, 102, 32, 110, 111, 116, 32, 68, 65, 84, 69, 95, 79, 66, 74, 69, 67, 84, 95, 65, 70, 88, 32, 116, 104, 101, 110, 10, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 10, 45, 45, 35, 101, 108, 115, 101, 10, 45, 45, 36, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 101, 95, 102, 114, 111, 109, 10, 45, 45, 35, 101, 110, 100, 10, 10]);
Module['FS_createDataFile']('/', 'date.lua', fileData1, true, true, false);
var fileData2 = [];
fileData2.push.apply(fileData2, [45, 45, 32, 67, 111, 110, 99, 105, 115, 101, 32, 66, 105, 110, 97, 114, 121, 32, 79, 98, 106, 101, 99, 116, 32, 82, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 32, 40, 67, 66, 79, 82, 41, 10, 45, 45, 32, 82, 70, 67, 32, 55, 48, 52, 57, 10, 10, 45, 45, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 111, 102, 116, 114, 101, 113, 40, 112, 107, 103, 44, 32, 102, 105, 101, 108, 100, 41, 10, 45, 45, 32, 9, 45, 45, 32, 108, 111, 99, 97, 108, 32, 111, 107, 44, 32, 109, 111, 100, 32, 61, 32, 112, 99, 97, 108, 108, 40, 114, 101, 113, 117, 105, 114, 101, 44, 32, 112, 107, 103, 41, 59, 10, 45, 45, 32, 9, 45, 45, 32, 105, 102, 32, 110, 111, 116, 32, 111, 107, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 101, 110, 100, 10, 45, 45, 32, 9, 105, 102, 32, 102, 105, 101, 108, 100, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 91, 102, 105, 101, 108, 100, 93, 59, 32, 101, 110, 100, 10, 45, 45, 32, 9, 114, 101, 116, 117, 114, 110, 32, 109, 111, 100, 59, 10, 45, 45, 32, 101, 110, 100, 10, 45, 45, 32, 108, 111, 99, 97, 108, 32, 100, 111, 115, 116, 114, 105, 110, 103, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 115, 41, 10, 45, 45, 32, 9, 108, 111, 99, 97, 108, 32, 111, 107, 44, 32, 102, 32, 61, 32, 112, 99, 97, 108, 108, 40, 108, 111, 97, 100, 115, 116, 114, 105, 110, 103, 32, 111, 114, 32, 108, 111, 97, 100, 44, 32, 115, 41, 59, 32, 45, 45, 32, 108, 117, 97, 99, 104, 101, 99, 107, 58, 32, 114, 101, 97, 100, 32, 103, 108, 111, 98, 97, 108, 115, 32, 108, 111, 97, 100, 115, 116, 114, 105, 110, 103, 10, 45, 45, 32, 9, 105, 102, 32, 111, 107, 32, 97, 110, 100, 32, 102, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 102, 40, 41, 59, 32, 101, 110, 100, 10, 45, 45, 32, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 32, 61, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 59, 10, 108, 111, 99, 97, 108, 32, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 32, 61, 32, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 59, 10, 108, 111, 99, 97, 108, 32, 100, 98, 103, 95, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 32, 61, 32, 100, 101, 98, 117, 103, 46, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 59, 10, 108, 111, 99, 97, 108, 32, 97, 115, 115, 101, 114, 116, 32, 61, 32, 97, 115, 115, 101, 114, 116, 59, 10, 108, 111, 99, 97, 108, 32, 101, 114, 114, 111, 114, 32, 61, 32, 101, 114, 114, 111, 114, 59, 10, 108, 111, 99, 97, 108, 32, 116, 121, 112, 101, 32, 61, 32, 116, 121, 112, 101, 59, 10, 108, 111, 99, 97, 108, 32, 112, 97, 105, 114, 115, 32, 61, 32, 112, 97, 105, 114, 115, 59, 10, 108, 111, 99, 97, 108, 32, 105, 112, 97, 105, 114, 115, 32, 61, 32, 105, 112, 97, 105, 114, 115, 59, 10, 108, 111, 99, 97, 108, 32, 116, 111, 115, 116, 114, 105, 110, 103, 32, 61, 32, 116, 111, 115, 116, 114, 105, 110, 103, 59, 10, 108, 111, 99, 97, 108, 32, 115, 95, 99, 104, 97, 114, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 99, 104, 97, 114, 59, 10, 108, 111, 99, 97, 108, 32, 116, 95, 99, 111, 110, 99, 97, 116, 32, 61, 32, 116, 97, 98, 108, 101, 46, 99, 111, 110, 99, 97, 116, 59, 10, 108, 111, 99, 97, 108, 32, 116, 95, 115, 111, 114, 116, 32, 61, 32, 116, 97, 98, 108, 101, 46, 115, 111, 114, 116, 59, 10, 108, 111, 99, 97, 108, 32, 109, 95, 102, 108, 111, 111, 114, 32, 61, 32, 109, 97, 116, 104, 46, 102, 108, 111, 111, 114, 59, 10, 108, 111, 99, 97, 108, 32, 109, 95, 97, 98, 115, 32, 61, 32, 109, 97, 116, 104, 46, 97, 98, 115, 59, 10, 108, 111, 99, 97, 108, 32, 109, 95, 104, 117, 103, 101, 32, 61, 32, 109, 97, 116, 104, 46, 104, 117, 103, 101, 59, 10, 108, 111, 99, 97, 108, 32, 109, 95, 109, 97, 120, 32, 61, 32, 109, 97, 116, 104, 46, 109, 97, 120, 59, 10, 108, 111, 99, 97, 108, 32, 109, 97, 120, 105, 110, 116, 32, 61, 32, 109, 97, 116, 104, 46, 109, 97, 120, 105, 110, 116, 101, 103, 101, 114, 32, 111, 114, 32, 57, 48, 48, 55, 49, 57, 57, 50, 53, 52, 55, 52, 48, 57, 57, 50, 59, 10, 108, 111, 99, 97, 108, 32, 109, 105, 110, 105, 110, 116, 32, 61, 32, 109, 97, 116, 104, 46, 109, 105, 110, 105, 110, 116, 101, 103, 101, 114, 32, 111, 114, 32, 45, 57, 48, 48, 55, 49, 57, 57, 50, 53, 52, 55, 52, 48, 57, 57, 50, 59, 10, 108, 111, 99, 97, 108, 32, 78, 97, 78, 32, 61, 32, 48, 47, 48, 59, 10, 108, 111, 99, 97, 108, 32, 109, 95, 102, 114, 101, 120, 112, 32, 61, 32, 109, 97, 116, 104, 46, 102, 114, 101, 120, 112, 59, 10, 108, 111, 99, 97, 108, 32, 109, 95, 108, 100, 101, 120, 112, 32, 61, 32, 109, 97, 116, 104, 46, 108, 100, 101, 120, 112, 32, 111, 114, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 120, 44, 32, 101, 120, 112, 41, 32, 114, 101, 116, 117, 114, 110, 32, 120, 32, 42, 32, 50, 46, 48, 32, 94, 32, 101, 120, 112, 59, 32, 101, 110, 100, 59, 10, 108, 111, 99, 97, 108, 32, 109, 95, 116, 121, 112, 101, 32, 61, 32, 109, 97, 116, 104, 46, 116, 121, 112, 101, 32, 111, 114, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 110, 41, 32, 114, 101, 116, 117, 114, 110, 32, 110, 32, 37, 32, 49, 32, 61, 61, 32, 48, 32, 97, 110, 100, 32, 110, 32, 60, 61, 32, 109, 97, 120, 105, 110, 116, 32, 97, 110, 100, 32, 110, 32, 62, 61, 32, 109, 105, 110, 105, 110, 116, 32, 97, 110, 100, 32, 34, 105, 110, 116, 101, 103, 101, 114, 34, 32, 111, 114, 32, 34, 102, 108, 111, 97, 116, 34, 32, 101, 110, 100, 59, 10, 108, 111, 99, 97, 108, 32, 115, 95, 112, 97, 99, 107, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 112, 97, 99, 107, 32, 45, 45, 32, 111, 114, 32, 115, 111, 102, 116, 114, 101, 113, 40, 34, 115, 116, 114, 117, 99, 116, 34, 44, 32, 34, 112, 97, 99, 107, 34, 41, 59, 10, 108, 111, 99, 97, 108, 32, 115, 95, 117, 110, 112, 97, 99, 107, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 117, 110, 112, 97, 99, 107, 32, 45, 45, 32, 111, 114, 32, 115, 111, 102, 116, 114, 101, 113, 40, 34, 115, 116, 114, 117, 99, 116, 34, 44, 32, 34, 117, 110, 112, 97, 99, 107, 34, 41, 59, 10, 108, 111, 99, 97, 108, 32, 98, 95, 114, 115, 104, 105, 102, 116, 32, 61, 32, 98, 105, 116, 51, 50, 46, 114, 115, 104, 105, 102, 116, 32, 45, 45, 32, 115, 111, 102, 116, 114, 101, 113, 40, 34, 98, 105, 116, 51, 50, 34, 44, 32, 34, 114, 115, 104, 105, 102, 116, 34, 41, 32, 111, 114, 32, 115, 111, 102, 116, 114, 101, 113, 40, 34, 98, 105, 116, 34, 44, 32, 34, 114, 115, 104, 105, 102, 116, 34, 41, 32, 111, 114, 10, 9, 45, 45, 32, 100, 111, 115, 116, 114, 105, 110, 103, 32, 34, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 97, 44, 98, 41, 32, 114, 101, 116, 117, 114, 110, 32, 97, 32, 62, 62, 32, 98, 32, 101, 110, 100, 34, 32, 111, 114, 10, 9, 45, 45, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 97, 44, 32, 98, 41, 32, 114, 101, 116, 117, 114, 110, 32, 109, 95, 109, 97, 120, 40, 48, 44, 32, 109, 95, 102, 108, 111, 111, 114, 40, 97, 32, 47, 32, 40, 50, 32, 94, 32, 98, 41, 41, 41, 59, 32, 101, 110, 100, 59, 10, 10, 45, 45, 32, 115, 97, 110, 105, 116, 121, 32, 99, 104, 101, 99, 107, 10, 105, 102, 32, 115, 95, 112, 97, 99, 107, 32, 97, 110, 100, 32, 115, 95, 112, 97, 99, 107, 40, 34, 62, 73, 50, 34, 44, 32, 48, 41, 32, 126, 61, 32, 34, 92, 48, 92, 48, 34, 32, 116, 104, 101, 110, 10, 9, 115, 95, 112, 97, 99, 107, 32, 61, 32, 110, 105, 108, 59, 10, 101, 110, 100, 10, 105, 102, 32, 115, 95, 117, 110, 112, 97, 99, 107, 32, 97, 110, 100, 32, 115, 95, 117, 110, 112, 97, 99, 107, 40, 34, 62, 73, 50, 34, 44, 32, 34, 92, 49, 92, 50, 92, 51, 92, 52, 34, 41, 32, 126, 61, 32, 48, 120, 49, 48, 50, 32, 116, 104, 101, 110, 10, 9, 115, 95, 117, 110, 112, 97, 99, 107, 32, 61, 32, 110, 105, 108, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 101, 110, 99, 111, 100, 101, 114, 32, 61, 32, 123, 125, 59, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 40, 111, 98, 106, 44, 32, 111, 112, 116, 115, 41, 10, 9, 114, 101, 116, 117, 114, 110, 32, 101, 110, 99, 111, 100, 101, 114, 91, 116, 121, 112, 101, 40, 111, 98, 106, 41, 93, 40, 111, 98, 106, 44, 32, 111, 112, 116, 115, 41, 59, 10, 101, 110, 100, 10, 10, 45, 45, 32, 77, 97, 106, 111, 114, 32, 116, 121, 112, 101, 115, 32, 48, 44, 32, 49, 32, 97, 110, 100, 32, 108, 101, 110, 103, 116, 104, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 102, 111, 114, 32, 111, 116, 104, 101, 114, 115, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 116, 101, 103, 101, 114, 40, 110, 117, 109, 44, 32, 109, 41, 10, 9, 105, 102, 32, 109, 32, 61, 61, 32, 48, 32, 97, 110, 100, 32, 110, 117, 109, 32, 60, 32, 48, 32, 116, 104, 101, 110, 10, 9, 9, 45, 45, 32, 110, 101, 103, 97, 116, 105, 118, 101, 32, 105, 110, 116, 101, 103, 101, 114, 44, 32, 109, 97, 106, 111, 114, 32, 116, 121, 112, 101, 32, 49, 10, 9, 9, 110, 117, 109, 44, 32, 109, 32, 61, 32, 45, 32, 110, 117, 109, 32, 45, 32, 49, 44, 32, 51, 50, 59, 10, 9, 101, 110, 100, 10, 9, 105, 102, 32, 110, 117, 109, 32, 60, 32, 50, 52, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 95, 99, 104, 97, 114, 40, 109, 32, 43, 32, 110, 117, 109, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 110, 117, 109, 32, 60, 32, 50, 32, 94, 32, 56, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 95, 99, 104, 97, 114, 40, 109, 32, 43, 32, 50, 52, 44, 32, 110, 117, 109, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 110, 117, 109, 32, 60, 32, 50, 32, 94, 32, 49, 54, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 95, 99, 104, 97, 114, 40, 109, 32, 43, 32, 50, 53, 44, 32, 98, 95, 114, 115, 104, 105, 102, 116, 40, 110, 117, 109, 44, 32, 56, 41, 44, 32, 110, 117, 109, 32, 37, 32, 48, 120, 49, 48, 48, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 110, 117, 109, 32, 60, 32, 50, 32, 94, 32, 51, 50, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 95, 99, 104, 97, 114, 40, 109, 32, 43, 32, 50, 54, 44, 10, 9, 9, 9, 98, 95, 114, 115, 104, 105, 102, 116, 40, 110, 117, 109, 44, 32, 50, 52, 41, 32, 37, 32, 48, 120, 49, 48, 48, 44, 10, 9, 9, 9, 98, 95, 114, 115, 104, 105, 102, 116, 40, 110, 117, 109, 44, 32, 49, 54, 41, 32, 37, 32, 48, 120, 49, 48, 48, 44, 10, 9, 9, 9, 98, 95, 114, 115, 104, 105, 102, 116, 40, 110, 117, 109, 44, 32, 56, 41, 32, 37, 32, 48, 120, 49, 48, 48, 44, 10, 9, 9, 9, 110, 117, 109, 32, 37, 32, 48, 120, 49, 48, 48, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 110, 117, 109, 32, 60, 32, 50, 32, 94, 32, 54, 52, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 104, 105, 103, 104, 32, 61, 32, 109, 95, 102, 108, 111, 111, 114, 40, 110, 117, 109, 32, 47, 32, 50, 32, 94, 32, 51, 50, 41, 59, 10, 9, 9, 110, 117, 109, 32, 61, 32, 110, 117, 109, 32, 37, 32, 50, 32, 94, 32, 51, 50, 59, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 95, 99, 104, 97, 114, 40, 109, 32, 43, 32, 50, 55, 44, 10, 9, 9, 9, 98, 95, 114, 115, 104, 105, 102, 116, 40, 104, 105, 103, 104, 44, 32, 50, 52, 41, 32, 37, 32, 48, 120, 49, 48, 48, 44, 10, 9, 9, 9, 98, 95, 114, 115, 104, 105, 102, 116, 40, 104, 105, 103, 104, 44, 32, 49, 54, 41, 32, 37, 32, 48, 120, 49, 48, 48, 44, 10, 9, 9, 9, 98, 95, 114, 115, 104, 105, 102, 116, 40, 104, 105, 103, 104, 44, 32, 56, 41, 32, 37, 32, 48, 120, 49, 48, 48, 44, 10, 9, 9, 9, 104, 105, 103, 104, 32, 37, 32, 48, 120, 49, 48, 48, 44, 10, 9, 9, 9, 98, 95, 114, 115, 104, 105, 102, 116, 40, 110, 117, 109, 44, 32, 50, 52, 41, 32, 37, 32, 48, 120, 49, 48, 48, 44, 10, 9, 9, 9, 98, 95, 114, 115, 104, 105, 102, 116, 40, 110, 117, 109, 44, 32, 49, 54, 41, 32, 37, 32, 48, 120, 49, 48, 48, 44, 10, 9, 9, 9, 98, 95, 114, 115, 104, 105, 102, 116, 40, 110, 117, 109, 44, 32, 56, 41, 32, 37, 32, 48, 120, 49, 48, 48, 44, 10, 9, 9, 9, 110, 117, 109, 32, 37, 32, 48, 120, 49, 48, 48, 41, 59, 10, 9, 101, 110, 100, 10, 9, 101, 114, 114, 111, 114, 32, 34, 105, 110, 116, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 34, 59, 10, 101, 110, 100, 10, 10, 105, 102, 32, 115, 95, 112, 97, 99, 107, 32, 116, 104, 101, 110, 10, 9, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 116, 101, 103, 101, 114, 40, 110, 117, 109, 44, 32, 109, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 109, 116, 59, 10, 9, 9, 109, 32, 61, 32, 109, 32, 111, 114, 32, 48, 59, 10, 9, 9, 105, 102, 32, 110, 117, 109, 32, 60, 32, 50, 52, 32, 116, 104, 101, 110, 10, 9, 9, 9, 102, 109, 116, 44, 32, 109, 32, 61, 32, 34, 62, 66, 34, 44, 32, 109, 32, 43, 32, 110, 117, 109, 59, 10, 9, 9, 101, 108, 115, 101, 105, 102, 32, 110, 117, 109, 32, 60, 32, 50, 53, 54, 32, 116, 104, 101, 110, 10, 9, 9, 9, 102, 109, 116, 44, 32, 109, 32, 61, 32, 34, 62, 66, 66, 34, 44, 32, 109, 32, 43, 32, 50, 52, 59, 10, 9, 9, 101, 108, 115, 101, 105, 102, 32, 110, 117, 109, 32, 60, 32, 54, 53, 53, 51, 54, 32, 116, 104, 101, 110, 10, 9, 9, 9, 102, 109, 116, 44, 32, 109, 32, 61, 32, 34, 62, 66, 73, 50, 34, 44, 32, 109, 32, 43, 32, 50, 53, 59, 10, 9, 9, 101, 108, 115, 101, 105, 102, 32, 110, 117, 109, 32, 60, 32, 52, 50, 57, 52, 57, 54, 55, 50, 57, 54, 32, 116, 104, 101, 110, 10, 9, 9, 9, 102, 109, 116, 44, 32, 109, 32, 61, 32, 34, 62, 66, 73, 52, 34, 44, 32, 109, 32, 43, 32, 50, 54, 59, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 9, 102, 109, 116, 44, 32, 109, 32, 61, 32, 34, 62, 66, 73, 56, 34, 44, 32, 109, 32, 43, 32, 50, 55, 59, 10, 9, 9, 101, 110, 100, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 95, 112, 97, 99, 107, 40, 102, 109, 116, 44, 32, 109, 44, 32, 110, 117, 109, 41, 59, 10, 9, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 115, 105, 109, 112, 108, 101, 95, 109, 116, 32, 61, 32, 123, 125, 59, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 105, 109, 112, 108, 101, 95, 109, 116, 58, 95, 95, 116, 111, 115, 116, 114, 105, 110, 103, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 46, 110, 97, 109, 101, 32, 111, 114, 32, 40, 34, 115, 105, 109, 112, 108, 101, 40, 37, 100, 41, 34, 41, 58, 102, 111, 114, 109, 97, 116, 40, 115, 101, 108, 102, 46, 118, 97, 108, 117, 101, 41, 59, 32, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 105, 109, 112, 108, 101, 95, 109, 116, 58, 95, 95, 116, 111, 99, 98, 111, 114, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 46, 99, 98, 111, 114, 32, 111, 114, 32, 105, 110, 116, 101, 103, 101, 114, 40, 115, 101, 108, 102, 46, 118, 97, 108, 117, 101, 44, 32, 50, 50, 52, 41, 59, 32, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 105, 109, 112, 108, 101, 40, 118, 97, 108, 117, 101, 44, 32, 110, 97, 109, 101, 44, 32, 99, 98, 111, 114, 41, 10, 9, 97, 115, 115, 101, 114, 116, 40, 118, 97, 108, 117, 101, 32, 62, 61, 32, 48, 32, 97, 110, 100, 32, 118, 97, 108, 117, 101, 32, 60, 61, 32, 50, 53, 53, 44, 32, 34, 98, 97, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 35, 49, 32, 116, 111, 32, 39, 115, 105, 109, 112, 108, 101, 39, 32, 40, 105, 110, 116, 101, 103, 101, 114, 32, 105, 110, 32, 114, 97, 110, 103, 101, 32, 48, 46, 46, 50, 53, 53, 32, 101, 120, 112, 101, 99, 116, 101, 100, 41, 34, 41, 59, 10, 9, 114, 101, 116, 117, 114, 110, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 123, 32, 118, 97, 108, 117, 101, 32, 61, 32, 118, 97, 108, 117, 101, 44, 32, 110, 97, 109, 101, 32, 61, 32, 110, 97, 109, 101, 44, 32, 99, 98, 111, 114, 32, 61, 32, 99, 98, 111, 114, 32, 125, 44, 32, 115, 105, 109, 112, 108, 101, 95, 109, 116, 41, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 116, 97, 103, 103, 101, 100, 95, 109, 116, 32, 61, 32, 123, 125, 59, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 97, 103, 103, 101, 100, 95, 109, 116, 58, 95, 95, 116, 111, 115, 116, 114, 105, 110, 103, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 40, 34, 37, 100, 40, 37, 115, 41, 34, 41, 58, 102, 111, 114, 109, 97, 116, 40, 115, 101, 108, 102, 46, 116, 97, 103, 44, 32, 116, 111, 115, 116, 114, 105, 110, 103, 40, 115, 101, 108, 102, 46, 118, 97, 108, 117, 101, 41, 41, 59, 32, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 97, 103, 103, 101, 100, 95, 109, 116, 58, 95, 95, 116, 111, 99, 98, 111, 114, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 105, 110, 116, 101, 103, 101, 114, 40, 115, 101, 108, 102, 46, 116, 97, 103, 44, 32, 49, 57, 50, 41, 32, 46, 46, 32, 101, 110, 99, 111, 100, 101, 40, 115, 101, 108, 102, 46, 118, 97, 108, 117, 101, 41, 59, 32, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 97, 103, 103, 101, 100, 40, 116, 97, 103, 44, 32, 118, 97, 108, 117, 101, 41, 10, 9, 97, 115, 115, 101, 114, 116, 40, 116, 97, 103, 32, 62, 61, 32, 48, 44, 32, 34, 98, 97, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 35, 49, 32, 116, 111, 32, 39, 116, 97, 103, 103, 101, 100, 39, 32, 40, 112, 111, 115, 105, 116, 105, 118, 101, 32, 105, 110, 116, 101, 103, 101, 114, 32, 101, 120, 112, 101, 99, 116, 101, 100, 41, 34, 41, 59, 10, 9, 114, 101, 116, 117, 114, 110, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 123, 32, 116, 97, 103, 32, 61, 32, 116, 97, 103, 44, 32, 118, 97, 108, 117, 101, 32, 61, 32, 118, 97, 108, 117, 101, 32, 125, 44, 32, 116, 97, 103, 103, 101, 100, 95, 109, 116, 41, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 110, 117, 108, 108, 32, 61, 32, 115, 105, 109, 112, 108, 101, 40, 50, 50, 44, 32, 34, 110, 117, 108, 108, 34, 41, 59, 32, 45, 45, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 110, 117, 108, 108, 10, 108, 111, 99, 97, 108, 32, 117, 110, 100, 101, 102, 105, 110, 101, 100, 32, 61, 32, 115, 105, 109, 112, 108, 101, 40, 50, 51, 44, 32, 34, 117, 110, 100, 101, 102, 105, 110, 101, 100, 34, 41, 59, 32, 45, 45, 32, 117, 110, 100, 101, 102, 105, 110, 101, 100, 32, 111, 114, 32, 110, 105, 108, 10, 108, 111, 99, 97, 108, 32, 66, 82, 69, 65, 75, 32, 61, 32, 115, 105, 109, 112, 108, 101, 40, 51, 49, 44, 32, 34, 98, 114, 101, 97, 107, 34, 44, 32, 34, 92, 50, 53, 53, 34, 41, 59, 10, 10, 45, 45, 32, 78, 117, 109, 98, 101, 114, 32, 116, 121, 112, 101, 115, 32, 100, 105, 115, 112, 97, 116, 99, 104, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 110, 117, 109, 98, 101, 114, 40, 110, 117, 109, 41, 10, 9, 114, 101, 116, 117, 114, 110, 32, 101, 110, 99, 111, 100, 101, 114, 91, 109, 95, 116, 121, 112, 101, 40, 110, 117, 109, 41, 93, 40, 110, 117, 109, 41, 59, 10, 101, 110, 100, 10, 10, 45, 45, 32, 77, 97, 106, 111, 114, 32, 116, 121, 112, 101, 115, 32, 48, 44, 32, 49, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 105, 110, 116, 101, 103, 101, 114, 40, 110, 117, 109, 41, 10, 9, 105, 102, 32, 110, 117, 109, 32, 60, 32, 48, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 105, 110, 116, 101, 103, 101, 114, 40, 45, 49, 32, 45, 32, 110, 117, 109, 44, 32, 51, 50, 41, 59, 10, 9, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 105, 110, 116, 101, 103, 101, 114, 40, 110, 117, 109, 44, 32, 48, 41, 59, 10, 101, 110, 100, 10, 10, 45, 45, 32, 77, 97, 106, 111, 114, 32, 116, 121, 112, 101, 32, 55, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 102, 108, 111, 97, 116, 40, 110, 117, 109, 41, 10, 9, 105, 102, 32, 110, 117, 109, 32, 126, 61, 32, 110, 117, 109, 32, 116, 104, 101, 110, 32, 45, 45, 32, 78, 97, 78, 32, 115, 104, 111, 114, 116, 99, 117, 116, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 34, 92, 50, 53, 49, 92, 49, 50, 55, 92, 50, 53, 53, 92, 50, 53, 53, 92, 50, 53, 53, 92, 50, 53, 53, 92, 50, 53, 53, 92, 50, 53, 53, 92, 50, 53, 53, 34, 59, 10, 9, 101, 110, 100, 10, 9, 108, 111, 99, 97, 108, 32, 115, 105, 103, 110, 32, 61, 32, 40, 110, 117, 109, 32, 62, 32, 48, 32, 111, 114, 32, 49, 32, 47, 32, 110, 117, 109, 32, 62, 32, 48, 41, 32, 97, 110, 100, 32, 48, 32, 111, 114, 32, 49, 59, 10, 9, 110, 117, 109, 32, 61, 32, 109, 95, 97, 98, 115, 40, 110, 117, 109, 41, 10, 9, 105, 102, 32, 110, 117, 109, 32, 61, 61, 32, 109, 95, 104, 117, 103, 101, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 95, 99, 104, 97, 114, 40, 50, 53, 49, 44, 32, 115, 105, 103, 110, 32, 42, 32, 49, 50, 56, 32, 43, 32, 49, 50, 56, 32, 45, 32, 49, 41, 32, 46, 46, 32, 34, 92, 50, 52, 48, 92, 48, 92, 48, 92, 48, 92, 48, 92, 48, 92, 48, 34, 59, 10, 9, 101, 110, 100, 10, 9, 108, 111, 99, 97, 108, 32, 102, 114, 97, 99, 116, 105, 111, 110, 44, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 32, 109, 95, 102, 114, 101, 120, 112, 40, 110, 117, 109, 41, 10, 9, 105, 102, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 95, 99, 104, 97, 114, 40, 50, 53, 49, 44, 32, 115, 105, 103, 110, 32, 42, 32, 49, 50, 56, 41, 32, 46, 46, 32, 34, 92, 48, 92, 48, 92, 48, 92, 48, 92, 48, 92, 48, 92, 48, 34, 59, 10, 9, 101, 110, 100, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 59, 10, 9, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 43, 32, 49, 48, 50, 52, 32, 45, 32, 50, 59, 10, 9, 105, 102, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 60, 61, 32, 48, 32, 116, 104, 101, 110, 10, 9, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 32, 94, 32, 40, 101, 120, 112, 111, 110, 101, 110, 116, 32, 45, 32, 49, 41, 10, 9, 9, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 32, 48, 59, 10, 9, 101, 108, 115, 101, 10, 9, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 45, 32, 49, 59, 10, 9, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 115, 95, 99, 104, 97, 114, 40, 50, 53, 49, 44, 10, 9, 9, 115, 105, 103, 110, 32, 42, 32, 50, 32, 94, 32, 55, 32, 43, 32, 109, 95, 102, 108, 111, 111, 114, 40, 101, 120, 112, 111, 110, 101, 110, 116, 32, 47, 32, 50, 32, 94, 32, 52, 41, 32, 37, 32, 50, 32, 94, 32, 55, 44, 10, 9, 9, 101, 120, 112, 111, 110, 101, 110, 116, 32, 37, 32, 50, 32, 94, 32, 52, 32, 42, 32, 50, 32, 94, 32, 52, 32, 43, 10, 9, 9, 109, 95, 102, 108, 111, 111, 114, 40, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 32, 94, 32, 52, 32, 37, 32, 48, 120, 49, 48, 48, 41, 44, 10, 9, 9, 109, 95, 102, 108, 111, 111, 114, 40, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 32, 94, 32, 49, 50, 32, 37, 32, 48, 120, 49, 48, 48, 41, 44, 10, 9, 9, 109, 95, 102, 108, 111, 111, 114, 40, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 32, 94, 32, 50, 48, 32, 37, 32, 48, 120, 49, 48, 48, 41, 44, 10, 9, 9, 109, 95, 102, 108, 111, 111, 114, 40, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 32, 94, 32, 50, 56, 32, 37, 32, 48, 120, 49, 48, 48, 41, 44, 10, 9, 9, 109, 95, 102, 108, 111, 111, 114, 40, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 32, 94, 32, 51, 54, 32, 37, 32, 48, 120, 49, 48, 48, 41, 44, 10, 9, 9, 109, 95, 102, 108, 111, 111, 114, 40, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 32, 94, 32, 52, 52, 32, 37, 32, 48, 120, 49, 48, 48, 41, 44, 10, 9, 9, 109, 95, 102, 108, 111, 111, 114, 40, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 32, 94, 32, 53, 50, 32, 37, 32, 48, 120, 49, 48, 48, 41, 10, 9, 41, 10, 101, 110, 100, 10, 10, 105, 102, 32, 115, 95, 112, 97, 99, 107, 32, 116, 104, 101, 110, 10, 9, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 102, 108, 111, 97, 116, 40, 110, 117, 109, 41, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 95, 112, 97, 99, 107, 40, 34, 62, 66, 100, 34, 44, 32, 50, 53, 49, 44, 32, 110, 117, 109, 41, 59, 10, 9, 101, 110, 100, 10, 101, 110, 100, 10, 10, 10, 45, 45, 32, 77, 97, 106, 111, 114, 32, 116, 121, 112, 101, 32, 50, 32, 45, 32, 98, 121, 116, 101, 32, 115, 116, 114, 105, 110, 103, 115, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 98, 121, 116, 101, 115, 116, 114, 105, 110, 103, 40, 115, 41, 10, 9, 114, 101, 116, 117, 114, 110, 32, 105, 110, 116, 101, 103, 101, 114, 40, 35, 115, 44, 32, 54, 52, 41, 32, 46, 46, 32, 115, 59, 10, 101, 110, 100, 10, 10, 45, 45, 32, 77, 97, 106, 111, 114, 32, 116, 121, 112, 101, 32, 51, 32, 45, 32, 85, 84, 70, 45, 56, 32, 115, 116, 114, 105, 110, 103, 115, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 117, 116, 102, 56, 115, 116, 114, 105, 110, 103, 40, 115, 41, 10, 9, 114, 101, 116, 117, 114, 110, 32, 105, 110, 116, 101, 103, 101, 114, 40, 35, 115, 44, 32, 57, 54, 41, 32, 46, 46, 32, 115, 59, 10, 101, 110, 100, 10, 10, 45, 45, 32, 76, 117, 97, 32, 115, 116, 114, 105, 110, 103, 115, 32, 97, 114, 101, 32, 98, 121, 116, 101, 32, 115, 116, 114, 105, 110, 103, 115, 10, 101, 110, 99, 111, 100, 101, 114, 46, 115, 116, 114, 105, 110, 103, 32, 61, 32, 101, 110, 99, 111, 100, 101, 114, 46, 98, 121, 116, 101, 115, 116, 114, 105, 110, 103, 59, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 98, 111, 111, 108, 101, 97, 110, 40, 98, 111, 111, 108, 41, 10, 9, 114, 101, 116, 117, 114, 110, 32, 98, 111, 111, 108, 32, 97, 110, 100, 32, 34, 92, 50, 52, 53, 34, 32, 111, 114, 32, 34, 92, 50, 52, 52, 34, 59, 10, 101, 110, 100, 10, 10, 101, 110, 99, 111, 100, 101, 114, 91, 34, 110, 105, 108, 34, 93, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 34, 92, 50, 52, 54, 34, 59, 32, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 117, 115, 101, 114, 100, 97, 116, 97, 40, 117, 100, 44, 32, 111, 112, 116, 115, 41, 10, 9, 108, 111, 99, 97, 108, 32, 109, 116, 32, 61, 32, 100, 98, 103, 95, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 117, 100, 41, 59, 10, 9, 105, 102, 32, 109, 116, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 101, 110, 99, 111, 100, 101, 95, 117, 100, 32, 61, 32, 111, 112, 116, 115, 32, 97, 110, 100, 32, 111, 112, 116, 115, 91, 109, 116, 93, 32, 111, 114, 32, 109, 116, 46, 95, 95, 116, 111, 99, 98, 111, 114, 59, 10, 9, 9, 105, 102, 32, 101, 110, 99, 111, 100, 101, 95, 117, 100, 32, 116, 104, 101, 110, 10, 9, 9, 9, 114, 101, 116, 117, 114, 110, 32, 101, 110, 99, 111, 100, 101, 95, 117, 100, 40, 117, 100, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 9, 101, 110, 100, 10, 9, 101, 110, 100, 10, 9, 101, 114, 114, 111, 114, 32, 34, 99, 97, 110, 39, 116, 32, 101, 110, 99, 111, 100, 101, 32, 117, 115, 101, 114, 100, 97, 116, 97, 34, 59, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 116, 97, 98, 108, 101, 40, 116, 44, 32, 111, 112, 116, 115, 41, 10, 9, 108, 111, 99, 97, 108, 32, 109, 116, 32, 61, 32, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 116, 41, 59, 10, 9, 105, 102, 32, 109, 116, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 101, 110, 99, 111, 100, 101, 95, 116, 32, 61, 32, 111, 112, 116, 115, 32, 97, 110, 100, 32, 111, 112, 116, 115, 91, 109, 116, 93, 32, 111, 114, 32, 109, 116, 46, 95, 95, 116, 111, 99, 98, 111, 114, 59, 10, 9, 9, 105, 102, 32, 101, 110, 99, 111, 100, 101, 95, 116, 32, 116, 104, 101, 110, 10, 9, 9, 9, 114, 101, 116, 117, 114, 110, 32, 101, 110, 99, 111, 100, 101, 95, 116, 40, 116, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 9, 101, 110, 100, 10, 9, 101, 110, 100, 10, 9, 45, 45, 32, 116, 104, 101, 32, 116, 97, 98, 108, 101, 32, 105, 115, 32, 101, 110, 99, 111, 100, 101, 100, 32, 97, 115, 32, 97, 110, 32, 97, 114, 114, 97, 121, 32, 105, 102, 102, 32, 119, 104, 101, 110, 32, 119, 101, 32, 105, 116, 101, 114, 97, 116, 101, 32, 111, 118, 101, 114, 32, 105, 116, 44, 10, 9, 45, 45, 32, 119, 101, 32, 115, 101, 101, 32, 115, 117, 99, 99, 101, 115, 115, 105, 118, 101, 32, 105, 110, 116, 101, 103, 101, 114, 32, 107, 101, 121, 115, 32, 115, 116, 97, 114, 116, 105, 110, 103, 32, 102, 114, 111, 109, 32, 49, 46, 32, 32, 84, 104, 101, 32, 108, 117, 97, 10, 9, 45, 45, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 100, 111, 101, 115, 110, 39, 116, 32, 97, 99, 116, 117, 97, 108, 108, 121, 32, 103, 117, 97, 114, 97, 110, 116, 101, 101, 32, 116, 104, 97, 116, 32, 116, 104, 105, 115, 32, 119, 105, 108, 108, 32, 98, 101, 32, 116, 104, 101, 32, 99, 97, 115, 101, 10, 9, 45, 45, 32, 119, 104, 101, 110, 32, 119, 101, 32, 105, 116, 101, 114, 97, 116, 101, 32, 111, 118, 101, 114, 32, 97, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 115, 117, 99, 99, 101, 115, 115, 105, 118, 101, 32, 105, 110, 116, 101, 103, 101, 114, 32, 107, 101, 121, 115, 44, 32, 98, 117, 116, 10, 9, 45, 45, 32, 100, 117, 101, 32, 97, 110, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 100, 101, 116, 97, 105, 108, 32, 105, 110, 32, 80, 85, 67, 32, 82, 105, 111, 32, 76, 117, 97, 44, 32, 116, 104, 105, 115, 32, 105, 115, 32, 119, 104, 97, 116, 32, 119, 101, 10, 9, 45, 45, 32, 117, 115, 117, 97, 108, 108, 121, 32, 111, 98, 115, 101, 114, 118, 101, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 32, 76, 117, 97, 32, 109, 97, 110, 117, 97, 108, 32, 114, 101, 103, 97, 114, 100, 105, 110, 103, 32, 116, 104, 101, 32, 35, 32, 40, 108, 101, 110, 103, 116, 104, 41, 10, 9, 45, 45, 32, 111, 112, 101, 114, 97, 116, 111, 114, 46, 32, 32, 73, 110, 32, 116, 104, 101, 32, 99, 97, 115, 101, 32, 116, 104, 97, 116, 32, 116, 104, 105, 115, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 104, 97, 112, 112, 101, 110, 44, 32, 119, 101, 32, 119, 105, 108, 108, 32, 102, 97, 108, 108, 10, 9, 45, 45, 32, 98, 97, 99, 107, 32, 116, 111, 32, 97, 32, 109, 97, 112, 32, 119, 105, 116, 104, 32, 105, 110, 116, 101, 103, 101, 114, 32, 107, 101, 121, 115, 44, 32, 119, 104, 105, 99, 104, 32, 98, 101, 99, 111, 109, 101, 115, 32, 97, 32, 98, 105, 116, 32, 108, 97, 114, 103, 101, 114, 46, 10, 9, 108, 111, 99, 97, 108, 32, 97, 114, 114, 97, 121, 44, 32, 109, 97, 112, 44, 32, 105, 44, 32, 112, 32, 61, 32, 123, 32, 105, 110, 116, 101, 103, 101, 114, 40, 35, 116, 44, 32, 49, 50, 56, 41, 32, 125, 44, 32, 123, 32, 34, 92, 49, 57, 49, 34, 32, 125, 44, 32, 49, 44, 32, 50, 59, 10, 9, 108, 111, 99, 97, 108, 32, 105, 115, 95, 97, 114, 114, 97, 121, 32, 61, 32, 116, 114, 117, 101, 59, 10, 9, 102, 111, 114, 32, 107, 44, 32, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 116, 41, 32, 100, 111, 10, 9, 9, 105, 115, 95, 97, 114, 114, 97, 121, 32, 61, 32, 105, 115, 95, 97, 114, 114, 97, 121, 32, 97, 110, 100, 32, 105, 32, 61, 61, 32, 107, 59, 10, 9, 9, 105, 32, 61, 32, 105, 32, 43, 32, 49, 59, 10, 10, 9, 9, 108, 111, 99, 97, 108, 32, 101, 110, 99, 111, 100, 101, 100, 95, 118, 32, 61, 32, 101, 110, 99, 111, 100, 101, 40, 118, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 9, 97, 114, 114, 97, 121, 91, 105, 93, 32, 61, 32, 101, 110, 99, 111, 100, 101, 100, 95, 118, 59, 10, 10, 9, 9, 109, 97, 112, 91, 112, 93, 44, 32, 112, 32, 61, 32, 101, 110, 99, 111, 100, 101, 40, 107, 44, 32, 111, 112, 116, 115, 41, 44, 32, 112, 32, 43, 32, 49, 59, 10, 9, 9, 109, 97, 112, 91, 112, 93, 44, 32, 112, 32, 61, 32, 101, 110, 99, 111, 100, 101, 100, 95, 118, 44, 32, 112, 32, 43, 32, 49, 59, 10, 9, 101, 110, 100, 10, 9, 45, 45, 32, 109, 97, 112, 91, 112, 93, 32, 61, 32, 34, 92, 50, 53, 53, 34, 59, 10, 9, 109, 97, 112, 91, 49, 93, 32, 61, 32, 105, 110, 116, 101, 103, 101, 114, 40, 105, 32, 45, 32, 49, 44, 32, 49, 54, 48, 41, 59, 10, 9, 114, 101, 116, 117, 114, 110, 32, 116, 95, 99, 111, 110, 99, 97, 116, 40, 105, 115, 95, 97, 114, 114, 97, 121, 32, 97, 110, 100, 32, 97, 114, 114, 97, 121, 32, 111, 114, 32, 109, 97, 112, 41, 59, 10, 101, 110, 100, 10, 10, 45, 45, 32, 65, 114, 114, 97, 121, 32, 111, 114, 32, 100, 105, 99, 116, 45, 111, 110, 108, 121, 32, 101, 110, 99, 111, 100, 101, 114, 115, 44, 32, 119, 104, 105, 99, 104, 32, 99, 97, 110, 32, 98, 101, 32, 115, 101, 116, 32, 97, 115, 32, 95, 95, 116, 111, 99, 98, 111, 114, 32, 109, 101, 116, 97, 109, 101, 116, 104, 111, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 97, 114, 114, 97, 121, 40, 116, 44, 32, 111, 112, 116, 115, 41, 10, 9, 108, 111, 99, 97, 108, 32, 97, 114, 114, 97, 121, 32, 61, 32, 123, 32, 125, 59, 10, 9, 102, 111, 114, 32, 105, 44, 32, 118, 32, 105, 110, 32, 105, 112, 97, 105, 114, 115, 40, 116, 41, 32, 100, 111, 10, 9, 9, 97, 114, 114, 97, 121, 91, 105, 93, 32, 61, 32, 101, 110, 99, 111, 100, 101, 40, 118, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 105, 110, 116, 101, 103, 101, 114, 40, 35, 97, 114, 114, 97, 121, 44, 32, 49, 50, 56, 41, 32, 46, 46, 32, 116, 95, 99, 111, 110, 99, 97, 116, 40, 97, 114, 114, 97, 121, 41, 59, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 109, 97, 112, 40, 116, 44, 32, 111, 112, 116, 115, 41, 10, 9, 108, 111, 99, 97, 108, 32, 109, 97, 112, 44, 32, 112, 44, 32, 108, 101, 110, 32, 61, 32, 123, 32, 34, 92, 49, 57, 49, 34, 32, 125, 44, 32, 50, 44, 32, 48, 59, 10, 9, 102, 111, 114, 32, 107, 44, 32, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 116, 41, 32, 100, 111, 10, 9, 9, 109, 97, 112, 91, 112, 93, 44, 32, 112, 32, 61, 32, 101, 110, 99, 111, 100, 101, 40, 107, 44, 32, 111, 112, 116, 115, 41, 44, 32, 112, 32, 43, 32, 49, 59, 10, 9, 9, 109, 97, 112, 91, 112, 93, 44, 32, 112, 32, 61, 32, 101, 110, 99, 111, 100, 101, 40, 118, 44, 32, 111, 112, 116, 115, 41, 44, 32, 112, 32, 43, 32, 49, 59, 10, 9, 9, 108, 101, 110, 32, 61, 32, 108, 101, 110, 32, 43, 32, 49, 59, 10, 9, 101, 110, 100, 10, 9, 45, 45, 32, 109, 97, 112, 91, 112, 93, 32, 61, 32, 34, 92, 50, 53, 53, 34, 59, 10, 9, 109, 97, 112, 91, 49, 93, 32, 61, 32, 105, 110, 116, 101, 103, 101, 114, 40, 108, 101, 110, 44, 32, 49, 54, 48, 41, 59, 10, 9, 114, 101, 116, 117, 114, 110, 32, 116, 95, 99, 111, 110, 99, 97, 116, 40, 109, 97, 112, 41, 59, 10, 101, 110, 100, 10, 101, 110, 99, 111, 100, 101, 114, 46, 100, 105, 99, 116, 32, 61, 32, 101, 110, 99, 111, 100, 101, 114, 46, 109, 97, 112, 59, 32, 45, 45, 32, 67, 79, 77, 80, 65, 84, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 114, 46, 111, 114, 100, 101, 114, 101, 100, 95, 109, 97, 112, 40, 116, 44, 32, 111, 112, 116, 115, 41, 10, 9, 108, 111, 99, 97, 108, 32, 109, 97, 112, 32, 61, 32, 123, 125, 59, 10, 9, 105, 102, 32, 110, 111, 116, 32, 116, 91, 49, 93, 32, 116, 104, 101, 110, 32, 45, 45, 32, 110, 111, 32, 112, 114, 101, 100, 101, 102, 105, 110, 101, 100, 32, 111, 114, 100, 101, 114, 10, 9, 9, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 48, 59, 10, 9, 9, 102, 111, 114, 32, 107, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 116, 41, 32, 100, 111, 10, 9, 9, 9, 105, 32, 61, 32, 105, 32, 43, 32, 49, 59, 10, 9, 9, 9, 109, 97, 112, 91, 105, 93, 32, 61, 32, 107, 59, 10, 9, 9, 101, 110, 100, 10, 9, 9, 116, 95, 115, 111, 114, 116, 40, 109, 97, 112, 41, 59, 10, 9, 101, 110, 100, 10, 9, 102, 111, 114, 32, 105, 44, 32, 107, 32, 105, 110, 32, 105, 112, 97, 105, 114, 115, 40, 116, 91, 49, 93, 32, 97, 110, 100, 32, 116, 32, 111, 114, 32, 109, 97, 112, 41, 32, 100, 111, 10, 9, 9, 109, 97, 112, 91, 105, 93, 32, 61, 32, 101, 110, 99, 111, 100, 101, 40, 107, 44, 32, 111, 112, 116, 115, 41, 32, 46, 46, 32, 101, 110, 99, 111, 100, 101, 40, 116, 91, 107, 93, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 105, 110, 116, 101, 103, 101, 114, 40, 35, 109, 97, 112, 44, 32, 49, 54, 48, 41, 32, 46, 46, 32, 116, 95, 99, 111, 110, 99, 97, 116, 40, 109, 97, 112, 41, 59, 10, 101, 110, 100, 10, 10, 45, 45, 32, 115, 116, 114, 105, 110, 103, 105, 102, 121, 32, 116, 104, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 104, 101, 120, 32, 97, 100, 100, 114, 101, 115, 115, 10, 101, 110, 99, 111, 100, 101, 114, 91, 39, 102, 117, 110, 99, 116, 105, 111, 110, 39, 93, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 102, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 118, 97, 108, 32, 61, 32, 115, 116, 114, 116, 111, 107, 40, 116, 111, 115, 116, 114, 105, 110, 103, 40, 102, 41, 41, 91, 50, 93, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 105, 110, 116, 101, 103, 101, 114, 40, 35, 118, 97, 108, 44, 32, 54, 52, 41, 32, 46, 46, 32, 118, 97, 108, 10, 101, 110, 100, 10, 10, 45, 45, 32, 68, 101, 99, 111, 100, 101, 114, 10, 45, 45, 32, 82, 101, 97, 100, 115, 32, 102, 114, 111, 109, 32, 97, 32, 102, 105, 108, 101, 45, 104, 97, 110, 100, 108, 101, 32, 108, 105, 107, 101, 32, 111, 98, 106, 101, 99, 116, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 115, 40, 102, 104, 44, 32, 108, 101, 110, 41, 10, 9, 114, 101, 116, 117, 114, 110, 32, 102, 104, 58, 114, 101, 97, 100, 40, 108, 101, 110, 41, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 10, 9, 114, 101, 116, 117, 114, 110, 32, 102, 104, 58, 114, 101, 97, 100, 40, 49, 41, 58, 98, 121, 116, 101, 40, 41, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 108, 101, 110, 103, 116, 104, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 10, 9, 105, 102, 32, 109, 105, 110, 116, 121, 112, 32, 60, 32, 50, 52, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 109, 105, 110, 116, 121, 112, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 109, 105, 110, 116, 121, 112, 32, 60, 32, 50, 56, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 111, 117, 116, 32, 61, 32, 48, 59, 10, 9, 9, 102, 111, 114, 32, 95, 32, 61, 32, 49, 44, 32, 50, 32, 94, 32, 40, 109, 105, 110, 116, 121, 112, 32, 45, 32, 50, 52, 41, 32, 100, 111, 10, 9, 9, 9, 111, 117, 116, 32, 61, 32, 111, 117, 116, 32, 42, 32, 50, 53, 54, 32, 43, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 9, 101, 110, 100, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 111, 117, 116, 59, 10, 9, 101, 108, 115, 101, 10, 9, 9, 101, 114, 114, 111, 114, 32, 34, 105, 110, 118, 97, 108, 105, 100, 32, 108, 101, 110, 103, 116, 104, 34, 59, 10, 9, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 100, 101, 99, 111, 100, 101, 114, 32, 61, 32, 123, 125, 59, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 116, 121, 112, 101, 40, 102, 104, 41, 10, 9, 108, 111, 99, 97, 108, 32, 98, 121, 116, 101, 32, 61, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 114, 101, 116, 117, 114, 110, 32, 98, 95, 114, 115, 104, 105, 102, 116, 40, 98, 121, 116, 101, 44, 32, 53, 41, 44, 32, 98, 121, 116, 101, 32, 37, 32, 51, 50, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 44, 32, 111, 112, 116, 115, 41, 10, 9, 108, 111, 99, 97, 108, 32, 116, 121, 112, 44, 32, 109, 105, 110, 116, 121, 112, 32, 61, 32, 114, 101, 97, 100, 95, 116, 121, 112, 101, 40, 102, 104, 41, 59, 10, 9, 114, 101, 116, 117, 114, 110, 32, 100, 101, 99, 111, 100, 101, 114, 91, 116, 121, 112, 93, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 44, 32, 111, 112, 116, 115, 41, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 105, 110, 116, 101, 103, 101, 114, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 10, 9, 114, 101, 116, 117, 114, 110, 32, 114, 101, 97, 100, 95, 108, 101, 110, 103, 116, 104, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 110, 101, 103, 97, 116, 105, 118, 101, 95, 105, 110, 116, 101, 103, 101, 114, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 10, 9, 114, 101, 116, 117, 114, 110, 32, 45, 49, 32, 45, 32, 114, 101, 97, 100, 95, 108, 101, 110, 103, 116, 104, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 115, 116, 114, 105, 110, 103, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 10, 9, 105, 102, 32, 109, 105, 110, 116, 121, 112, 32, 126, 61, 32, 51, 49, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 115, 40, 102, 104, 44, 32, 114, 101, 97, 100, 95, 108, 101, 110, 103, 116, 104, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 41, 59, 10, 9, 101, 110, 100, 10, 9, 108, 111, 99, 97, 108, 32, 111, 117, 116, 32, 61, 32, 123, 125, 59, 10, 9, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 49, 59, 10, 9, 108, 111, 99, 97, 108, 32, 118, 32, 61, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 41, 59, 10, 9, 119, 104, 105, 108, 101, 32, 118, 32, 126, 61, 32, 66, 82, 69, 65, 75, 32, 100, 111, 10, 9, 9, 111, 117, 116, 91, 105, 93, 44, 32, 105, 32, 61, 32, 118, 44, 32, 105, 32, 43, 32, 49, 59, 10, 9, 9, 118, 32, 61, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 41, 59, 10, 9, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 116, 95, 99, 111, 110, 99, 97, 116, 40, 111, 117, 116, 41, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 117, 110, 105, 99, 111, 100, 101, 95, 115, 116, 114, 105, 110, 103, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 10, 9, 114, 101, 116, 117, 114, 110, 32, 114, 101, 97, 100, 95, 115, 116, 114, 105, 110, 103, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 59, 10, 9, 45, 45, 32, 108, 111, 99, 97, 108, 32, 115, 116, 114, 32, 61, 32, 114, 101, 97, 100, 95, 115, 116, 114, 105, 110, 103, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 59, 10, 9, 45, 45, 32, 105, 102, 32, 104, 97, 118, 101, 95, 117, 116, 102, 56, 32, 97, 110, 100, 32, 110, 111, 116, 32, 117, 116, 102, 56, 46, 108, 101, 110, 40, 115, 116, 114, 41, 32, 116, 104, 101, 110, 10, 9, 9, 45, 45, 32, 84, 79, 68, 79, 32, 72, 111, 119, 32, 116, 111, 32, 104, 97, 110, 100, 108, 101, 32, 116, 104, 105, 115, 63, 10, 9, 45, 45, 32, 101, 110, 100, 10, 9, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 115, 116, 114, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 97, 114, 114, 97, 121, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 44, 32, 111, 112, 116, 115, 41, 10, 9, 108, 111, 99, 97, 108, 32, 111, 117, 116, 32, 61, 32, 123, 125, 59, 10, 9, 105, 102, 32, 109, 105, 110, 116, 121, 112, 32, 61, 61, 32, 51, 49, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 49, 59, 10, 9, 9, 108, 111, 99, 97, 108, 32, 118, 32, 61, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 9, 119, 104, 105, 108, 101, 32, 118, 32, 126, 61, 32, 66, 82, 69, 65, 75, 32, 100, 111, 10, 9, 9, 9, 111, 117, 116, 91, 105, 93, 44, 32, 105, 32, 61, 32, 118, 44, 32, 105, 32, 43, 32, 49, 59, 10, 9, 9, 9, 118, 32, 61, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 9, 101, 110, 100, 10, 9, 101, 108, 115, 101, 10, 9, 9, 108, 111, 99, 97, 108, 32, 108, 101, 110, 32, 61, 32, 114, 101, 97, 100, 95, 108, 101, 110, 103, 116, 104, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 59, 10, 9, 9, 102, 111, 114, 32, 105, 32, 61, 32, 49, 44, 32, 108, 101, 110, 32, 100, 111, 10, 9, 9, 9, 111, 117, 116, 91, 105, 93, 32, 61, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 9, 101, 110, 100, 10, 9, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 111, 117, 116, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 109, 97, 112, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 44, 32, 111, 112, 116, 115, 41, 10, 9, 108, 111, 99, 97, 108, 32, 111, 117, 116, 32, 61, 32, 123, 125, 59, 10, 9, 108, 111, 99, 97, 108, 32, 107, 59, 10, 9, 105, 102, 32, 109, 105, 110, 116, 121, 112, 32, 61, 61, 32, 51, 49, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 49, 59, 10, 9, 9, 107, 32, 61, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 9, 119, 104, 105, 108, 101, 32, 107, 32, 126, 61, 32, 66, 82, 69, 65, 75, 32, 100, 111, 10, 9, 9, 9, 111, 117, 116, 91, 107, 93, 44, 32, 105, 32, 61, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 44, 32, 111, 112, 116, 115, 41, 44, 32, 105, 32, 43, 32, 49, 59, 10, 9, 9, 9, 107, 32, 61, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 9, 101, 110, 100, 10, 9, 101, 108, 115, 101, 10, 9, 9, 108, 111, 99, 97, 108, 32, 108, 101, 110, 32, 61, 32, 114, 101, 97, 100, 95, 108, 101, 110, 103, 116, 104, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 59, 10, 9, 9, 102, 111, 114, 32, 95, 32, 61, 32, 49, 44, 32, 108, 101, 110, 32, 100, 111, 10, 9, 9, 9, 107, 32, 61, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 9, 9, 111, 117, 116, 91, 107, 93, 32, 61, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 9, 101, 110, 100, 10, 9, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 111, 117, 116, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 116, 97, 103, 103, 101, 100, 95, 100, 101, 99, 111, 100, 101, 114, 115, 32, 61, 32, 123, 125, 59, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 115, 101, 109, 97, 110, 116, 105, 99, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 44, 32, 111, 112, 116, 115, 41, 10, 9, 108, 111, 99, 97, 108, 32, 116, 97, 103, 32, 61, 32, 114, 101, 97, 100, 95, 108, 101, 110, 103, 116, 104, 40, 102, 104, 44, 32, 109, 105, 110, 116, 121, 112, 41, 59, 10, 9, 108, 111, 99, 97, 108, 32, 118, 97, 108, 117, 101, 32, 61, 32, 114, 101, 97, 100, 95, 111, 98]);
fileData2.push.apply(fileData2, [106, 101, 99, 116, 40, 102, 104, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 108, 111, 99, 97, 108, 32, 112, 111, 115, 116, 112, 114, 111, 99, 32, 61, 32, 111, 112, 116, 115, 32, 97, 110, 100, 32, 111, 112, 116, 115, 91, 116, 97, 103, 93, 32, 111, 114, 32, 116, 97, 103, 103, 101, 100, 95, 100, 101, 99, 111, 100, 101, 114, 115, 91, 116, 97, 103, 93, 59, 10, 9, 105, 102, 32, 112, 111, 115, 116, 112, 114, 111, 99, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 112, 111, 115, 116, 112, 114, 111, 99, 40, 118, 97, 108, 117, 101, 41, 59, 10, 9, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 116, 97, 103, 103, 101, 100, 40, 116, 97, 103, 44, 32, 118, 97, 108, 117, 101, 41, 59, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 104, 97, 108, 102, 95, 102, 108, 111, 97, 116, 40, 102, 104, 41, 10, 9, 108, 111, 99, 97, 108, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 108, 111, 99, 97, 108, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 108, 111, 99, 97, 108, 32, 115, 105, 103, 110, 32, 61, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 60, 32, 49, 50, 56, 32, 97, 110, 100, 32, 49, 32, 111, 114, 32, 45, 49, 59, 32, 45, 45, 32, 115, 105, 103, 110, 32, 105, 115, 32, 104, 105, 103, 104, 101, 115, 116, 32, 98, 105, 116, 10, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 43, 32, 40, 101, 120, 112, 111, 110, 101, 110, 116, 32, 42, 32, 50, 53, 54, 41, 32, 37, 32, 49, 48, 50, 52, 59, 32, 45, 45, 32, 99, 111, 112, 121, 32, 116, 119, 111, 40, 63, 41, 32, 98, 105, 116, 115, 32, 102, 114, 111, 109, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 116, 111, 32, 102, 114, 97, 99, 116, 105, 111, 110, 10, 9, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 32, 98, 95, 114, 115, 104, 105, 102, 116, 40, 101, 120, 112, 111, 110, 101, 110, 116, 44, 32, 50, 41, 32, 37, 32, 51, 50, 59, 32, 45, 45, 32, 114, 101, 109, 111, 118, 101, 32, 115, 105, 103, 110, 32, 98, 105, 116, 32, 97, 110, 100, 32, 116, 119, 111, 32, 108, 111, 119, 32, 98, 105, 116, 115, 32, 102, 114, 111, 109, 32, 102, 114, 97, 99, 116, 105, 111, 110, 59, 10, 10, 9, 105, 102, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 105, 103, 110, 32, 42, 32, 109, 95, 108, 100, 101, 120, 112, 40, 102, 114, 97, 99, 116, 105, 111, 110, 44, 32, 45, 50, 52, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 126, 61, 32, 51, 49, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 105, 103, 110, 32, 42, 32, 109, 95, 108, 100, 101, 120, 112, 40, 102, 114, 97, 99, 116, 105, 111, 110, 32, 43, 32, 49, 48, 50, 52, 44, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 45, 32, 50, 53, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 105, 103, 110, 32, 42, 32, 109, 95, 104, 117, 103, 101, 59, 10, 9, 101, 108, 115, 101, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 78, 97, 78, 59, 10, 9, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 102, 108, 111, 97, 116, 40, 102, 104, 41, 10, 9, 108, 111, 99, 97, 108, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 108, 111, 99, 97, 108, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 108, 111, 99, 97, 108, 32, 115, 105, 103, 110, 32, 61, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 60, 32, 49, 50, 56, 32, 97, 110, 100, 32, 49, 32, 111, 114, 32, 45, 49, 59, 32, 45, 45, 32, 115, 105, 103, 110, 32, 105, 115, 32, 104, 105, 103, 104, 101, 115, 116, 32, 98, 105, 116, 10, 9, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 42, 32, 50, 32, 37, 32, 50, 53, 54, 32, 43, 32, 98, 95, 114, 115, 104, 105, 102, 116, 40, 102, 114, 97, 99, 116, 105, 111, 110, 44, 32, 55, 41, 59, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 37, 32, 49, 50, 56, 59, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 53, 54, 32, 43, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 53, 54, 32, 43, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 10, 9, 105, 102, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 105, 103, 110, 32, 42, 32, 109, 95, 108, 100, 101, 120, 112, 40, 101, 120, 112, 111, 110, 101, 110, 116, 44, 32, 45, 49, 52, 57, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 126, 61, 32, 48, 120, 102, 102, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 105, 103, 110, 32, 42, 32, 109, 95, 108, 100, 101, 120, 112, 40, 102, 114, 97, 99, 116, 105, 111, 110, 32, 43, 32, 50, 32, 94, 32, 50, 51, 44, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 45, 32, 49, 53, 48, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 105, 103, 110, 32, 42, 32, 109, 95, 104, 117, 103, 101, 59, 10, 9, 101, 108, 115, 101, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 78, 97, 78, 59, 10, 9, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 100, 111, 117, 98, 108, 101, 40, 102, 104, 41, 10, 9, 108, 111, 99, 97, 108, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 108, 111, 99, 97, 108, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 108, 111, 99, 97, 108, 32, 115, 105, 103, 110, 32, 61, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 60, 32, 49, 50, 56, 32, 97, 110, 100, 32, 49, 32, 111, 114, 32, 45, 49, 59, 32, 45, 45, 32, 115, 105, 103, 110, 32, 105, 115, 32, 104, 105, 103, 104, 101, 115, 116, 32, 98, 105, 116, 10, 10, 9, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 37, 32, 32, 49, 50, 56, 32, 42, 32, 49, 54, 32, 43, 32, 98, 95, 114, 115, 104, 105, 102, 116, 40, 102, 114, 97, 99, 116, 105, 111, 110, 44, 32, 52, 41, 59, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 37, 32, 49, 54, 59, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 53, 54, 32, 43, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 53, 54, 32, 43, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 53, 54, 32, 43, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 53, 54, 32, 43, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 53, 54, 32, 43, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 42, 32, 50, 53, 54, 32, 43, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 10, 9, 105, 102, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 105, 103, 110, 32, 42, 32, 109, 95, 108, 100, 101, 120, 112, 40, 101, 120, 112, 111, 110, 101, 110, 116, 44, 32, 45, 49, 52, 57, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 126, 61, 32, 48, 120, 102, 102, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 105, 103, 110, 32, 42, 32, 109, 95, 108, 100, 101, 120, 112, 40, 102, 114, 97, 99, 116, 105, 111, 110, 32, 43, 32, 50, 32, 94, 32, 53, 50, 44, 32, 101, 120, 112, 111, 110, 101, 110, 116, 32, 45, 32, 49, 48, 55, 53, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 102, 114, 97, 99, 116, 105, 111, 110, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 105, 103, 110, 32, 42, 32, 109, 95, 104, 117, 103, 101, 59, 10, 9, 101, 108, 115, 101, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 78, 97, 78, 59, 10, 9, 101, 110, 100, 10, 101, 110, 100, 10, 10, 10, 105, 102, 32, 115, 95, 117, 110, 112, 97, 99, 107, 32, 116, 104, 101, 110, 10, 9, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 102, 108, 111, 97, 116, 40, 102, 104, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 95, 117, 110, 112, 97, 99, 107, 40, 34, 62, 102, 34, 44, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 115, 40, 102, 104, 44, 32, 52, 41, 41, 32, 101, 110, 100, 10, 9, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 100, 111, 117, 98, 108, 101, 40, 102, 104, 41, 32, 114, 101, 116, 117, 114, 110, 32, 115, 95, 117, 110, 112, 97, 99, 107, 40, 34, 62, 100, 34, 44, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 115, 40, 102, 104, 44, 32, 56, 41, 41, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 97, 100, 95, 115, 105, 109, 112, 108, 101, 40, 102, 104, 44, 32, 118, 97, 108, 117, 101, 44, 32, 111, 112, 116, 115, 41, 10, 9, 105, 102, 32, 118, 97, 108, 117, 101, 32, 61, 61, 32, 50, 52, 32, 116, 104, 101, 110, 10, 9, 9, 118, 97, 108, 117, 101, 32, 61, 32, 114, 101, 97, 100, 95, 98, 121, 116, 101, 40, 102, 104, 41, 59, 10, 9, 101, 110, 100, 10, 9, 105, 102, 32, 118, 97, 108, 117, 101, 32, 61, 61, 32, 50, 48, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 118, 97, 108, 117, 101, 32, 61, 61, 32, 50, 49, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 118, 97, 108, 117, 101, 32, 61, 61, 32, 50, 50, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 110, 117, 108, 108, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 118, 97, 108, 117, 101, 32, 61, 61, 32, 50, 51, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 117, 110, 100, 101, 102, 105, 110, 101, 100, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 118, 97, 108, 117, 101, 32, 61, 61, 32, 50, 53, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 114, 101, 97, 100, 95, 104, 97, 108, 102, 95, 102, 108, 111, 97, 116, 40, 102, 104, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 118, 97, 108, 117, 101, 32, 61, 61, 32, 50, 54, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 114, 101, 97, 100, 95, 102, 108, 111, 97, 116, 40, 102, 104, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 118, 97, 108, 117, 101, 32, 61, 61, 32, 50, 55, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 114, 101, 97, 100, 95, 100, 111, 117, 98, 108, 101, 40, 102, 104, 41, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 118, 97, 108, 117, 101, 32, 61, 61, 32, 51, 49, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 66, 82, 69, 65, 75, 59, 10, 9, 101, 110, 100, 10, 9, 105, 102, 32, 111, 112, 116, 115, 32, 97, 110, 100, 32, 111, 112, 116, 115, 46, 115, 105, 109, 112, 108, 101, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 111, 112, 116, 115, 46, 115, 105, 109, 112, 108, 101, 40, 118, 97, 108, 117, 101, 41, 59, 10, 9, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 115, 105, 109, 112, 108, 101, 40, 118, 97, 108, 117, 101, 41, 59, 10, 101, 110, 100, 10, 10, 100, 101, 99, 111, 100, 101, 114, 91, 48, 93, 32, 61, 32, 114, 101, 97, 100, 95, 105, 110, 116, 101, 103, 101, 114, 59, 10, 100, 101, 99, 111, 100, 101, 114, 91, 49, 93, 32, 61, 32, 114, 101, 97, 100, 95, 110, 101, 103, 97, 116, 105, 118, 101, 95, 105, 110, 116, 101, 103, 101, 114, 59, 10, 100, 101, 99, 111, 100, 101, 114, 91, 50, 93, 32, 61, 32, 114, 101, 97, 100, 95, 115, 116, 114, 105, 110, 103, 59, 10, 100, 101, 99, 111, 100, 101, 114, 91, 51, 93, 32, 61, 32, 114, 101, 97, 100, 95, 117, 110, 105, 99, 111, 100, 101, 95, 115, 116, 114, 105, 110, 103, 59, 10, 100, 101, 99, 111, 100, 101, 114, 91, 52, 93, 32, 61, 32, 114, 101, 97, 100, 95, 97, 114, 114, 97, 121, 59, 10, 100, 101, 99, 111, 100, 101, 114, 91, 53, 93, 32, 61, 32, 114, 101, 97, 100, 95, 109, 97, 112, 59, 10, 100, 101, 99, 111, 100, 101, 114, 91, 54, 93, 32, 61, 32, 114, 101, 97, 100, 95, 115, 101, 109, 97, 110, 116, 105, 99, 59, 10, 100, 101, 99, 111, 100, 101, 114, 91, 55, 93, 32, 61, 32, 114, 101, 97, 100, 95, 115, 105, 109, 112, 108, 101, 59, 10, 10, 45, 45, 32, 111, 112, 116, 115, 46, 109, 111, 114, 101, 40, 110, 41, 32, 45, 62, 32, 119, 97, 110, 116, 32, 109, 111, 114, 101, 32, 100, 97, 116, 97, 10, 45, 45, 32, 111, 112, 116, 115, 46, 115, 105, 109, 112, 108, 101, 32, 45, 62, 32, 100, 101, 99, 111, 100, 101, 32, 115, 105, 109, 112, 108, 101, 32, 118, 97, 108, 117, 101, 10, 45, 45, 32, 111, 112, 116, 115, 91, 105, 110, 116, 93, 32, 45, 62, 32, 116, 97, 103, 103, 101, 100, 32, 100, 101, 99, 111, 100, 101, 114, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 99, 111, 100, 101, 40, 115, 44, 32, 111, 112, 116, 115, 41, 10, 9, 108, 111, 99, 97, 108, 32, 102, 104, 32, 61, 32, 123, 125, 59, 10, 9, 108, 111, 99, 97, 108, 32, 112, 111, 115, 32, 61, 32, 49, 59, 10, 10, 9, 108, 111, 99, 97, 108, 32, 109, 111, 114, 101, 59, 10, 9, 105, 102, 32, 116, 121, 112, 101, 40, 111, 112, 116, 115, 41, 32, 61, 61, 32, 34, 102, 117, 110, 99, 116, 105, 111, 110, 34, 32, 116, 104, 101, 110, 10, 9, 9, 109, 111, 114, 101, 32, 61, 32, 111, 112, 116, 115, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 116, 121, 112, 101, 40, 111, 112, 116, 115, 41, 32, 61, 61, 32, 34, 116, 97, 98, 108, 101, 34, 32, 116, 104, 101, 110, 10, 9, 9, 109, 111, 114, 101, 32, 61, 32, 111, 112, 116, 115, 46, 109, 111, 114, 101, 59, 10, 9, 101, 108, 115, 101, 105, 102, 32, 111, 112, 116, 115, 32, 126, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 10, 9, 9, 101, 114, 114, 111, 114, 40, 40, 34, 98, 97, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 35, 50, 32, 116, 111, 32, 39, 100, 101, 99, 111, 100, 101, 39, 32, 40, 102, 117, 110, 99, 116, 105, 111, 110, 32, 111, 114, 32, 116, 97, 98, 108, 101, 32, 101, 120, 112, 101, 99, 116, 101, 100, 44, 32, 103, 111, 116, 32, 37, 115, 41, 34, 41, 58, 102, 111, 114, 109, 97, 116, 40, 116, 121, 112, 101, 40, 111, 112, 116, 115, 41, 41, 41, 59, 10, 9, 101, 110, 100, 10, 9, 105, 102, 32, 116, 121, 112, 101, 40, 109, 111, 114, 101, 41, 32, 126, 61, 32, 34, 102, 117, 110, 99, 116, 105, 111, 110, 34, 32, 116, 104, 101, 110, 10, 9, 9, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 111, 114, 101, 40, 41, 10, 9, 9, 9, 101, 114, 114, 111, 114, 32, 34, 105, 110, 112, 117, 116, 32, 116, 111, 111, 32, 115, 104, 111, 114, 116, 34, 59, 10, 9, 9, 101, 110, 100, 10, 9, 101, 110, 100, 10, 10, 9, 102, 117, 110, 99, 116, 105, 111, 110, 32, 102, 104, 58, 114, 101, 97, 100, 40, 98, 121, 116, 101, 115, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 114, 101, 116, 32, 61, 32, 115, 58, 115, 117, 98, 40, 112, 111, 115, 44, 32, 112, 111, 115, 32, 43, 32, 98, 121, 116, 101, 115, 32, 45, 32, 49, 41, 59, 10, 9, 9, 105, 102, 32, 35, 114, 101, 116, 32, 60, 32, 98, 121, 116, 101, 115, 32, 116, 104, 101, 110, 10, 9, 9, 9, 114, 101, 116, 32, 61, 32, 109, 111, 114, 101, 40, 98, 121, 116, 101, 115, 32, 45, 32, 35, 114, 101, 116, 44, 32, 102, 104, 44, 32, 111, 112, 116, 115, 41, 59, 10, 9, 9, 9, 105, 102, 32, 114, 101, 116, 32, 116, 104, 101, 110, 32, 115, 101, 108, 102, 58, 119, 114, 105, 116, 101, 40, 114, 101, 116, 41, 59, 32, 101, 110, 100, 10, 9, 9, 9, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 114, 101, 97, 100, 40, 98, 121, 116, 101, 115, 41, 59, 10, 9, 9, 101, 110, 100, 10, 9, 9, 112, 111, 115, 32, 61, 32, 112, 111, 115, 32, 43, 32, 98, 121, 116, 101, 115, 59, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 59, 10, 9, 101, 110, 100, 10, 10, 9, 102, 117, 110, 99, 116, 105, 111, 110, 32, 102, 104, 58, 119, 114, 105, 116, 101, 40, 98, 121, 116, 101, 115, 41, 32, 45, 45, 32, 108, 117, 97, 99, 104, 101, 99, 107, 58, 32, 110, 111, 32, 115, 101, 108, 102, 10, 9, 9, 115, 32, 61, 32, 115, 32, 46, 46, 32, 98, 121, 116, 101, 115, 59, 10, 9, 9, 105, 102, 32, 112, 111, 115, 32, 62, 32, 50, 53, 54, 32, 116, 104, 101, 110, 10, 9, 9, 9, 115, 32, 61, 32, 115, 58, 115, 117, 98, 40, 112, 111, 115, 32, 43, 32, 49, 41, 59, 10, 9, 9, 9, 112, 111, 115, 32, 61, 32, 49, 59, 10, 9, 9, 101, 110, 100, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 35, 98, 121, 116, 101, 115, 59, 10, 9, 101, 110, 100, 10, 10, 9, 114, 101, 116, 117, 114, 110, 32, 114, 101, 97, 100, 95, 111, 98, 106, 101, 99, 116, 40, 102, 104, 44, 32, 111, 112, 116, 115, 41, 59, 10, 101, 110, 100, 10, 10, 114, 101, 116, 117, 114, 110, 32, 123, 10, 9, 45, 45, 32, 101, 110, 45, 47, 100, 101, 99, 111, 100, 101, 114, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 10, 32, 32, 32, 32, 114, 97, 119, 95, 101, 110, 99, 111, 100, 101, 32, 61, 32, 101, 110, 99, 111, 100, 101, 59, 10, 9, 114, 97, 119, 95, 100, 101, 99, 111, 100, 101, 32, 61, 32, 100, 101, 99, 111, 100, 101, 59, 10, 10, 9, 45, 45, 32, 116, 97, 98, 108, 101, 115, 32, 111, 102, 32, 112, 101, 114, 45, 116, 121, 112, 101, 32, 101, 110, 45, 47, 100, 101, 99, 111, 100, 101, 114, 115, 10, 9, 116, 121, 112, 101, 95, 101, 110, 99, 111, 100, 101, 114, 115, 32, 61, 32, 101, 110, 99, 111, 100, 101, 114, 59, 10, 9, 116, 121, 112, 101, 95, 100, 101, 99, 111, 100, 101, 114, 115, 32, 61, 32, 100, 101, 99, 111, 100, 101, 114, 59, 10, 10, 9, 45, 45, 32, 115, 112, 101, 99, 105, 97, 108, 32, 116, 114, 101, 97, 116, 109, 101, 110, 116, 32, 102, 111, 114, 32, 116, 97, 103, 103, 101, 100, 32, 118, 97, 108, 117, 101, 115, 10, 9, 116, 97, 103, 103, 101, 100, 95, 100, 101, 99, 111, 100, 101, 114, 115, 32, 61, 32, 116, 97, 103, 103, 101, 100, 95, 100, 101, 99, 111, 100, 101, 114, 115, 59, 10, 10, 9, 45, 45, 32, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 115, 32, 102, 111, 114, 32, 97, 110, 110, 111, 116, 97, 116, 101, 100, 32, 116, 121, 112, 101, 115, 10, 9, 115, 105, 109, 112, 108, 101, 32, 61, 32, 115, 105, 109, 112, 108, 101, 59, 10, 9, 116, 97, 103, 103, 101, 100, 32, 61, 32, 116, 97, 103, 103, 101, 100, 59, 10, 10, 9, 45, 45, 32, 112, 114, 101, 45, 100, 101, 102, 105, 110, 101, 100, 32, 115, 105, 109, 112, 108, 101, 32, 118, 97, 108, 117, 101, 115, 10, 9, 110, 117, 108, 108, 32, 61, 32, 110, 117, 108, 108, 59, 10, 9, 117, 110, 100, 101, 102, 105, 110, 101, 100, 32, 61, 32, 117, 110, 100, 101, 102, 105, 110, 101, 100, 59, 10, 125, 59, 10]);
Module['FS_createDataFile']('/', 'cbor.lua', fileData2, true, true, false);
var fileData3 = [];
fileData3.push.apply(fileData3, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 10, 10, 45, 45, 45, 32, 90, 101, 110, 99, 111, 100, 101, 32, 100, 97, 116, 97, 32, 105, 110, 116, 101, 114, 110, 97, 108, 115, 10, 10, 45, 45, 32, 85, 115, 101, 100, 32, 105, 110, 32, 115, 99, 101, 110, 97, 114, 105, 111, 39, 115, 32, 115, 99, 104, 101, 109, 97, 32, 100, 101, 99, 108, 97, 114, 97, 116, 105, 111, 110, 115, 32, 116, 111, 32, 99, 97, 115, 116, 32, 116, 111, 32, 122, 101, 110, 114, 111, 111, 109, 46, 32, 116, 121, 112, 101, 10, 90, 69, 78, 46, 103, 101, 116, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 44, 32, 107, 101, 121, 44, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 111, 98, 106, 44, 32, 34, 90, 69, 78, 46, 103, 101, 116, 32, 110, 111, 32, 111, 98, 106, 101, 99, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 107, 101, 121, 41, 32, 61, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 44, 32, 34, 90, 69, 78, 46, 103, 101, 116, 32, 107, 101, 121, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 105, 110, 103, 34, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 111, 114, 32, 116, 121, 112, 101, 40, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 41, 32, 61, 61, 32, 39, 102, 117, 110, 99, 116, 105, 111, 110, 39, 44, 10, 9, 9, 9, 32, 32, 34, 90, 69, 78, 46, 103, 101, 116, 32, 105, 110, 118, 97, 108, 105, 100, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 34, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 10, 32, 32, 32, 105, 102, 32, 107, 101, 121, 32, 61, 61, 32, 34, 46, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 107, 32, 61, 32, 111, 98, 106, 10, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 107, 32, 61, 32, 111, 98, 106, 91, 107, 101, 121, 93, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 107, 44, 32, 34, 75, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 111, 98, 106, 101, 99, 116, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 58, 32, 34, 46, 46, 107, 101, 121, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 110, 105, 108, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 116, 121, 112, 101, 40, 107, 41, 10, 32, 32, 32, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 41, 32, 97, 110, 100, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 116, 104, 101, 110, 32, 114, 101, 115, 32, 61, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 107, 41, 32, 103, 111, 116, 111, 32, 111, 107, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 41, 32, 97, 110, 100, 32, 110, 111, 116, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 116, 104, 101, 110, 32, 114, 101, 115, 32, 61, 32, 107, 32, 103, 111, 116, 111, 32, 111, 107, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 61, 32, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 102, 117, 110, 40, 107, 41, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 116, 104, 101, 110, 32, 114, 101, 115, 32, 61, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 114, 101, 115, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 103, 111, 116, 111, 32, 111, 107, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 32, 114, 101, 115, 32, 61, 32, 107, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 115, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 102, 117, 110, 44, 32, 107, 41, 10, 9, 32, 32, 105, 102, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 116, 104, 101, 110, 32, 114, 101, 115, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 44, 32, 114, 101, 115, 41, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 58, 58, 111, 107, 58, 58, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 79, 75, 32, 97, 110, 100, 32, 114, 101, 115, 44, 32, 34, 90, 69, 78, 46, 103, 101, 116, 32, 111, 110, 32, 105, 110, 118, 97, 108, 105, 100, 32, 107, 101, 121, 58, 32, 34, 46, 46, 107, 101, 121, 46, 46, 34, 32, 40, 34, 46, 46, 116, 46, 46, 34, 41, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 10, 101, 110, 100, 10, 10, 10, 45, 45, 45, 32, 71, 105, 118, 101, 110, 32, 98, 108, 111, 99, 107, 32, 40, 73, 78, 32, 114, 101, 97, 100, 45, 111, 110, 108, 121, 32, 109, 101, 109, 111, 114, 121, 41, 10, 45, 45, 32, 64, 115, 101, 99, 116, 105, 111, 110, 32, 71, 105, 118, 101, 110, 10, 10, 45, 45, 45, 10, 45, 45, 32, 71, 117, 101, 115, 115, 32, 104, 111, 119, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 116, 104, 101, 32, 111, 98, 106, 101, 99, 116, 44, 32, 117, 115, 105, 110, 103, 32, 119, 104, 97, 116, 32, 102, 111, 114, 109, 97, 116, 32, 111, 114, 32, 115, 99, 104, 101, 109, 97, 10, 45, 45, 32, 99, 104, 101, 99, 107, 32, 116, 104, 101, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 115, 116, 114, 105, 110, 103, 32, 40, 99, 111, 109, 105, 110, 103, 32, 115, 116, 114, 97, 105, 103, 104, 116, 32, 102, 114, 111, 109, 32, 122, 101, 110, 99, 111, 100, 101, 41, 10, 45, 45, 32, 99, 111, 110, 115, 105, 100, 101, 114, 105, 110, 103, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 111, 102, 32, 116, 104, 101, 32, 111, 98, 106, 101, 99, 116, 58, 10, 45, 45, 32, 96, 96, 96, 10, 45, 45, 32, 116, 121, 112, 101, 32, 32, 32, 32, 100, 101, 102, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 118, 10, 45, 45, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 45, 45, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 99, 104, 101, 109, 97, 32, 32, 32, 32, 115, 99, 104, 101, 109, 97, 95, 102, 40, 61, 61, 61, 44, 32, 100, 101, 102, 97, 117, 108, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 41, 10, 45, 45, 32, 115, 116, 114, 32, 32, 32, 32, 32, 102, 111, 114, 109, 97, 116, 32, 32, 32, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 102, 111, 114, 109, 97, 116, 41, 10, 45, 45, 32, 110, 117, 109, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 110, 117, 109, 98, 101, 114, 41, 10, 45, 45, 32, 116, 97, 98, 108, 101, 32, 32, 32, 102, 32, 100, 105, 99, 116, 32, 32, 32, 32, 100, 101, 101, 112, 109, 97, 112, 40, 116, 97, 98, 108, 101, 44, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 102, 41, 41, 10, 45, 45, 32, 116, 97, 98, 108, 101, 32, 32, 32, 102, 32, 97, 114, 114, 97, 121, 32, 32, 32, 100, 101, 101, 112, 109, 97, 112, 40, 116, 97, 98, 108, 101, 44, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 102, 41, 41, 10, 45, 45, 32, 96, 96, 96, 10, 45, 45, 32, 114, 101, 116, 117, 114, 110, 115, 32, 97, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 111, 105, 110, 116, 101, 114, 115, 32, 97, 110, 100, 32, 115, 116, 114, 105, 110, 103, 32, 100, 101, 115, 99, 32, 116, 104, 97, 116, 10, 45, 45, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 100, 32, 98, 121, 32, 64, 123, 111, 112, 101, 114, 97, 116, 101, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 125, 10, 45, 45, 32, 123, 32, 102, 117, 110, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 111, 105, 110, 116, 101, 114, 10, 45, 45, 32, 32, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 32, 61, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 115, 116, 114, 105, 110, 103, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 10, 45, 45, 32, 32, 32, 99, 104, 101, 99, 107, 32, 32, 32, 32, 32, 32, 32, 61, 32, 99, 104, 101, 99, 107, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 111, 105, 110, 116, 101, 114, 10, 45, 45, 32, 32, 32, 114, 97, 119, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 114, 97, 119, 32, 100, 97, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 10, 45, 45, 32, 32, 32, 40, 110, 97, 109, 101, 41, 32, 32, 32, 32, 32, 32, 61, 32, 107, 101, 121, 32, 110, 97, 109, 101, 32, 111, 102, 32, 100, 97, 116, 97, 32, 40, 115, 101, 116, 32, 101, 120, 116, 101, 114, 110, 97, 108, 108, 121, 41, 10, 45, 45, 32, 32, 32, 40, 114, 111, 111, 116, 41, 32, 32, 32, 32, 32, 32, 61, 32, 114, 111, 111, 116, 32, 115, 101, 99, 116, 105, 111, 110, 32, 110, 97, 109, 101, 32, 40, 115, 101, 116, 32, 101, 120, 116, 101, 114, 110, 97, 108, 108, 121, 41, 10, 45, 45, 32, 32, 32, 108, 117, 97, 116, 121, 112, 101, 32, 32, 32, 32, 32, 61, 32, 116, 121, 112, 101, 32, 111, 102, 32, 114, 97, 119, 32, 100, 97, 116, 97, 32, 102, 111, 114, 32, 108, 117, 97, 10, 45, 45, 32, 32, 32, 122, 101, 110, 116, 121, 112, 101, 32, 32, 32, 32, 32, 61, 32, 116, 121, 112, 101, 32, 111, 102, 32, 100, 97, 116, 97, 32, 102, 111, 114, 32, 122, 101, 110, 114, 111, 111, 109, 32, 40, 97, 114, 114, 97, 121, 44, 32, 100, 105, 99, 116, 44, 32, 101, 108, 101, 109, 101, 110, 116, 44, 32, 115, 99, 104, 101, 109, 97, 41, 10, 45, 45, 32, 125, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 117, 101, 115, 115, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 111, 98, 106, 44, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 111, 98, 106, 116, 121, 112, 101, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 10, 32, 32, 32, 45, 45, 32, 97, 32, 100, 101, 102, 105, 110, 101, 100, 32, 115, 99, 104, 101, 109, 97, 32, 111, 118, 101, 114, 114, 105, 100, 101, 115, 32, 97, 110, 121, 32, 111, 116, 104, 101, 114, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 10, 32, 32, 32, 116, 32, 61, 32, 90, 69, 78, 46, 115, 99, 104, 101, 109, 97, 115, 91, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 93, 10, 32, 32, 32, 105, 102, 32, 116, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 40, 123, 32, 102, 117, 110, 32, 61, 32, 116, 44, 10, 9, 9, 9, 32, 32, 32, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 115, 99, 104, 101, 109, 97, 39, 44, 10, 9, 9, 9, 32, 32, 32, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 111, 98, 106, 116, 121, 112, 101, 44, 10, 9, 9, 9, 32, 32, 32, 114, 97, 119, 32, 61, 32, 111, 98, 106, 44, 10, 9, 9, 9, 32, 32, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 111, 114, 32, 111, 98, 106, 116, 121, 112, 101, 32, 125, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 111, 98, 106, 116, 121, 112, 101, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 105, 102, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 116, 104, 101, 110, 10, 9, 9, 32, 101, 114, 114, 111, 114, 40, 34, 85, 110, 100, 101, 102, 105, 110, 101, 100, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 111, 114, 32, 115, 116, 114, 105, 110, 103, 32, 111, 98, 106, 101, 99, 116, 34, 44, 50, 41, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 114, 101, 115, 32, 61, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 41, 10, 9, 32, 32, 114, 101, 115, 46, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 10, 9, 32, 32, 114, 101, 115, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 10, 9, 32, 32, 114, 101, 115, 46, 114, 97, 119, 32, 61, 32, 111, 98, 106, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 40, 114, 101, 115, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 111, 98, 106, 116, 121, 112, 101, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 61, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 111, 98, 106, 116, 121, 112, 101, 41, 10, 9, 32, 32, 114, 101, 115, 46, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 10, 9, 32, 32, 114, 101, 115, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 10, 9, 32, 32, 114, 101, 115, 46, 114, 97, 119, 32, 61, 32, 111, 98, 106, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 40, 114, 101, 115, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 58, 32, 118, 97, 108, 117, 101, 95, 101, 110, 99, 111, 100, 105, 110, 103, 32, 46, 46, 32, 100, 97, 116, 97, 95, 116, 121, 112, 101, 10, 32, 32, 32, 45, 45, 32, 118, 97, 108, 117, 101, 95, 101, 110, 99, 111, 100, 105, 110, 103, 58, 32, 98, 97, 115, 101, 54, 52, 44, 32, 104, 101, 120, 44, 32, 101, 116, 99, 46, 10, 32, 32, 32, 45, 45, 32, 100, 97, 116, 97, 95, 116, 121, 112, 101, 58, 32, 97, 114, 114, 97, 121, 44, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 44, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 10, 32, 32, 32, 105, 102, 32, 111, 98, 106, 116, 121, 112, 101, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 116, 111, 107, 115, 32, 61, 32, 115, 116, 114, 116, 111, 107, 40, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 44, 39, 91, 94, 95, 93, 43, 39, 41, 10, 9, 32, 32, 105, 102, 32, 110, 111, 116, 32, 40, 35, 116, 111, 107, 115, 32, 61, 61, 32, 50, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 101, 114, 114, 111, 114, 40, 39, 73, 110, 118, 97, 108, 105, 100, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 58, 32, 39, 46, 46, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 46, 46, 39, 32, 40, 109, 117, 115, 116, 32, 98, 101, 32, 34, 98, 97, 115, 101, 54, 52, 32, 97, 114, 114, 97, 121, 34, 32, 111, 114, 32, 34, 115, 116, 114, 105, 110, 103, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 34, 32, 101, 116, 99, 46, 41, 39, 44, 50, 41, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 45, 45, 32, 122, 101, 110, 116, 121, 112, 101, 115, 10, 9, 32, 32, 105, 102, 32, 110, 111, 116, 32, 40, 40, 116, 111, 107, 115, 91, 50, 93, 32, 61, 61, 32, 39, 97, 114, 114, 97, 121, 39, 41, 32, 111, 114, 32, 40, 116, 111, 107, 115, 91, 50, 93, 32, 61, 61, 32, 39, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 39, 41, 32, 111, 114, 32, 40, 116, 111, 107, 115, 91, 50, 93, 32, 61, 61, 32, 39, 115, 116, 114, 117, 99, 116, 117, 114, 101, 39, 41, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 101, 114, 114, 111, 114, 40, 39, 73, 110, 118, 97, 108, 105, 100, 32, 116, 97, 98, 108, 101, 32, 116, 121, 112, 101, 58, 32, 39, 46, 46, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 46, 46, 32, 39, 32, 40, 109, 117, 115, 116, 32, 98, 101, 32, 97, 114, 114, 97, 121, 32, 111, 114, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 41, 39, 44, 32, 50, 41, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 114, 101, 115, 32, 61, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 116, 111, 107, 115, 91, 49, 93, 41, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 114, 101, 115, 32, 116, 104, 101, 110, 10, 9, 9, 32, 101, 114, 114, 111, 114, 40, 39, 73, 110, 118, 97, 108, 105, 100, 32, 39, 46, 46, 116, 111, 107, 115, 91, 50, 93, 46, 46, 39, 32, 101, 110, 99, 111, 100, 105, 110, 103, 58, 32, 39, 46, 46, 116, 111, 107, 115, 91, 49, 93, 44, 32, 50, 41, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 114, 101, 115, 46, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 116, 97, 98, 108, 101, 39, 10, 9, 32, 32, 114, 101, 115, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 116, 111, 107, 115, 91, 50, 93, 32, 45, 45, 32, 122, 101, 110, 116, 121, 112, 101, 115, 32, 99, 111, 117, 112, 108, 101, 115, 32, 119, 105, 116, 104, 32, 116, 97, 98, 108, 101, 10, 9, 32, 32, 114, 101, 115, 46, 114, 97, 119, 32, 61, 32, 111, 98, 106, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 40, 114, 101, 115, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 114, 114, 111, 114, 40, 39, 73, 110, 118, 97, 108, 105, 100, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 111, 114, 32, 116, 121, 112, 101, 32, 39, 46, 46, 111, 98, 106, 116, 121, 112, 101, 46, 46, 39, 58, 32, 39, 46, 46, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 44, 32, 50, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 101, 110, 100, 10, 10, 45, 45, 32, 116, 97, 107, 101, 115, 32, 97, 32, 100, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 32, 97, 110, 100, 32, 116, 104, 101, 32, 103, 117, 101, 115, 115, 101, 100, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 44, 32, 111, 112, 101, 114, 97, 116, 101, 115, 32, 116, 104, 101, 10, 45, 45, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 115, 32, 116, 104, 101, 32, 114, 101, 115, 117, 108, 116, 105, 110, 103, 32, 114, 97, 119, 32, 100, 97, 116, 97, 32, 116, 111, 32, 98, 101, 32, 117, 115, 101, 100, 32, 105, 110, 115, 105, 100, 101, 32, 116, 104, 101, 10, 45, 45, 32, 87, 72, 69, 78, 32, 98, 108, 111, 99, 107, 32, 105, 110, 32, 72, 69, 65, 80, 46, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 111, 112, 101, 114, 97, 116, 101, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 103, 117, 101, 115, 115, 101, 100, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 103, 117, 101, 115, 115, 101, 100, 46, 102, 117, 110, 32, 116, 104, 101, 110, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 39, 78, 111, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 103, 117, 101, 115, 115, 101, 100, 39, 44, 32, 50, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 109, 97, 107, 101, 32, 120, 120, 120, 32, 112, 114, 105, 110, 116, 32, 116, 111, 32, 115, 116, 100, 101, 114, 114, 33, 10, 32, 32, 32, 45, 45, 32, 120, 120, 120, 40, 39, 79, 112, 101, 114, 97, 116, 105, 110, 103, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 111, 110, 58, 32, 39, 46, 46, 103, 117, 101, 115, 115, 101, 100, 46, 110, 97, 109, 101, 41, 10, 32, 32, 32, 105, 102, 32, 103, 117, 101, 115, 115, 101, 100, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 115, 99, 104, 101, 109, 97, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 103, 117, 101, 115, 115, 101, 100, 46, 102, 117, 110, 40, 103, 117, 101, 115, 115, 101, 100, 46, 114, 97, 119, 41, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 103, 117, 101, 115, 115, 101, 100, 46, 108, 117, 97, 116, 121, 112, 101, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 98, 101, 116, 116, 101, 114, 32, 101, 114, 114, 111, 114, 32, 99, 104, 101, 99, 107, 105, 110, 103, 32, 111, 110, 32, 100, 101, 101, 112, 109, 97, 112, 63, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 103, 117, 101, 115, 115, 101, 100, 46, 99, 104, 101, 99, 107, 41, 32, 61, 61, 32, 39, 102, 117, 110, 99, 116, 105, 111, 110, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 101, 112, 109, 97, 112, 40, 103, 117, 101, 115, 115, 101, 100, 46, 99, 104, 101, 99, 107, 44, 32, 103, 117, 101, 115, 115, 101, 100, 46, 114, 97, 119, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 101, 101, 112, 109, 97, 112, 40, 103, 117, 101, 115, 115, 101, 100, 46, 102, 117, 110, 44, 32, 103, 117, 101, 115, 115, 101, 100, 46, 114, 97, 119, 41, 10, 32, 32, 32, 101, 108, 115, 101, 32, 45, 45, 32, 111, 98, 106, 101, 99, 116, 10, 9, 32, 32, 32, 105, 102, 32, 103, 117, 101, 115, 115, 101, 100, 46, 99, 104, 101, 99, 107, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 103, 117, 101, 115, 115, 101, 100, 46, 99, 104, 101, 99, 107, 40, 103, 117, 101, 115, 115, 101, 100, 46, 114, 97, 119, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 103, 117, 101, 115, 115, 101, 100, 46, 102, 117, 110, 40, 103, 117, 101, 115, 115, 101, 100, 46, 114, 97, 119, 41, 10, 9, 101, 110, 100, 10, 101, 110, 100, 10, 10, 10, 45, 45, 32, 79, 99, 116, 101, 116, 32, 116, 111, 32, 115, 116, 114, 105, 110, 103, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 109, 101, 99, 104, 97, 110, 105, 115, 109, 58, 32, 116, 97, 107, 101, 115, 32, 116, 104, 101, 32, 110, 97, 109, 101, 32, 111, 102, 10, 45, 45, 32, 116, 104, 101, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 115, 32, 116, 104, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 46, 32, 79, 99, 116, 101, 116, 32, 105, 115, 32, 97, 32, 102, 105, 114, 115, 116, 32, 99, 108, 97, 115, 115, 10, 45, 45, 32, 99, 105, 116, 105, 122, 101, 110, 32, 105, 110, 32, 90, 101, 110, 114, 111, 111, 109, 32, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 97, 108, 108, 32, 87, 72, 69, 78, 47, 65, 67, 75, 32, 114, 47, 119, 32, 72, 69, 65, 80, 32, 116, 121, 112, 101, 115, 32, 99, 97, 110, 32, 98, 101, 10, 45, 45, 32, 99, 111, 110, 118, 101, 114, 116, 101, 100, 32, 98, 121, 32, 105, 116, 115, 32, 109, 101, 116, 104, 111, 100, 115, 46, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 115, 116, 114, 105, 110, 103, 40, 111, 98, 106, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 98, 106, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 115, 116, 114, 105, 110, 103, 40, 111, 98, 106, 41, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 104, 101, 120, 40, 111, 98, 106, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 98, 106, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 104, 101, 120, 40, 111, 98, 106, 41, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 98, 97, 115, 101, 54, 52, 40, 111, 98, 106, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 98, 106, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 98, 97, 115, 101, 54, 52, 40, 111, 98, 106, 41, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 117, 114, 108, 54, 52, 40, 111, 98, 106, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 98, 106, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 117, 114, 108, 54, 52, 40, 111, 98, 106, 41, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 98, 97, 115, 101, 53, 56, 40, 111, 98, 106, 41, 10, 9, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 111, 98, 106, 41, 10, 9, 105, 102, 32, 116, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 98, 106, 32, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 98, 97, 115, 101, 53, 56, 40, 111, 98, 106, 41, 10, 32, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 98, 105, 110, 40, 111, 98, 106, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 98, 106, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 98, 105, 110, 40, 111, 98, 106, 41, 10, 101, 110, 100, 10, 45, 45, 32, 116, 97, 107, 101, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 114, 101, 116, 117, 114, 110, 115, 32, 116, 104, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 44, 32, 103, 111, 111, 100, 32, 102, 111, 114, 32, 117, 115, 101, 32, 105, 110, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 116, 97, 98, 108, 101, 41, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 99, 97, 115, 116, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 99, 97, 115, 116, 32, 116, 104, 101, 110, 32, 101, 114, 114, 111, 114, 40, 34, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 32, 99, 97, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 110, 105, 108, 32, 97, 114, 103, 117, 109, 101, 110, 116, 34, 44, 32, 50, 41, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 32, 32, 32, 32, 99, 97, 115, 116, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 115, 116, 114, 105, 110, 103, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 99, 97, 115, 116, 32, 61, 61, 32, 39, 104, 101, 120, 39, 32, 32, 32, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 104, 101, 120, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 99, 97, 115, 116, 32, 61, 61, 32, 39, 98, 97, 115, 101, 54, 52, 39, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 98, 97, 115, 101, 54, 52, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 99, 97, 115, 116, 32, 61, 61, 32, 39, 117, 114, 108, 54, 52, 39, 32, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 117, 114, 108, 54, 52, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 99, 97, 115, 116, 32, 61, 61, 32, 39, 98, 97, 115, 101, 53, 56, 39, 32, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 98, 97, 115, 101, 53, 56, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 99, 97, 115, 116, 32, 61, 61, 32, 39, 98, 105, 110, 39, 32, 32, 32, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 98, 105, 110, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 99, 97, 115, 116, 32, 61, 61, 32, 39, 98, 105, 110, 97, 114, 121, 39, 32, 32, 32, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 111, 117, 116, 99, 97, 115, 116, 95, 98, 105, 110, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 99, 97, 115, 116, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 41, 32, 114, 101, 116, 117, 114, 110, 40, 118, 41, 32, 101, 110, 100, 41, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 73, 110, 118, 97, 108, 105, 100, 32, 111, 117, 116, 112, 117, 116, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 58, 32, 34, 46, 46, 99, 97, 115, 116, 44, 32, 50, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 104, 101, 99, 107, 95, 99, 111, 100, 101, 99, 40, 118, 97, 108, 117, 101, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 110, 97, 109, 101, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 118, 97, 108, 117, 101, 93, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 110, 97, 109, 101, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 118, 97, 108, 117, 101, 93, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 115, 99, 104, 101, 109, 97, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 110, 97, 109, 101, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 118, 97, 108, 117, 101, 93, 46, 101, 110, 99, 111, 100, 105, 110, 103, 32, 111, 114, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 110, 97, 109, 101, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 110, 97, 109, 101, 10, 101, 110, 100, 10, 10, 45, 45, 32, 67, 114, 97, 119, 108, 115, 32, 97, 32, 119, 104, 111, 108, 101, 32, 116, 97, 98, 108, 101, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 32, 97, 110, 100, 32, 99, 111, 108, 108, 101, 99, 116, 115, 32, 97, 108, 108, 32, 115, 116, 114, 105, 110, 103, 115, 32, 97, 110, 100, 32, 111, 99, 116, 101, 116, 115, 10, 45, 45, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 105, 110, 32, 105, 116, 115, 32, 107, 101, 121, 115, 32, 97, 110, 100, 32, 118, 97, 108, 117, 101, 115, 46, 32, 67, 111, 110, 118, 101, 114, 116, 115, 32, 110, 117, 109, 98, 101, 114, 115, 32, 116, 111, 10, 45, 45, 32, 115, 116, 114, 105, 110, 103, 115, 46, 32, 83, 116, 114, 117, 99, 116, 117, 114, 101, 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 105, 115, 58, 10, 45, 45, 32, 123, 32, 111, 99, 116, 101, 116, 115, 32, 61, 32, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 10, 45, 45, 32, 32, 32, 115, 116, 114, 105, 110, 103, 115, 32, 61, 32, 115, 116, 114, 105, 110, 103, 32, 125, 10, 45, 45, 32, 99, 97, 108, 108, 105, 110, 103, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 121, 32, 119, 97, 110, 116, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 97, 108, 108, 32, 116, 111, 32, 111, 99, 116, 101, 116, 32, 111, 114, 32, 115, 116, 114, 105, 110, 103, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 116, 97, 98, 41, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 116, 97, 98, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 58, 32, 110, 111, 116, 32, 97, 32, 116, 97, 98, 108, 101, 34, 44, 50, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 111, 99, 116, 101, 116, 115, 32, 61, 32, 79, 67, 84, 69, 84, 46, 122, 101, 114, 111, 40, 49, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 116, 114, 105, 110, 103, 115, 32, 61, 32, 34, 75, 34, 10, 32, 32, 32, 115, 111, 114, 116, 95, 97, 112, 112, 108, 121, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 44, 107, 41, 10, 9, 9, 32, 115, 116, 114, 105, 110, 103, 115, 32, 61, 32, 115, 116, 114, 105, 110, 103, 115, 32, 46, 46, 32, 116, 111, 115, 116, 114, 105, 110, 103, 40, 107, 41, 10, 9, 9, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 116, 121, 112, 101, 40, 118, 41, 10, 9, 9, 32, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 41, 32, 116, 104, 101, 110, 10, 9, 9, 9, 105, 102, 32, 116, 32, 61, 61, 32, 39, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 32, 32, 32, 111, 99, 116, 101, 116, 115, 32, 61, 32, 111, 99, 116, 101, 116, 115, 32, 46, 46, 32, 118, 10, 9, 9, 9, 101, 108, 115, 101, 10, 9, 9, 9, 32, 32, 32, 111, 99, 116, 101, 116, 115, 32, 61, 32, 111, 99, 116, 101, 116, 115, 32, 46, 46, 32, 118, 58, 111, 99, 116, 101, 116, 40, 41, 10, 9, 9, 9, 101, 110, 100, 10, 9, 9, 32, 101, 108, 115, 101, 32, 45, 45, 32, 110, 117, 109, 98, 101, 114, 10, 9, 9, 9, 115, 116, 114, 105, 110, 103, 115, 32, 61, 32, 115, 116, 114, 105, 110, 103, 115, 32, 46, 46, 32, 116, 111, 115, 116, 114, 105, 110, 103, 40, 118, 41, 10, 9, 9, 32, 101, 110, 100, 10, 9, 9, 32, 32, 32, 101, 110, 100, 44, 32, 116, 97, 98, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 111, 99, 116, 101, 116, 115, 32, 61, 32, 111, 99, 116, 101, 116, 115, 44, 10, 9, 9, 9, 115, 116, 114, 105, 110, 103, 115, 32, 61, 32, 115, 116, 114, 105, 110, 103, 115, 32, 125, 10, 101, 110, 100, 10, 10, 45, 45, 45, 10, 45, 45, 32, 67, 111, 109, 112, 97, 114, 101, 32, 101, 113, 117, 97, 108, 105, 116, 121, 32, 111, 102, 32, 116, 119, 111, 32, 100, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 115, 32, 40, 84, 79, 68, 79, 58, 32, 111, 99, 116, 101, 116, 44, 32, 69, 67, 80, 44, 32, 101, 116, 99, 46, 41, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 90, 69, 78, 58, 101, 113, 40, 102, 105, 114, 115, 116, 44, 32, 115, 101, 99, 111, 110, 100, 41, 10, 10, 45, 45, 45, 10, 45, 45, 32, 67, 104, 101, 99, 107, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 111, 98, 106, 101, 99, 116, 32, 105, 115, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 116, 104, 101, 32, 115, 101, 99, 111, 110, 100, 32, 40, 84, 79, 68, 79, 41, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 90, 69, 78, 58, 103, 116, 40, 102, 105, 114, 115, 116, 44, 32, 115, 101, 99, 111, 110, 100, 41, 10, 10, 45, 45, 45, 10, 45, 45, 32, 67, 104, 101, 99, 107, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 111, 98, 106, 101, 99, 116, 32, 105, 115, 32, 108, 101, 115, 115, 101, 114, 32, 116, 104, 97, 110, 32, 116, 104, 101, 32, 115, 101, 99, 111, 110, 100, 32, 40, 84, 79, 68, 79, 41, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 90, 69, 78, 58, 108, 116, 40, 102, 105, 114, 115, 116, 44, 32, 115, 101, 99, 111, 110, 100, 41, 10, 10, 10, 45, 45, 45, 32, 84, 104, 101, 110, 32, 98, 108, 111, 99, 107, 32, 40, 79, 85, 84, 32, 119, 114, 105, 116, 101, 45, 111, 110, 108, 121, 32, 109, 101, 109, 111, 114, 121, 41, 10, 45, 45, 32, 64, 115, 101, 99, 116, 105, 111, 110, 32, 84, 104, 101, 110, 10, 10, 45, 45, 45, 10, 45, 45, 32, 77, 111, 118, 101, 32, 97, 32, 103, 101, 110, 101, 114, 105, 99, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 32, 102, 114, 111, 109, 32, 65, 67, 75, 32, 116, 111, 32, 79, 85, 84, 32, 109, 101, 109, 111, 114, 121, 32, 115, 112, 97, 99, 101, 44, 32, 114, 101, 97, 100, 121, 10, 45, 45, 32, 102, 111, 114, 32, 105, 116, 115, 32, 102, 105, 110, 97, 108, 32, 74, 83, 79, 78, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 97, 110, 100, 32, 112, 114, 105, 110, 116, 32, 111, 117, 116, 46, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 90, 69, 78, 58, 111, 117, 116, 40, 110, 97, 109, 101, 41, 10, 10, 45, 45, 45, 10, 45, 45, 32, 77, 111, 118, 101, 32, 39, 109, 121, 32, 111, 119, 110, 39, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 32, 102, 114, 111, 109, 32, 65, 67, 75, 32, 116, 111, 32, 79, 85, 84, 46, 119, 104, 111, 97, 109, 105, 32, 109, 101, 109, 111, 114, 121, 32, 115, 112, 97, 99, 101, 44, 10, 45, 45, 32, 114, 101, 97, 100, 121, 32, 102, 111, 114, 32, 105, 116, 115, 32, 102, 105, 110, 97, 108, 32, 74, 83, 79, 78, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 97, 110, 100, 32, 112, 114, 105, 110, 116, 32, 111, 117, 116, 46, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 90, 69, 78, 58, 111, 117, 116, 109, 121, 40, 110, 97, 109, 101, 41, 10, 10, 45, 45, 45, 10, 45, 45, 32, 67, 111, 110, 118, 101, 114, 116, 32, 97, 32, 100, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 32, 116, 111, 32, 116, 104, 101, 32, 100, 101, 115, 105, 114, 101, 100, 32, 102, 111, 114, 109, 97, 116, 32, 40, 97, 114, 103, 117, 109, 101, 110, 116, 32, 110, 97, 109, 101, 32, 112, 114, 111, 118, 105, 100, 101, 100, 10, 45, 45, 32, 97, 115, 32, 115, 116, 114, 105, 110, 103, 41, 44, 32, 111, 114, 32, 117, 115, 101, 32, 67, 79, 78, 70, 46, 101, 110, 99, 111, 100, 105, 110, 103, 32, 119, 104, 101, 110, 32, 99, 97, 108, 108, 101, 100, 32, 119, 105, 116, 104, 111, 117, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 10, 45, 45, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 120, 112, 111, 114, 116, 95, 111, 98, 106, 40, 111, 98, 106, 101, 99, 116, 44, 32, 102, 111, 114, 109, 97, 116, 41, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 111, 98, 106, 101, 99, 116, 32, 100, 97, 116, 97, 32, 101, 108, 101, 109, 101, 110, 116, 32, 116, 111, 32, 98, 101, 32, 99, 111, 110, 118, 101, 114, 116, 101, 100, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 102, 111, 114, 109, 97, 116, 32, 112, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 97, 32, 99, 111, 110, 118, 101, 114, 116, 101, 114, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 45, 45, 32, 64, 114, 101, 116, 117, 114, 110, 32, 111, 98, 106, 101, 99, 116, 32, 99, 111, 110, 118, 101, 114, 116, 101, 100, 32, 116, 111, 32, 102, 111, 114, 109, 97, 116, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 120, 112, 111, 114, 116, 95, 97, 114, 114, 40, 111, 98, 106, 101, 99, 116, 44, 32, 102, 111, 114, 109, 97, 116, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 105, 115, 122, 101, 110, 40, 116, 121, 112, 101, 40, 111, 98, 106, 101, 99, 116, 41, 41, 44, 32, 34, 101, 120, 112, 111, 114, 116, 95, 97, 114, 114, 32, 99, 97, 108, 108, 101, 100, 32, 111, 110, 32, 97, 32, 34, 46, 46, 32, 116, 121, 112, 101, 40, 111, 98, 106, 101, 99, 116, 41, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 110, 118, 95, 102, 32, 61, 32, 110, 105, 108, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 116, 32, 61, 32, 116, 121, 112, 101, 40, 102, 111, 114, 109, 97, 116, 41, 10, 32, 32, 32, 105, 102, 32, 102, 111, 114, 109, 97, 116, 32, 97, 110, 100, 32, 102, 116, 32, 61, 61, 32, 39, 102, 117, 110, 99, 116, 105, 111, 110, 39, 32, 116, 104, 101, 110, 32, 99, 111, 110, 118, 95, 102, 32, 61, 32, 102, 111, 114, 109, 97, 116, 32, 103, 111, 116, 111, 32, 111, 107, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 102, 111, 114, 109, 97, 116, 32, 97, 110, 100, 32, 102, 116, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 32, 99, 111, 110, 118, 95, 102, 32, 61, 32, 111, 117, 116, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 102, 111, 114, 109, 97, 116, 41, 46, 102, 117, 110, 32, 103, 111, 116, 111, 32, 111, 107, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 32, 116, 104, 101, 110, 32, 101, 114, 114, 111, 114, 40, 34, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 32, 105, 115, 32, 110, 111, 116, 32, 99, 111, 110, 102, 105, 103, 117, 114, 101, 100, 34, 44, 50, 41, 32, 101, 110, 100, 10, 32, 32, 32, 99, 111, 110, 118, 95, 102, 32, 61, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 102, 117, 110, 32, 45, 45, 32, 102, 97, 108, 108, 98, 97, 99, 107, 32, 116, 111, 32, 99, 111, 110, 102, 105, 103, 117, 114, 101, 100, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 32, 32, 32, 58, 58, 111, 107, 58, 58, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 99, 111, 110, 118, 95, 102, 41, 32, 61, 61, 32, 39, 102, 117, 110, 99, 116, 105, 111, 110, 39, 32, 44, 32, 34, 101, 120, 112, 111, 114, 116, 95, 97, 114, 114, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 111, 116, 32, 99, 111, 110, 102, 105, 103, 117, 114, 101, 100, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 99, 111, 110, 118, 95, 102, 40, 111, 98, 106, 101, 99, 116, 41, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 112, 114, 111, 116, 101, 99, 116, 101, 100, 32, 99, 97, 108, 108, 63, 32, 100, 101, 101, 112, 109, 97, 112, 63, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 120, 112, 111, 114, 116, 95, 111, 98, 106, 40, 111, 98, 106, 101, 99, 116, 44, 32, 102, 111, 114, 109, 97, 116, 41, 10, 32, 32, 32, 45, 45, 32, 67, 79, 78, 70, 32, 123, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 60, 102, 117, 110, 99, 116, 105, 111, 110, 32, 49, 62, 44, 10, 32, 32, 32, 45, 45, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 99, 111, 100, 105, 110, 103, 95, 112, 114, 101, 102, 105, 120, 32, 61, 32, 34, 117, 54, 52, 34, 32, 32, 125, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 111, 98, 106, 101, 99, 116, 44, 32, 34, 101, 120, 112, 111, 114, 116, 95, 111, 98, 106, 32, 111, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 111, 98, 106, 101, 99, 116, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 116, 114, 101, 115, 32, 61, 32, 123, 32, 125, 10, 9, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 105, 112, 97, 105, 114, 115, 40, 111, 98, 106, 101, 99, 116, 41, 32, 100, 111, 32, 45, 45, 32, 111, 110, 108, 121, 32, 102, 108, 97, 116]);
fileData3.push.apply(fileData3, [32, 116, 97, 98, 108, 101, 115, 32, 115, 117, 112, 112, 111, 114, 116, 32, 114, 101, 99, 117, 114, 115, 105, 111, 110, 10, 9, 9, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 116, 114, 101, 115, 44, 32, 101, 120, 112, 111, 114, 116, 95, 97, 114, 114, 40, 118, 44, 32, 102, 111, 114, 109, 97, 116, 41, 41, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 101, 115, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 101, 120, 112, 111, 114, 116, 95, 97, 114, 114, 40, 111, 98, 106, 101, 99, 116, 44, 32, 102, 111, 114, 109, 97, 116, 41, 10, 101, 110, 100, 10]);
Module['FS_createDataFile']('/', 'zencode_data.lua', fileData3, true, true, false);
var fileData4 = [];
fileData4.push.apply(fileData4, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 108, 111, 99, 97, 108, 32, 104, 97, 115, 104, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 39, 104, 97, 115, 104, 39, 10, 10, 45, 45, 32, 119, 104, 101, 110, 32, 117, 115, 105, 110, 103, 32, 102, 97, 99, 105, 108, 105, 116, 121, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 44, 32, 103, 108, 111, 98, 97, 108, 32, 104, 97, 115, 104, 101, 114, 115, 32, 97, 114, 101, 32, 99, 114, 101, 97, 116, 101, 100, 32, 111, 110, 108, 121, 32, 111, 110, 99, 101, 10, 83, 72, 65, 50, 53, 54, 32, 61, 32, 110, 105, 108, 10, 83, 72, 65, 53, 49, 50, 32, 61, 32, 110, 105, 108, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 105, 116, 40, 98, 105, 116, 115, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 104, 10, 32, 32, 32, 105, 102, 32, 98, 105, 116, 115, 32, 61, 61, 32, 50, 53, 54, 32, 111, 114, 32, 98, 105, 116, 115, 32, 61, 61, 32, 51, 50, 32, 116, 104, 101, 110, 10, 9, 32, 32, 105, 102, 32, 83, 72, 65, 50, 53, 54, 61, 61, 110, 105, 108, 32, 116, 104, 101, 110, 32, 83, 72, 65, 50, 53, 54, 32, 61, 32, 104, 97, 115, 104, 46, 110, 101, 119, 40, 39, 115, 104, 97, 50, 53, 54, 39, 41, 32, 101, 110, 100, 10, 9, 32, 32, 104, 32, 61, 32, 83, 72, 65, 50, 53, 54, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 98, 105, 116, 115, 32, 61, 61, 32, 53, 49, 50, 32, 111, 114, 32, 98, 105, 116, 115, 32, 61, 61, 32, 54, 52, 32, 116, 104, 101, 110, 10, 9, 32, 32, 105, 102, 32, 83, 72, 65, 53, 49, 50, 61, 61, 110, 105, 108, 32, 116, 104, 101, 110, 32, 83, 72, 65, 53, 49, 50, 32, 61, 32, 104, 97, 115, 104, 46, 110, 101, 119, 40, 39, 115, 104, 97, 53, 49, 50, 39, 41, 32, 101, 110, 100, 10, 9, 32, 32, 104, 32, 61, 32, 83, 72, 65, 53, 49, 50, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 72, 65, 83, 72, 32, 98, 105, 116, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 58, 32, 34, 46, 46, 98, 105, 116, 115, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 104, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 104, 97, 50, 53, 54, 40, 100, 97, 116, 97, 41, 32, 114, 101, 116, 117, 114, 110, 32, 105, 110, 105, 116, 40, 50, 53, 54, 41, 58, 112, 114, 111, 99, 101, 115, 115, 40, 100, 97, 116, 97, 41, 32, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 104, 97, 53, 49, 50, 40, 100, 97, 116, 97, 41, 32, 114, 101, 116, 117, 114, 110, 32, 105, 110, 105, 116, 40, 53, 49, 50, 41, 58, 112, 114, 111, 99, 101, 115, 115, 40, 100, 97, 116, 97, 41, 32, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 75, 68, 70, 40, 100, 97, 116, 97, 44, 32, 98, 105, 116, 115, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 98, 32, 61, 32, 98, 105, 116, 115, 32, 111, 114, 32, 50, 53, 54, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 105, 110, 105, 116, 40, 98, 41, 58, 107, 100, 102, 50, 40, 100, 97, 116, 97, 41, 10, 101, 110, 100, 10, 10, 114, 101, 116, 117, 114, 110, 32, 104, 97, 115, 104, 10]);
Module['FS_createDataFile']('/', 'zenroom_hash.lua', fileData4, true, true, false);
var fileData5 = [];
fileData5.push.apply(fileData5, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 95, 105, 115, 99, 111, 109, 109, 101, 110, 116, 40, 98, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 120, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 99, 104, 97, 114, 40, 98, 58, 98, 121, 116, 101, 40, 49, 41, 41, 10, 32, 32, 32, 105, 102, 32, 120, 32, 61, 61, 32, 39, 35, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 10, 101, 110, 100, 32, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 95, 105, 115, 101, 109, 112, 116, 121, 40, 98, 41, 10, 32, 32, 32, 105, 102, 32, 98, 32, 61, 61, 32, 110, 105, 108, 32, 111, 114, 32, 98, 32, 61, 61, 32, 39, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 10, 101, 110, 100, 32, 101, 110, 100, 10, 45, 45, 32, 114, 101, 116, 117, 114, 110, 115, 32, 97, 110, 32, 105, 116, 101, 114, 97, 116, 111, 114, 32, 102, 111, 114, 32, 110, 101, 119, 108, 105, 110, 101, 32, 116, 101, 114, 109, 105, 110, 97, 116, 105, 111, 110, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 95, 110, 101, 119, 108, 105, 110, 101, 95, 105, 116, 101, 114, 40, 116, 101, 120, 116, 41, 10, 32, 32, 32, 115, 32, 61, 32, 116, 114, 105, 109, 40, 116, 101, 120, 116, 41, 32, 45, 45, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 105, 110, 32, 122, 101, 110, 95, 105, 111, 46, 99, 10, 32, 32, 32, 105, 102, 32, 115, 58, 115, 117, 98, 40, 45, 49, 41, 126, 61, 34, 92, 110, 34, 32, 116, 104, 101, 110, 32, 115, 61, 115, 46, 46, 34, 92, 110, 34, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 58, 103, 109, 97, 116, 99, 104, 40, 34, 40, 46, 45, 41, 92, 110, 34, 41, 32, 45, 45, 32, 105, 116, 101, 114, 97, 116, 111, 114, 115, 32, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 95, 115, 101, 110, 116, 101, 110, 99, 101, 40, 115, 101, 108, 102, 44, 32, 101, 118, 101, 110, 116, 44, 32, 102, 114, 111, 109, 44, 32, 116, 111, 44, 32, 99, 116, 120, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 103, 32, 61, 32, 99, 116, 120, 46, 90, 91, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 46, 46, 34, 95, 115, 116, 101, 112, 115, 34, 93, 10, 32, 32, 32, 99, 116, 120, 46, 90, 46, 79, 75, 32, 61, 32, 102, 97, 108, 115, 101, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 114, 101, 103, 44, 32, 34, 83, 116, 101, 112, 115, 32, 114, 101, 103, 105, 115, 116, 101, 114, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 46, 46, 34, 95, 115, 116, 101, 112, 115, 34, 41, 10, 32, 32, 32, 102, 111, 114, 32, 112, 97, 116, 116, 101, 114, 110, 44, 102, 117, 110, 99, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 114, 101, 103, 41, 32, 100, 111, 10, 9, 32, 32, 105, 102, 32, 40, 116, 121, 112, 101, 40, 102, 117, 110, 99, 41, 32, 126, 61, 32, 34, 102, 117, 110, 99, 116, 105, 111, 110, 34, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 101, 114, 114, 111, 114, 40, 34, 90, 101, 110, 99, 111, 100, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 105, 115, 115, 105, 110, 103, 58, 32, 34, 46, 46, 112, 97, 116, 116, 101, 114, 110, 44, 32, 50, 41, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 111, 112, 116, 105, 109, 105, 122, 101, 32, 105, 110, 32, 67, 10, 9, 32, 32, 45, 45, 32, 114, 101, 109, 111, 118, 101, 32, 39, 39, 32, 99, 111, 110, 116, 101, 110, 116, 115, 44, 32, 108, 111, 119, 101, 114, 32, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 44, 32, 101, 120, 112, 117, 110, 103, 101, 32, 112, 114, 101, 102, 105, 120, 101, 115, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 114, 105, 109, 40, 99, 116, 120, 46, 109, 115, 103, 41, 44, 34, 39, 40, 46, 45, 41, 39, 34, 44, 34, 39, 39, 34, 41, 10, 9, 32, 32, 116, 116, 32, 61, 32, 116, 116, 58, 103, 115, 117, 98, 40, 39, 32, 43, 39, 44, 39, 32, 39, 41, 32, 45, 45, 32, 101, 108, 105, 109, 105, 110, 97, 116, 101, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 105, 110, 116, 101, 114, 110, 97, 108, 32, 115, 112, 97, 99, 101, 115, 10, 9, 32, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 116, 44, 34, 73, 32, 34, 44, 34, 34, 44, 32, 49, 41, 10, 9, 32, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 116, 58, 108, 111, 119, 101, 114, 40, 41, 32, 44, 34, 119, 104, 101, 110, 32, 34, 32, 44, 34, 34, 44, 32, 49, 41, 10, 9, 32, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 116, 44, 34, 116, 104, 101, 110, 32, 34, 32, 44, 34, 34, 44, 32, 49, 41, 10, 9, 32, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 116, 44, 34, 103, 105, 118, 101, 110, 32, 34, 44, 34, 34, 44, 32, 49, 41, 10, 9, 32, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 116, 44, 34, 97, 110, 100, 32, 34, 32, 32, 44, 34, 34, 44, 32, 49, 41, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 101, 120, 112, 117, 110, 103, 101, 32, 111, 110, 108, 121, 32, 102, 105, 114, 115, 116, 32, 39, 97, 110, 100, 39, 10, 9, 32, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 116, 44, 34, 116, 104, 97, 116, 32, 34, 32, 44, 34, 34, 44, 32, 49, 41, 10, 9, 32, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 116, 44, 34, 118, 97, 108, 105, 100, 32, 34, 32, 44, 34, 34, 44, 32, 49, 41, 32, 45, 45, 32, 98, 97, 99, 107, 119, 97, 114, 100, 32, 99, 111, 109, 112, 97, 116, 10, 9, 32, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 116, 44, 34, 107, 110, 111, 119, 110, 32, 97, 115, 32, 34, 44, 32, 34, 34, 44, 32, 49, 41, 10, 9, 32, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 116, 44, 34, 97, 108, 108, 32, 34, 44, 32, 34, 34, 44, 32, 49, 41, 10, 9, 32, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 116, 44, 34, 32, 105, 110, 115, 105, 100, 101, 32, 34, 44, 34, 32, 105, 110, 32, 34, 44, 32, 49, 41, 32, 45, 45, 32, 101, 113, 117, 105, 118, 97, 108, 101, 110, 99, 101, 10, 9, 32, 32, 116, 116, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 116, 116, 44, 34, 32, 97, 110, 32, 34, 44, 34, 32, 97, 32, 34, 44, 32, 49, 41, 10, 9, 32, 32, 105, 102, 32, 115, 116, 114, 99, 97, 115, 101, 99, 109, 112, 40, 116, 116, 44, 32, 112, 97, 116, 116, 101, 114, 110, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 108, 111, 99, 97, 108, 32, 97, 114, 103, 115, 32, 61, 32, 123, 125, 32, 45, 45, 32, 104, 97, 110, 100, 108, 101, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 105, 110, 32, 115, 97, 109, 101, 32, 115, 116, 114, 105, 110, 103, 10, 9, 9, 32, 102, 111, 114, 32, 97, 114, 103, 32, 105, 110, 32, 115, 116, 114, 105, 110, 103, 46, 103, 109, 97, 116, 99, 104, 40, 99, 116, 120, 46, 109, 115, 103, 44, 34, 39, 40, 46, 45, 41, 39, 34, 41, 32, 100, 111, 10, 9, 9, 9, 45, 45, 32, 120, 120, 120, 40, 34, 43, 97, 114, 103, 58, 32, 34, 46, 46, 97, 114, 103, 44, 32, 50, 41, 10, 9, 9, 9, 97, 114, 103, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 103, 115, 117, 98, 40, 97, 114, 103, 44, 32, 39, 32, 39, 44, 32, 39, 95, 39, 41, 10, 9, 9, 9, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 97, 114, 103, 115, 44, 97, 114, 103, 41, 10, 9, 9, 32, 101, 110, 100, 10, 9, 9, 32, 99, 116, 120, 46, 90, 46, 105, 100, 32, 61, 32, 99, 116, 120, 46, 90, 46, 105, 100, 32, 43, 32, 49, 10, 9, 9, 32, 45, 45, 32, 65, 83, 84, 32, 100, 97, 116, 97, 32, 112, 114, 111, 116, 111, 116, 121, 112, 101, 10, 9, 9, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 99, 116, 120, 46, 90, 46, 65, 83, 84, 44, 10, 9, 9, 9, 9, 9, 32, 32, 123, 32, 105, 100, 32, 61, 32, 99, 116, 120, 46, 90, 46, 105, 100, 44, 32, 45, 45, 32, 111, 114, 100, 101, 114, 101, 100, 32, 110, 117, 109, 98, 101, 114, 10, 9, 9, 9, 9, 9, 9, 97, 114, 103, 115, 32, 61, 32, 97, 114, 103, 115, 44, 32, 32, 45, 45, 32, 97, 114, 114, 97, 121, 32, 111, 102, 32, 118, 97, 114, 115, 10, 9, 9, 9, 9, 9, 9, 115, 111, 117, 114, 99, 101, 32, 61, 32, 99, 116, 120, 46, 109, 115, 103, 44, 32, 45, 45, 32, 115, 111, 117, 114, 99, 101, 32, 116, 101, 120, 116, 10, 9, 9, 9, 9, 9, 9, 115, 101, 99, 116, 105, 111, 110, 32, 61, 32, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 44, 10, 9, 9, 9, 9, 9, 9, 104, 111, 111, 107, 32, 61, 32, 102, 117, 110, 99, 32, 32, 32, 32, 32, 32, 32, 125, 41, 32, 45, 45, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 9, 9, 32, 99, 116, 120, 46, 90, 46, 79, 75, 32, 61, 32, 116, 114, 117, 101, 10, 9, 9, 32, 98, 114, 101, 97, 107, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 99, 116, 120, 46, 90, 46, 79, 75, 32, 97, 110, 100, 32, 67, 79, 78, 70, 46, 112, 97, 114, 115, 101, 114, 46, 115, 116, 114, 105, 99, 116, 95, 109, 97, 116, 99, 104, 32, 116, 104, 101, 110, 10, 9, 32, 32, 100, 101, 98, 117, 103, 95, 116, 114, 97, 99, 101, 98, 97, 99, 107, 40, 41, 10, 32, 32, 32, 9, 32, 32, 101, 120, 105, 116, 99, 111, 100, 101, 40, 49, 41, 10, 32, 32, 32, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 90, 101, 110, 99, 111, 100, 101, 32, 112, 97, 116, 116, 101, 114, 110, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 116, 114, 105, 109, 40, 99, 116, 120, 46, 109, 115, 103, 41, 44, 32, 49, 41, 10, 32, 32, 32, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 10, 45, 45, 32, 84, 79, 68, 79, 58, 32, 105, 110, 118, 101, 115, 116, 105, 103, 97, 116, 101, 32, 117, 115, 101, 32, 111, 102, 32, 108, 117, 97, 45, 102, 97, 99, 101, 115, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 101, 116, 95, 114, 117, 108, 101, 40, 116, 101, 120, 116, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 102, 97, 108, 115, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 114, 32, 61, 32, 116, 101, 120, 116, 46, 109, 115, 103, 58, 103, 115, 117, 98, 40, 39, 32, 43, 39, 44, 39, 32, 39, 41, 32, 45, 45, 32, 101, 108, 105, 109, 105, 110, 97, 116, 101, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 105, 110, 116, 101, 114, 110, 97, 108, 32, 115, 112, 97, 99, 101, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 117, 108, 101, 32, 61, 32, 115, 116, 114, 116, 111, 107, 40, 32, 116, 114, 105, 109, 40, 116, 114, 41, 58, 108, 111, 119, 101, 114, 40, 41, 32, 41, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 111, 112, 116, 105, 109, 105, 115, 101, 32, 105, 110, 32, 67, 32, 40, 115, 101, 101, 32, 122, 101, 110, 114, 111, 111, 109, 95, 99, 111, 109, 109, 111, 110, 41, 10, 32, 32, 32, 105, 102, 32, 114, 117, 108, 101, 91, 50, 93, 32, 61, 61, 32, 39, 99, 104, 101, 99, 107, 39, 32, 97, 110, 100, 32, 114, 117, 108, 101, 91, 51, 93, 32, 61, 61, 32, 39, 118, 101, 114, 115, 105, 111, 110, 39, 32, 97, 110, 100, 32, 114, 117, 108, 101, 91, 52, 93, 32, 116, 104, 101, 110, 10, 9, 32, 32, 83, 69, 77, 86, 69, 82, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 95, 111, 110, 99, 101, 40, 39, 115, 101, 109, 118, 101, 114, 39, 41, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 118, 101, 114, 32, 61, 32, 83, 69, 77, 86, 69, 82, 40, 114, 117, 108, 101, 91, 52, 93, 41, 10, 9, 32, 32, 105, 102, 32, 118, 101, 114, 32, 61, 61, 32, 86, 69, 82, 83, 73, 79, 78, 32, 116, 104, 101, 110, 10, 9, 9, 32, 97, 99, 116, 40, 34, 90, 101, 110, 99, 111, 100, 101, 32, 118, 101, 114, 115, 105, 111, 110, 32, 109, 97, 116, 99, 104, 58, 32, 34, 46, 46, 86, 69, 82, 83, 73, 79, 78, 46, 111, 114, 105, 103, 105, 110, 97, 108, 41, 10, 9, 9, 32, 114, 101, 115, 32, 61, 32, 116, 114, 117, 101, 10, 9, 32, 32, 101, 108, 115, 101, 105, 102, 32, 118, 101, 114, 32, 60, 32, 86, 69, 82, 83, 73, 79, 78, 32, 116, 104, 101, 110, 10, 9, 9, 32, 101, 114, 114, 111, 114, 40, 34, 90, 101, 110, 99, 111, 100, 101, 32, 119, 114, 105, 116, 116, 101, 110, 32, 102, 111, 114, 32, 97, 110, 32, 111, 108, 100, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 58, 32, 34, 10, 9, 9, 9, 9, 32, 46, 46, 118, 101, 114, 46, 111, 114, 105, 103, 105, 110, 97, 108, 46, 46, 34, 32, 60, 32, 34, 46, 46, 86, 69, 82, 83, 73, 79, 78, 46, 111, 114, 105, 103, 105, 110, 97, 108, 44, 32, 50, 41, 10, 9, 32, 32, 101, 108, 115, 101, 105, 102, 32, 118, 101, 114, 32, 62, 32, 86, 69, 82, 83, 73, 79, 78, 32, 116, 104, 101, 110, 10, 9, 9, 32, 101, 114, 114, 111, 114, 40, 34, 90, 101, 110, 99, 111, 100, 101, 32, 119, 114, 105, 116, 116, 101, 110, 32, 102, 111, 114, 32, 97, 32, 110, 101, 119, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 58, 32, 34, 10, 9, 9, 9, 9, 9, 46, 46, 118, 101, 114, 46, 111, 114, 105, 103, 105, 110, 97, 108, 46, 46, 34, 32, 62, 32, 34, 46, 46, 86, 69, 82, 83, 73, 79, 78, 46, 111, 114, 105, 103, 105, 110, 97, 108, 44, 32, 50, 41, 10, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 32, 101, 114, 114, 111, 114, 40, 34, 86, 101, 114, 115, 105, 111, 110, 32, 99, 104, 101, 99, 107, 32, 101, 114, 114, 111, 114, 58, 32, 34, 46, 46, 114, 117, 108, 101, 91, 52, 93, 41, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 116, 101, 120, 116, 46, 90, 46, 99, 104, 101, 99, 107, 115, 46, 118, 101, 114, 115, 105, 111, 110, 32, 61, 32, 114, 101, 115, 10, 32, 32, 32, 32, 32, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 99, 104, 101, 99, 107, 32, 118, 101, 114, 115, 105, 111, 110, 32, 111, 102, 32, 114, 117, 110, 110, 105, 110, 103, 32, 86, 77, 10, 9, 32, 32, 45, 45, 32, 101, 108, 115, 101, 105, 102, 32, 114, 117, 108, 101, 91, 50, 93, 32, 61, 61, 32, 39, 108, 111, 97, 100, 39, 32, 97, 110, 100, 32, 114, 117, 108, 101, 91, 51, 93, 32, 116, 104, 101, 110, 10, 9, 32, 32, 45, 45, 32, 32, 32, 32, 32, 97, 99, 116, 40, 34, 122, 101, 110, 99, 111, 100, 101, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 58, 32, 34, 46, 46, 114, 117, 108, 101, 91, 51, 93, 41, 10, 9, 32, 32, 45, 45, 32, 32, 32, 32, 32, 114, 101, 113, 117, 105, 114, 101, 40, 34, 122, 101, 110, 99, 111, 100, 101, 95, 34, 46, 46, 114, 117, 108, 101, 91, 51, 93, 41, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 114, 117, 108, 101, 91, 50, 93, 32, 61, 61, 32, 39, 105, 110, 112, 117, 116, 39, 32, 97, 110, 100, 32, 114, 117, 108, 101, 91, 51, 93, 32, 116, 104, 101, 110, 10, 10, 32, 32, 32, 32, 32, 32, 45, 45, 32, 114, 117, 108, 101, 32, 105, 110, 112, 117, 116, 32, 101, 110, 99, 111, 100, 105, 110, 103, 124, 102, 111, 114, 109, 97, 116, 32, 39, 39, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 114, 117, 108, 101, 91, 51, 93, 32, 61, 61, 32, 39, 101, 110, 99, 111, 100, 105, 110, 103, 39, 32, 97, 110, 100, 32, 114, 117, 108, 101, 91, 52, 93, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 114, 117, 108, 101, 91, 52, 93, 41, 10, 9, 9, 32, 114, 101, 115, 32, 61, 32, 116, 114, 117, 101, 32, 97, 110, 100, 32, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 114, 117, 108, 101, 91, 51, 93, 32, 61, 61, 32, 39, 102, 111, 114, 109, 97, 116, 39, 32, 97, 110, 100, 32, 114, 117, 108, 101, 91, 52, 93, 32, 116, 104, 101, 110, 10, 9, 9, 32, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 102, 111, 114, 109, 97, 116, 32, 61, 32, 103, 101, 116, 95, 102, 111, 114, 109, 97, 116, 40, 114, 117, 108, 101, 91, 52, 93, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 61, 32, 116, 114, 117, 101, 32, 97, 110, 100, 32, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 102, 111, 114, 109, 97, 116, 10, 9, 32, 32, 101, 108, 115, 101, 105, 102, 32, 114, 117, 108, 101, 91, 51, 93, 32, 61, 61, 32, 39, 117, 110, 116, 97, 103, 103, 101, 100, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 114, 101, 115, 32, 61, 32, 116, 114, 117, 101, 10, 9, 9, 32, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 116, 97, 103, 103, 101, 100, 32, 61, 32, 102, 97, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 114, 117, 108, 101, 91, 50, 93, 32, 61, 61, 32, 39, 111, 117, 116, 112, 117, 116, 39, 32, 97, 110, 100, 32, 114, 117, 108, 101, 91, 51, 93, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 45, 45, 32, 114, 117, 108, 101, 32, 105, 110, 112, 117, 116, 32, 101, 110, 99, 111, 100, 105, 110, 103, 124, 102, 111, 114, 109, 97, 116, 32, 39, 39, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 114, 117, 108, 101, 91, 51, 93, 32, 61, 61, 32, 39, 101, 110, 99, 111, 100, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 111, 117, 116, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 114, 117, 108, 101, 91, 52, 93, 41, 10, 9, 9, 32, 114, 101, 115, 32, 61, 32, 116, 114, 117, 101, 32, 97, 110, 100, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 114, 117, 108, 101, 91, 51, 93, 32, 61, 61, 32, 39, 102, 111, 114, 109, 97, 116, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 102, 111, 114, 109, 97, 116, 32, 61, 32, 103, 101, 116, 95, 102, 111, 114, 109, 97, 116, 40, 114, 117, 108, 101, 91, 52, 93, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 61, 32, 116, 114, 117, 101, 32, 97, 110, 100, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 102, 111, 114, 109, 97, 116, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 114, 117, 108, 101, 91, 51, 93, 32, 61, 61, 32, 39, 118, 101, 114, 115, 105, 111, 110, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 118, 101, 114, 115, 105, 111, 110, 105, 110, 103, 32, 61, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 61, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 116, 114, 99, 97, 115, 101, 99, 109, 112, 40, 114, 117, 108, 101, 91, 51, 93, 44, 39, 97, 115, 116, 39, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 65, 83, 84, 32, 61, 32, 116, 114, 117, 101, 10, 9, 9, 32, 114, 101, 115, 32, 61, 32, 116, 114, 117, 101, 10, 9, 32, 32, 101, 110, 100, 10, 10, 9, 32, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 114, 117, 108, 101, 32, 100, 101, 98, 117, 103, 32, 91, 32, 102, 111, 114, 109, 97, 116, 32, 124, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 93, 10, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 114, 117, 108, 101, 91, 50, 93, 32, 61, 61, 32, 39, 117, 110, 107, 110, 111, 119, 110, 39, 32, 97, 110, 100, 32, 114, 117, 108, 101, 91, 51, 93, 32, 116, 104, 101, 110, 10, 9, 32, 32, 105, 102, 32, 114, 117, 108, 101, 91, 51, 93, 32, 61, 61, 32, 39, 105, 103, 110, 111, 114, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 67, 79, 78, 70, 46, 112, 97, 114, 115, 101, 114, 46, 115, 116, 114, 105, 99, 116, 95, 109, 97, 116, 99, 104, 32, 61, 32, 102, 97, 108, 115, 101, 10, 9, 9, 32, 114, 101, 115, 32, 61, 32, 116, 114, 117, 101, 10, 9, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 114, 117, 108, 101, 91, 50, 93, 32, 61, 61, 32, 39, 115, 101, 116, 39, 32, 97, 110, 100, 32, 114, 117, 108, 101, 91, 52, 93, 32, 116, 104, 101, 110, 10, 10, 32, 32, 32, 32, 32, 32, 67, 79, 78, 70, 91, 114, 117, 108, 101, 91, 51, 93, 93, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 114, 117, 108, 101, 91, 52, 93, 41, 32, 111, 114, 32, 114, 117, 108, 101, 91, 52, 93, 10, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 61, 32, 116, 114, 117, 101, 32, 97, 110, 100, 32, 67, 79, 78, 70, 91, 114, 117, 108, 101, 91, 51, 93, 93, 10, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 114, 101, 115, 32, 116, 104, 101, 110, 32, 101, 114, 114, 111, 114, 40, 34, 82, 117, 108, 101, 32, 105, 110, 118, 97, 108, 105, 100, 58, 32, 34, 46, 46, 116, 101, 120, 116, 46, 109, 115, 103, 44, 32, 51, 41, 10, 32, 32, 32, 101, 108, 115, 101, 32, 97, 99, 116, 40, 116, 101, 120, 116, 46, 109, 115, 103, 41, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 10, 101, 110, 100, 10, 10, 10, 114, 101, 116, 117, 114, 110, 32, 122, 101, 110, 99, 111, 100, 101, 95, 112, 97, 114, 115, 101, 10]);
Module['FS_createDataFile']('/', 'zenroom_ast.lua', fileData5, true, true, false);
var fileData6 = [];
fileData6.push.apply(fileData6, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 32, 100, 101, 102, 105, 110, 101, 100, 32, 111, 117, 116, 115, 105, 100, 101, 32, 98, 101, 99, 97, 117, 115, 101, 32, 114, 101, 117, 115, 101, 100, 32, 97, 99, 114, 111, 115, 115, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 115, 99, 104, 101, 109, 97, 115, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 95, 102, 40, 111, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 102, 117, 110, 40, 111, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 69, 67, 68, 72, 46, 112, 117, 98, 99, 104, 101, 99, 107, 40, 114, 101, 115, 41, 44, 10, 9, 9, 9, 32, 32, 34, 80, 117, 98, 108, 105, 99, 32, 107, 101, 121, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 118, 97, 108, 105, 100, 32, 112, 111, 105, 110, 116, 32, 111, 110, 32, 99, 117, 114, 118, 101, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 10, 101, 110, 100, 10, 10, 90, 69, 78, 46, 97, 100, 100, 95, 115, 99, 104, 101, 109, 97, 40, 123, 10, 9, 32, 32, 45, 45, 32, 107, 101, 121, 112, 97, 105, 114, 32, 40, 69, 67, 68, 72, 41, 10, 9, 32, 32, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 32, 61, 32, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 95, 102, 44, 10, 32, 32, 32, 32, 32, 32, 107, 101, 121, 112, 97, 105, 114, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 32, 32, 61, 32, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 95, 102, 40, 111, 98, 106, 46, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 105, 118, 97, 116, 101, 95, 107, 101, 121, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 112, 114, 105, 118, 97, 116, 101, 95, 107, 101, 121, 39, 41, 32, 125, 10, 9, 32, 32, 101, 110, 100, 44, 10, 9, 32, 32, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 99, 104, 101, 99, 107, 115, 117, 109, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 99, 104, 101, 99, 107, 115, 117, 109, 39, 41, 44, 10, 9, 9, 9, 9, 32, 32, 104, 101, 97, 100, 101, 114, 32, 32, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 104, 101, 97, 100, 101, 114, 39, 41, 44, 10, 9, 9, 9, 9, 32, 32, 105, 118, 32, 32, 32, 32, 32, 32, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 105, 118, 39, 41, 44, 10, 9, 9, 9, 9, 32, 32, 116, 101, 120, 116, 32, 32, 32, 32, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 116, 101, 120, 116, 39, 41, 32, 125, 10, 9, 32, 32, 101, 110, 100, 44, 10, 9, 32, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 114, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 114, 39, 41, 44, 10, 9, 9, 9, 9, 32, 32, 115, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 115, 39, 41, 125, 10, 10, 9, 32, 32, 101, 110, 100, 10, 125, 41, 10, 10, 45, 45, 32, 103, 101, 110, 101, 114, 97, 116, 101, 32, 107, 101, 121, 112, 97, 105, 114, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 102, 95, 107, 101, 121, 103, 101, 110, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 112, 32, 61, 32, 69, 67, 68, 72, 46, 107, 101, 121, 103, 101, 110, 40, 41, 10, 32, 32, 32, 65, 67, 75, 46, 107, 101, 121, 112, 97, 105, 114, 32, 61, 32, 123, 32, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 32, 61, 32, 107, 112, 46, 112, 117, 98, 108, 105, 99, 44, 10, 9, 9, 9, 9, 32, 32, 32, 112, 114, 105, 118, 97, 116, 101, 95, 107, 101, 121, 32, 61, 32, 107, 112, 46, 112, 114, 105, 118, 97, 116, 101, 32, 125, 10, 101, 110, 100, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 107, 101, 121, 112, 97, 105, 114, 34, 44, 32, 102, 95, 107, 101, 121, 103, 101, 110, 41, 10, 10, 45, 45, 32, 101, 110, 99, 114, 121, 112, 116, 32, 119, 105, 116, 104, 32, 97, 32, 104, 101, 97, 100, 101, 114, 32, 97, 110, 100, 32, 115, 101, 99, 114, 101, 116, 10, 87, 104, 101, 110, 40, 34, 101, 110, 99, 114, 121, 112, 116, 32, 116, 104, 101, 32, 115, 101, 99, 114, 101, 116, 32, 109, 101, 115, 115, 97, 103, 101, 32, 39, 39, 32, 119, 105, 116, 104, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 109, 115, 103, 44, 32, 115, 101, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 109, 115, 103, 93, 44, 32, 34, 68, 97, 116, 97, 32, 116, 111, 32, 101, 110, 99, 114, 121, 112, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 109, 115, 103, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 101, 99, 93, 44, 32, 34, 83, 101, 99, 114, 101, 116, 32, 117, 115, 101, 100, 32, 116, 111, 32, 101, 110, 99, 114, 121, 112, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 101, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 111, 98, 106, 101, 99, 116, 58, 32, 34, 46, 46, 34, 116, 101, 120, 116, 34, 41, 10, 9, 9, 45, 45, 32, 75, 68, 70, 50, 32, 115, 104, 97, 50, 53, 54, 32, 111, 110, 32, 97, 108, 108, 32, 115, 101, 99, 114, 101, 116, 115, 10, 9, 9, 108, 111, 99, 97, 108, 32, 115, 101, 99, 114, 101, 116, 32, 61, 32, 75, 68, 70, 40, 65, 67, 75, 91, 115, 101, 99, 93, 41, 10, 9, 9, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 32, 61, 32, 123, 32, 104, 101, 97, 100, 101, 114, 32, 61, 32, 65, 67, 75, 46, 104, 101, 97, 100, 101, 114, 32, 111, 114, 32, 39, 101, 109, 112, 116, 121, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 32, 32, 105, 118, 32, 61, 32, 79, 46, 114, 97, 110, 100, 111, 109, 40, 51, 50, 41, 32, 125, 10, 9, 9, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 46, 116, 101, 120, 116, 44, 32, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 46, 99, 104, 101, 99, 107, 115, 117, 109, 32, 61, 10, 9, 9, 32, 32, 32, 69, 67, 68, 72, 46, 97, 101, 97, 100, 95, 101, 110, 99, 114, 121, 112, 116, 40, 115, 101, 99, 114, 101, 116, 44, 32, 65, 67, 75, 91, 109, 115, 103, 93, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 46, 105, 118, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 46, 104, 101, 97, 100, 101, 114, 41, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 100, 101, 99, 114, 121, 112, 116, 32, 119, 105, 116, 104, 32, 97, 32, 115, 101, 99, 114, 101, 116, 10, 87, 104, 101, 110, 40, 34, 100, 101, 99, 114, 121, 112, 116, 32, 116, 104, 101, 32, 116, 101, 120, 116, 32, 111, 102, 32, 39, 39, 32, 119, 105, 116, 104, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 109, 115, 103, 44, 32, 115, 101, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 101, 99, 93, 44, 32, 34, 83, 101, 99, 114, 101, 116, 32, 117, 115, 101, 100, 32, 116, 111, 32, 100, 101, 99, 114, 121, 112, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 115, 101, 99, 114, 101, 116, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 109, 115, 103, 93, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 83, 101, 99, 114, 101, 116, 32, 100, 97, 116, 97, 32, 116, 111, 32, 100, 101, 99, 114, 121, 112, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 115, 101, 99, 114, 101, 116, 32, 109, 101, 115, 115, 97, 103, 101, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 116, 101, 120, 116, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 111, 98, 106, 101, 99, 116, 58, 32, 34, 46, 46, 34, 116, 101, 120, 116, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 101, 99, 114, 101, 116, 32, 61, 32, 75, 68, 70, 40, 65, 67, 75, 91, 115, 101, 99, 93, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 75, 68, 70, 50, 32, 115, 104, 97, 50, 53, 54, 32, 111, 110, 32, 97, 108, 108, 32, 115, 101, 99, 114, 101, 116, 115, 44, 32, 116, 104, 105, 115, 32, 119, 97, 121, 32, 116, 104, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 115, 101, 99, 114, 101, 116, 32, 105, 115, 32, 97, 108, 119, 97, 121, 115, 32, 50, 53, 54, 32, 98, 105, 116, 115, 44, 32, 115, 97, 102, 101, 32, 102, 111, 114, 32, 100, 105, 114, 101, 99, 116, 32, 97, 101, 97, 100, 95, 100, 101, 99, 114, 121, 112, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 46, 116, 101, 120, 116, 44, 32, 65, 67, 75, 46, 99, 104, 101, 99, 107, 115, 117, 109, 32, 61, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 69, 67, 68, 72, 46, 97, 101, 97, 100, 95, 100, 101, 99, 114, 121, 112, 116, 40, 115, 101, 99, 114, 101, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 65, 67, 75, 91, 109, 115, 103, 93, 46, 116, 101, 120, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 65, 67, 75, 91, 109, 115, 103, 93, 46, 105, 118, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 65, 67, 75, 91, 109, 115, 103, 93, 46, 104, 101, 97, 100, 101, 114, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 99, 104, 101, 99, 107, 115, 117, 109, 32, 61, 61, 32, 65, 67, 75, 91, 109, 115, 103, 93, 46, 99, 104, 101, 99, 107, 115, 117, 109, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 68, 101, 99, 114, 121, 112, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 58, 32, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 105, 111, 110, 32, 102, 97, 105, 108, 117, 114, 101, 44, 32, 99, 104, 101, 99, 107, 115, 117, 109, 32, 109, 105, 115, 109, 97, 116, 99, 104, 34, 41, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 101, 110, 99, 114, 121, 112, 116, 32, 116, 111, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 112, 117, 98, 108, 105, 99, 32, 107, 101, 121, 10, 87, 104, 101, 110, 40, 34, 101, 110, 99, 114, 121, 112, 116, 32, 116, 104, 101, 32, 115, 101, 99, 114, 101, 116, 32, 109, 101, 115, 115, 97, 103, 101, 32, 111, 102, 32, 39, 39, 32, 102, 111, 114, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 109, 115, 103, 44, 32, 95, 107, 101, 121, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 107, 101, 121, 112, 97, 105, 114, 44, 32, 34, 75, 101, 121, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 107, 101, 121, 112, 97, 105, 114, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 95, 107, 101, 121, 44, 32, 34, 80, 114, 105, 118, 97, 116, 101, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 107, 101, 121, 112, 97, 105, 114, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 109, 115, 103, 93, 44, 32, 34, 68, 97, 116, 97, 32, 116, 111, 32, 101, 110, 99, 114, 121, 112, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 109, 115, 103, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 65, 67, 75, 46, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 80, 117, 98, 108, 105, 99, 32, 107, 101, 121, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 107, 101, 121, 114, 105, 110, 103, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 91, 95, 107, 101, 121, 93, 44, 32, 34, 80, 117, 98, 108, 105, 99, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 102, 111, 114, 58, 32, 34, 46, 46, 95, 107, 101, 121, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 111, 98, 106, 101, 99, 116, 58, 32, 34, 46, 46, 34, 115, 101, 99, 114, 101, 116, 32, 109, 101, 115, 115, 97, 103, 101, 34, 41, 10, 10, 9, 9, 108, 111, 99, 97, 108, 32, 112, 114, 105, 118, 97, 116, 101, 32, 61, 32, 65, 67, 75, 46, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 95, 107, 101, 121, 10, 9, 9, 108, 111, 99, 97, 108, 32, 107, 101, 121, 32, 61, 32, 69, 67, 68, 72, 46, 115, 101, 115, 115, 105, 111, 110, 40, 65, 67, 75, 46, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 95, 107, 101, 121, 44, 32, 65, 67, 75, 46, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 91, 95, 107, 101, 121, 93, 41, 10, 9, 9, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 32, 61, 32, 123, 32, 104, 101, 97, 100, 101, 114, 32, 61, 32, 65, 67, 75, 46, 104, 101, 97, 100, 101, 114, 32, 111, 114, 32, 39, 101, 109, 112, 116, 121, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 32, 32, 105, 118, 32, 61, 32, 79, 46, 114, 97, 110, 100, 111, 109, 40, 51, 50, 41, 32, 125, 10, 9, 9, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 46, 116, 101, 120, 116, 44, 10, 9, 9, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 46, 99, 104, 101, 99, 107, 115, 117, 109, 32, 61, 10, 9, 9, 32, 32, 32, 69, 67, 68, 72, 46, 97, 101, 97, 100, 95, 101, 110, 99, 114, 121, 112, 116, 40, 107, 101, 121, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 65, 67, 75, 91, 109, 115, 103, 93, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 46, 105, 118, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 109, 101, 115, 115, 97, 103, 101, 46, 104, 101, 97, 100, 101, 114, 41, 10, 101, 110, 100, 41, 10, 10, 10, 87, 104, 101, 110, 40, 34, 100, 101, 99, 114, 121, 112, 116, 32, 116, 104, 101, 32, 116, 101, 120, 116, 32, 111, 102, 32, 39, 39, 32, 102, 114, 111, 109, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 99, 114, 101, 116, 44, 95, 107, 101, 121, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 107, 101, 121, 112, 97, 105, 114, 44, 32, 34, 75, 101, 121, 114, 105, 110, 103, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 95, 107, 101, 121, 44, 32, 34, 80, 114, 105, 118, 97, 116, 101, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 107, 101, 121, 114, 105, 110, 103, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 101, 99, 114, 101, 116, 93, 44, 32, 34, 68, 97, 116, 97, 32, 116, 111, 32, 100, 101, 99, 114, 121, 112, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 101, 99, 114, 101, 116, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 112, 117, 98, 107, 101, 121, 32, 61, 32, 65, 67, 75, 91, 95, 107, 101, 121, 93, 32, 111, 114, 32, 65, 67, 75, 46, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 91, 95, 107, 101, 121, 93, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 112, 117, 98, 107, 101, 121, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 75, 101, 121, 32, 116, 111, 32, 100, 101, 99, 114, 121, 112, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 44, 32, 116, 104, 101, 32, 112, 117, 98, 108, 105, 99, 32, 107, 101, 121, 32, 102, 114, 111, 109, 58, 32, 34, 46, 46, 95, 107, 101, 121, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 109, 101, 115, 115, 97, 103, 101, 32, 61, 32, 65, 67, 75, 91, 115, 101, 99, 114, 101, 116, 93, 91, 95, 107, 101, 121, 93, 32, 111, 114, 32, 65, 67, 75, 91, 115, 101, 99, 114, 101, 116, 93, 10, 9, 9, 108, 111, 99, 97, 108, 32, 115, 101, 115, 115, 105, 111, 110, 32, 61, 32, 69, 67, 68, 72, 46, 115, 101, 115, 115, 105, 111, 110, 40, 65, 67, 75, 46, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 95, 107, 101, 121, 44, 32, 112, 117, 98, 107, 101, 121, 41, 10, 9, 9, 65, 67, 75, 46, 116, 101, 120, 116, 44, 32, 99, 104, 101, 99, 107, 115, 117, 109, 32, 61, 32, 69, 67, 68, 72, 46, 97, 101, 97, 100, 95, 100, 101, 99, 114, 121, 112, 116, 40, 115, 101, 115, 115, 105, 111, 110, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 32, 32, 109, 101, 115, 115, 97, 103, 101, 46, 116, 101, 120, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 32, 32, 109, 101, 115, 115, 97, 103, 101, 46, 105, 118, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 32, 32, 109, 101, 115, 115, 97, 103, 101, 46, 104, 101, 97, 100, 101, 114, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 99, 104, 101, 99, 107, 115, 117, 109, 32, 61, 61, 32, 109, 101, 115, 115, 97, 103, 101, 46, 99, 104, 101, 99, 107, 115, 117, 109, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 70, 97, 105, 108, 101, 100, 32, 118, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 111, 102, 32, 105, 110, 116, 101, 103, 114, 105, 116, 121, 32, 102, 111, 114, 32, 115, 101, 99, 114, 101, 116, 32, 109, 101, 115, 115, 97, 103, 101, 34, 41, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 115, 105, 103, 110, 32, 97, 32, 109, 101, 115, 115, 97, 103, 101, 32, 97, 110, 100, 32, 118, 101, 114, 105, 102, 121, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 111, 102, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 111, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 107, 101, 121, 112, 97, 105, 114, 44, 32, 34, 75, 101, 121, 114, 105, 110, 103, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 95, 107, 101, 121, 44, 32, 34, 80, 114, 105, 118, 97, 116, 101, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 107, 101, 121, 114, 105, 110, 103, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 115, 105, 103, 110, 97, 116, 117, 114, 101, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 111, 98, 106, 101, 99, 116, 58, 32, 34, 46, 46, 34, 115, 105, 103, 110, 97, 116, 117, 114, 101, 34, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 111, 98, 106, 32, 61, 32, 65, 67, 75, 91, 100, 111, 99, 93, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 111, 98, 106, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 100, 111, 99, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 111, 98, 106, 41, 10, 9, 9, 65, 67, 75, 46, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 61, 32, 69, 67, 68, 72, 46, 115, 105, 103, 110, 40, 65, 67, 75, 46, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 95, 107, 101, 121, 44, 32, 90, 69, 78, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 111, 98, 106, 41, 41, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 61, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 110, 97, 109, 101, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 118, 101, 114, 105, 102, 121, 32, 116, 104, 101, 32, 39, 39, 32, 105, 115, 32, 115, 105, 103, 110, 101, 100, 32, 98, 121, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 109, 115, 103, 44, 32, 98, 121, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 91, 98, 121, 93, 44, 32, 34, 80, 117, 98, 108, 105, 99, 32, 107, 101, 121, 32, 98, 121, 32, 34, 46, 46, 98, 121, 46, 46, 34, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 111, 98, 106, 10, 9, 9, 111, 98, 106, 32, 61, 32, 65, 67, 75, 91, 109, 115, 103, 93, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 111, 98, 106, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 109, 115, 103, 41, 10, 9, 9, 45, 45, 32, 111, 98, 106, 32, 61, 32, 111, 98, 106, 91, 98, 121, 93, 10, 9, 9, 45, 45, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 111, 98, 106, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 109, 115, 103, 46, 46, 34, 32, 98, 121, 32, 34, 46, 46, 98, 121, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 111, 98, 106, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 115, 105, 103, 110, 10, 9, 9, 105, 102, 32, 116, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 115, 105, 103, 110, 32, 61, 32, 111, 98, 106, 46, 115, 105, 103, 110, 97, 116, 117, 114, 101, 10, 9, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 105, 103, 110, 44, 32, 34, 83, 105, 103, 110, 97, 116, 117, 114, 101, 32, 98, 121, 32, 34, 46, 46, 98, 121, 46, 46, 34, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 32, 32, 32, 111, 98, 106, 46, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 61, 32, 110, 105, 108, 10, 9, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 69, 67, 68, 72, 46, 118, 101, 114, 105, 102, 121, 40, 65, 67, 75, 46, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 91, 98, 121, 93, 44, 32, 90, 69, 78, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 111, 98, 106, 41, 44, 32, 115, 105, 103, 110, 41, 44, 10, 9, 9, 9, 9, 9, 32, 32, 34, 84, 104, 101, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 98, 121, 32, 34, 46, 46, 98, 121, 46, 46, 34, 32, 105, 115, 32, 110, 111, 116, 32, 97, 117, 116, 104, 101, 110, 116, 105, 99, 34, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 115, 105, 103, 110, 32, 61, 32, 65, 67, 75, 46, 115, 105, 103, 110, 97, 116, 117, 114, 101, 91, 98, 121, 93, 10, 9, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 105, 103, 110, 44, 32, 34, 83, 105, 103, 110, 97, 116, 117, 114, 101, 32, 98, 121, 32, 34, 46, 46, 98, 121, 46, 46, 34, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 69, 67, 68, 72, 46, 118, 101, 114, 105, 102, 121, 40, 65, 67, 75, 46, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 91, 98, 121, 93, 44, 32, 111, 98, 106, 44, 32, 115, 105, 103, 110, 41, 44, 10, 9, 9, 9, 9, 9, 32, 32, 34, 84, 104, 101, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 98, 121, 32, 34, 46, 46, 98, 121, 46, 46, 34, 32, 105, 115, 32, 110, 111, 116, 32, 97, 117, 116, 104, 101, 110, 116, 105, 99, 34, 41, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 118, 101, 114, 105, 102, 121, 32, 116, 104, 101, 32, 39, 39, 32, 104, 97, 115, 32, 97, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 105, 110, 32, 39, 39, 32, 98, 121, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 109, 115, 103, 44, 32, 115, 105, 103, 44, 32, 98, 121, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 91, 98, 121, 93, 44, 32, 34, 80, 117, 98, 108, 105, 99, 32, 107, 101, 121, 32, 98, 121, 32, 34, 46, 46, 98, 121, 46, 46, 34, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 111, 98, 106, 10, 9, 9, 111, 98, 106, 32, 61, 32, 65, 67, 75, 91, 109, 115, 103, 93, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 111, 98, 106, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 109, 115, 103, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 115, 10, 9, 9, 115, 32, 61, 32, 65, 67, 75, 91, 115, 105, 103, 93, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 44, 32, 34, 83, 105, 103, 110, 97, 116, 117, 114, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 105, 103, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 69, 67, 68, 72, 46, 118, 101, 114, 105, 102, 121, 40, 65, 67, 75, 46, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 91, 98, 121, 93, 44, 32, 90, 69, 78, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 111, 98, 106, 41, 44, 32, 115, 41, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 84, 104, 101, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 98, 121, 32, 34, 46, 46, 98, 121, 46, 46, 34, 32, 105, 115, 32, 110, 111, 116, 32, 97, 117, 116, 104, 101, 110, 116, 105, 99, 34, 41, 10, 101, 110, 100, 41, 10, 10]);
Module['FS_createDataFile']('/', 'zencode_ecdh.lua', fileData6, true, true, false);
var fileData7 = [];
fileData7.push.apply(fileData7, [45, 45, 32, 111, 118, 101, 114, 114, 105, 100, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 114, 101, 99, 111, 103, 110, 105, 122, 101, 32, 122, 101, 110, 114, 111, 111, 109, 39, 115, 32, 116, 121, 112, 101, 115, 10, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 116, 121, 112, 101, 10, 95, 71, 91, 39, 116, 121, 112, 101, 39, 93, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 97, 114, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 105, 109, 112, 108, 101, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 97, 114, 41, 10, 32, 32, 32, 105, 102, 32, 115, 105, 109, 112, 108, 101, 32, 61, 61, 32, 34, 117, 115, 101, 114, 100, 97, 116, 97, 34, 32, 116, 104, 101, 110, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 109, 101, 116, 97, 32, 61, 32, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 118, 97, 114, 41, 10, 9, 32, 32, 105, 102, 32, 109, 101, 116, 97, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 40, 109, 101, 116, 97, 46, 95, 95, 110, 97, 109, 101, 41, 10, 9, 32, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 40, 34, 117, 110, 107, 110, 111, 119, 110, 34, 41, 32, 101, 110, 100, 10, 32, 32, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 40, 115, 105, 109, 112, 108, 101, 41, 32, 101, 110, 100, 10, 101, 110, 100, 10, 45, 45, 32, 84, 79, 68, 79, 58, 32, 111, 112, 116, 105, 109, 105, 115, 101, 32, 105, 110, 32, 67, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 122, 101, 110, 40, 110, 41, 10, 32, 32, 32, 102, 111, 114, 32, 99, 32, 105, 110, 32, 110, 58, 103, 109, 97, 116, 99, 104, 40, 34, 122, 101, 110, 114, 111, 111, 109, 34, 41, 32, 100, 111, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 10, 101, 110, 100, 10, 10, 45, 45, 32, 103, 101, 116, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 115, 32, 116, 104, 101, 32, 97, 115, 115, 111, 99, 105, 97, 116, 101, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110, 44, 32, 115, 116, 114, 105, 110, 103, 32, 97, 110, 100, 32, 112, 114, 101, 102, 105, 120, 10, 45, 45, 32, 99, 111, 109, 101, 115, 32, 98, 101, 102, 111, 114, 101, 32, 115, 99, 104, 101, 109, 97, 32, 99, 104, 101, 99, 107, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 119, 104, 97, 116, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 108, 117, 97, 116, 121, 112, 101, 40, 119, 104, 97, 116, 41, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 67, 97, 108, 108, 32, 116, 111, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 105, 110, 103, 58, 32, 34, 46, 46, 116, 121, 112, 101, 40, 119, 104, 97, 116, 41, 44, 50, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 117, 54, 52, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 117, 114, 108, 54, 52, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 117, 114, 108, 54, 52, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 101, 110, 100, 44, 10, 9, 9, 9, 32, 32, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 117, 114, 108, 54, 52, 39, 44, 10, 9, 9, 9, 32, 32, 32, 99, 104, 101, 99, 107, 32, 61, 32, 79, 46, 105, 115, 95, 117, 114, 108, 54, 52, 10, 9, 32, 32, 125, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 98, 54, 52, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 39, 98, 97, 115, 101, 54, 52, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 98, 97, 115, 101, 54, 52, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 101, 110, 100, 44, 10, 9, 9, 9, 32, 32, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 98, 97, 115, 101, 54, 52, 39, 44, 10, 9, 9, 9, 32, 32, 32, 99, 104, 101, 99, 107, 32, 61, 32, 79, 46, 105, 115, 95, 98, 97, 115, 101, 54, 52, 10, 9, 32, 32, 125, 10, 9, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 98, 53, 56, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 39, 98, 97, 115, 101, 53, 56, 39, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 9, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 98, 97, 115, 101, 53, 56, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 9, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 32, 32, 101, 110, 100, 44, 10, 9, 9, 9, 9, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 98, 97, 115, 101, 53, 56, 39, 44, 10, 9, 9, 9, 9, 32, 99, 104, 101, 99, 107, 32, 61, 32, 79, 46, 105, 115, 95, 98, 97, 115, 101, 53, 56, 10, 9, 9, 125, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 104, 101, 120, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 104, 101, 120, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 101, 110, 100, 44, 10, 9, 9, 9, 32, 32, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 104, 101, 120, 39, 44, 10, 9, 9, 9, 32, 32, 32, 99, 104, 101, 99, 107, 32, 61, 32, 79, 46, 105, 115, 95, 104, 101, 120, 10, 9, 32, 32, 125, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 98, 105, 110, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 98, 105, 110, 97, 114, 121, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 98, 105, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 101, 110, 100, 44, 10, 9, 9, 9, 32, 32, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 98, 105, 110, 97, 114, 121, 39, 44, 10, 9, 9, 9, 32, 32, 32, 99, 104, 101, 99, 107, 32, 61, 32, 79, 46, 105, 115, 95, 98, 105, 110, 10, 9, 32, 32, 125, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 115, 116, 114, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 115, 116, 114, 105, 110, 103, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 101, 110, 100, 44, 10, 32, 32, 32, 9, 9, 9, 32, 32, 32, 99, 104, 101, 99, 107, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 95, 41, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 32, 101, 110, 100, 44, 10, 32, 32, 32, 9, 9, 9, 32, 32, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 10, 32, 32, 32, 9, 32, 32, 125, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 110, 117, 109, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 114, 101, 116, 117, 114, 110, 32, 40, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 120, 41, 32, 114, 101, 116, 117, 114, 110, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 120, 41, 41, 32, 101, 110, 100, 44, 10, 9, 9, 9, 99, 104, 101, 99, 107, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 120, 41, 10, 9, 32, 32, 32, 9, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 111, 110, 117, 109, 98, 101, 114, 40, 120, 41, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 101, 110, 99, 111, 100, 105, 110, 103, 44, 32, 110, 111, 116, 32, 97, 32, 110, 117, 109, 98, 101, 114, 58, 32, 34, 46, 46, 116, 121, 112, 101, 40, 120, 41, 41, 10, 9, 9, 9, 101, 110, 100, 44, 10, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 125, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 114, 114, 111, 114, 40, 34, 73, 110, 112, 117, 116, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 32, 46, 46, 32, 119, 104, 97, 116, 44, 32, 50, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 101, 110, 100, 10, 10, 45, 45, 32, 103, 101, 116, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 115, 32, 116, 104, 101, 32, 97, 115, 115, 111, 99, 105, 97, 116, 101, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110, 44, 32, 115, 116, 114, 105, 110, 103, 32, 97, 110, 100, 32, 112, 114, 101, 102, 105, 120, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 119, 104, 97, 116, 41, 10, 32, 32, 32, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 117, 54, 52, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 117, 114, 108, 54, 52, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 117, 114, 108, 54, 52, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 101, 110, 100, 44, 10, 9, 9, 9, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 39, 117, 114, 108, 54, 52, 39, 32, 125, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 98, 54, 52, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 39, 98, 97, 115, 101, 54, 52, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 98, 97, 115, 101, 54, 52, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 101, 110, 100, 44, 10, 9, 9, 9, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 39, 98, 97, 115, 101, 54, 52, 39, 32, 125, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 98, 53, 56, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 39, 98, 97, 115, 101, 53, 56, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 98, 97, 115, 101, 53, 56, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 101, 110, 100, 44, 10, 9, 9, 9, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 39, 98, 97, 115, 101, 53, 56, 39, 32, 125, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 104, 101, 120, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 104, 101, 120, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 101, 110, 100, 44, 10, 9, 9, 9, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 39, 104, 101, 120, 39, 32, 125, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 98, 105, 110, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 98, 105, 110, 97, 114, 121, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 98, 105, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 101, 110, 100, 44, 10, 9, 9, 9, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 39, 98, 105, 110, 97, 114, 121, 39, 32, 125, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 115, 116, 114, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 9, 9, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 116, 111, 95, 115, 116, 114, 105, 110, 103, 40, 100, 97, 116, 97, 41, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 9, 9, 32, 101, 110, 100, 44, 10, 9, 9, 9, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 125, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 114, 114, 111, 114, 40, 34, 79, 117, 116, 112, 117, 116, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 119, 104, 97, 116, 44, 32, 50, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 95, 102, 111, 114, 109, 97, 116, 40, 119, 104, 97, 116, 41, 10, 32, 32, 32, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 106, 115, 111, 110, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 74, 83, 79, 78, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 74, 83, 79, 78, 46, 97, 117, 116, 111, 44, 10, 9, 9, 9, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 39, 106, 115, 111, 110, 39, 32, 125, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 99, 98, 111, 114, 39, 32, 111, 114, 32, 119, 104, 97, 116, 32, 61, 61, 32, 39, 67, 66, 79, 82, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 102, 117, 110, 32, 61, 32, 67, 66, 79, 82, 46, 97, 117, 116, 111, 44, 10, 9, 9, 9, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 39, 99, 98, 111, 114, 39, 32, 125, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 114, 114, 111, 114, 40, 34, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 111, 114, 109, 97, 116, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 58, 32, 34, 46, 46, 119, 104, 97, 116, 44, 32, 50, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 101, 110, 100, 10, 9, 32, 32, 10, 45, 45, 32, 100, 101, 98, 117, 103, 103, 105, 110, 103, 32, 102, 97, 99, 105, 108, 105, 116, 121, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 120, 120, 120, 40, 115, 44, 32, 110, 41, 10, 32, 32, 32, 110, 32, 61, 32, 110, 32, 111, 114, 32, 51, 10, 32, 32, 32, 105, 102, 32, 68, 69, 66, 85, 71, 32, 62, 61, 32, 110, 32, 116, 104, 101, 110, 10, 9, 32, 32, 112, 114, 105, 110, 116, 40, 34, 76, 85, 65, 32, 34, 46, 46, 115, 41, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 110, 116, 101, 110, 116, 40, 118, 97, 114, 41, 10, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 118, 97, 114, 41, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 34, 32, 116, 104, 101, 110, 10, 9, 32, 32, 73, 78, 83, 80, 69, 67, 84, 46, 112, 114, 105, 110, 116, 40, 118, 97, 114, 58, 97, 114, 114, 97, 121, 40, 41, 41, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 73, 78, 83, 80, 69, 67, 84, 46, 112, 114, 105, 110, 116, 40, 118, 97, 114, 41, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 10, 45, 45, 32, 115, 111, 114, 116, 101, 100, 32, 105, 116, 101, 114, 97, 116, 111, 114, 32, 102, 111, 114, 32, 100, 101, 116, 101, 114, 109, 105, 110, 105, 115, 116, 105, 99, 32, 111, 114, 100, 101, 114, 105, 110, 103, 32, 111, 102, 32, 116, 97, 98, 108, 101, 115, 10, 45, 45, 32, 102, 114, 111, 109, 58, 32, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 108, 117, 97, 46, 111, 114, 103, 47, 112, 105, 108, 47, 49, 57, 46, 51, 46, 104, 116, 109, 108, 10, 95, 71, 91, 34, 108, 117, 97, 95, 112, 97, 105, 114, 115, 34, 93, 32, 32, 61, 32, 95, 71, 91, 34, 112, 97, 105, 114, 115, 34, 93, 10, 95, 71, 91, 34, 108, 117, 97, 95, 105, 112, 97, 105, 114, 115, 34, 93, 32, 61, 32, 95, 71, 91, 34, 105, 112, 97, 105, 114, 115, 34, 93, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 95, 112, 97, 105, 114, 115, 40, 116, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 32, 61, 32, 123, 125, 10, 32, 32, 32, 102, 111, 114, 32, 110, 32, 105, 110, 32, 108, 117, 97, 95, 112, 97, 105, 114, 115, 40, 116, 41, 32, 100, 111, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 97, 44, 32, 110, 41, 32, 101, 110, 100, 10, 32, 32, 32, 116, 97, 98, 108, 101, 46, 115, 111, 114, 116, 40, 97, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 48, 32, 32, 32, 32, 32, 32, 45, 45, 32, 105, 116, 101, 114, 97, 116, 111, 114, 32, 118, 97, 114, 105, 97, 98, 108, 101, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 41, 32, 32, 32, 45, 45, 32, 105, 116, 101, 114, 97, 116, 111, 114, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 9, 32, 32, 105, 32, 61, 32, 105, 32, 43, 32, 49, 10, 9, 32, 32, 45, 45, 32, 105, 102, 32, 97, 91, 105, 93, 32, 61, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 97, 91, 105, 93, 44, 32, 116, 91, 97, 91, 105, 93, 93, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 95, 105, 112, 97, 105, 114, 115, 40, 116, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 32, 61, 32, 123, 125, 10, 32, 32, 32, 102, 111, 114, 32, 110, 32, 105, 110, 32, 108, 117, 97, 95, 105, 112, 97, 105, 114, 115, 40, 116, 41, 32, 100, 111, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 97, 44, 32, 110, 41, 32, 101, 110, 100, 10, 32, 32, 32, 116, 97, 98, 108, 101, 46, 115, 111, 114, 116, 40, 97, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 48, 32, 32, 32, 32, 32, 32, 45, 45, 32, 105, 116, 101, 114, 97, 116, 111, 114, 32, 118, 97, 114, 105, 97, 98, 108, 101, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 41, 32, 32, 32, 45, 45, 32, 105, 116, 101, 114, 97, 116, 111, 114, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 9, 32, 32, 105, 32, 61, 32, 105, 32, 43, 32, 49, 10, 9, 32, 32, 45, 45, 32, 105, 102, 32, 97, 91, 105, 93, 32, 61, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 97, 91, 105, 93, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 45, 45, 32, 83, 119, 105, 116, 99, 104, 32, 116, 111, 32, 100, 101, 116, 101, 114, 109, 105, 110, 105, 115, 116, 105, 99, 32, 40, 115, 111, 114, 116, 101, 100, 41, 32, 116, 97, 98, 108, 101, 32, 105, 116, 101, 114, 97, 116, 111, 114, 115, 58, 32, 116, 104, 105, 115, 32, 98, 114, 101, 97, 107, 115, 32, 108, 117, 97, 10, 45, 45, 32, 116, 101, 115, 116, 115, 32, 105, 110, 32, 112, 97, 114, 116, 105, 99, 117, 108, 97, 114, 32, 116, 104, 111, 115, 101, 32, 115, 116, 114, 101, 115, 115, 105, 110, 103, 32, 105, 47, 112, 97, 105, 114, 115, 32, 97, 110, 100, 32, 112, 97, 99, 107, 47, 117, 110, 112, 97, 99, 107, 44, 32, 119, 104, 105, 99, 104, 10, 45, 45, 32, 97, 114, 101, 32, 97, 110, 121, 119, 97, 121, 32, 117, 110, 110, 101, 99, 101, 115, 115, 97, 114, 121, 32, 99, 111, 114, 110, 101, 114, 32, 99, 97, 115, 101, 115, 32, 105, 110, 32, 122, 101, 110, 114, 111, 111, 109, 44, 32, 119, 104, 105, 99, 104, 32, 101, 120, 105, 116, 115, 32, 99, 108, 101, 97, 110, 108, 121, 10, 45, 45, 32, 97, 110, 100, 32, 115, 105, 103, 110, 97, 108, 105, 110, 103, 32, 97, 32, 115, 116, 97, 99, 107, 32, 111, 118, 101, 114, 102, 108, 111, 119, 46, 32, 80, 108, 101, 97, 115, 101, 32, 114, 101, 112, 111, 114, 116, 32, 98, 97, 99, 107, 32, 105, 102, 32, 116, 104, 105, 115, 10, 45, 45, 32, 103, 101, 110, 101, 114, 97, 116, 101, 115, 32, 112, 114, 111, 98, 108, 101, 109, 115, 32, 108, 101, 97, 100, 105, 110, 103, 32, 116, 111, 32, 116, 104, 101, 32, 112, 97, 105, 114, 115, 32, 102, 111, 114, 32, 108, 111, 111, 112, 32, 105, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 98, 111, 118, 101, 46, 10, 95, 71, 91, 34, 115, 111, 114, 116, 95, 112, 97, 105, 114, 115, 34, 93, 32, 32, 61, 32, 95, 112, 97, 105, 114, 115, 10, 95, 71, 91, 34, 115, 111, 114, 116, 95, 105, 112, 97, 105, 114, 115, 34, 93, 32, 61, 32, 95, 112, 97, 105, 114, 115, 10, 10, 45, 45, 32, 100, 101, 101, 112, 32, 114, 101, 99, 117, 114, 115, 105, 118, 101, 32, 109, 97, 112, 32, 111, 110, 32, 97, 32, 116, 114, 101, 101, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 10, 45, 45, 32, 102, 111, 114, 32, 117, 115, 97, 103, 101, 32, 115, 101, 101, 32, 116, 101, 115, 116, 47, 100, 101, 101, 112, 109, 97, 112, 46, 108, 117, 97, 10, 45, 45, 32, 111, 112, 101, 114, 97, 116, 101, 115, 32, 111, 110, 108, 121, 32, 111, 110, 32, 115, 116, 114, 105, 110, 103, 115, 44, 32, 112, 97, 115, 115, 101, 115, 32, 110, 117, 109, 98, 101, 114, 115, 32, 116, 104, 114, 111, 117, 103, 104, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 116, 44, 46, 46, 46, 41, 10, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 102, 117, 110, 41, 32, 126, 61, 32, 39, 102, 117, 110, 99, 116, 105, 111, 110, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 73, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 100, 101, 101, 112, 109, 97, 112, 32, 49, 115, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 102, 117, 110, 99, 116, 105, 111, 110, 34, 44, 32, 51, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 116, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 116, 41, 32, 126, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 73, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 100, 101, 101, 112, 109, 97, 112, 32, 50, 110, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 116, 97, 98, 108, 101, 34, 44, 32, 51, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 125, 10, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 116, 41, 32, 100, 111, 10, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 114, 101, 115, 91, 107, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 118, 44, 46, 46, 46, 41, 32, 45, 45, 32, 114, 101, 99, 117, 114, 115, 105, 111, 110, 10, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 32, 114, 101, 115, 91, 107, 93, 32, 61, 32, 102, 117, 110, 40, 118, 44, 107, 44, 46, 46, 46, 41, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 114, 101, 115, 44, 32, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 116, 41, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 97, 112, 112, 108, 121, 32, 97, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 111, 110, 32, 97, 108, 108, 32, 107, 101, 121, 115, 32, 97, 110, 100, 32, 118, 97, 108, 117, 101, 115, 32, 111, 102, 32, 97, 32, 116, 114, 101, 101, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 10, 45, 45, 32, 117, 115, 101, 115, 32, 115, 111, 114, 116, 101, 100, 32, 108, 105, 115, 116, 105, 110, 103, 32, 102, 111, 114, 32, 100, 101, 116, 101, 114, 109, 105, 110, 105, 115, 116, 105, 99, 32, 111, 114, 100, 101, 114, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 111, 114, 116, 95, 97, 112, 112, 108, 121, 40, 102, 117, 110, 44, 116, 44, 46, 46, 46, 41, 10, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 102, 117, 110, 41, 32, 126, 61, 32, 39, 102, 117, 110, 99, 116, 105, 111, 110, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 73, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 97, 112, 112, 108, 121, 32, 49, 115, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 102, 117, 110, 99, 116, 105, 111, 110, 34, 44, 32, 51, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 116, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 116, 41, 32, 126, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 73, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 97, 112, 112, 108, 121, 32, 50, 110, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 116, 97, 98, 108, 101, 34, 44, 32, 51, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 115, 111, 114, 116, 95, 112, 97, 105, 114, 115, 40, 116, 41, 32, 100, 111, 10, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 115, 111, 114, 116, 95, 97, 112, 112, 108, 121, 40, 102, 117, 110, 44, 118, 44, 46, 46, 46, 41, 32, 45, 45, 32, 114, 101, 99, 117, 114, 115, 105, 111, 110, 10, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 32, 102, 117, 110, 40, 118, 44, 107, 44, 46, 46, 46, 41, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 45, 45, 32, 100, 101, 101, 112, 32, 114, 101, 99, 117, 114, 115, 105, 118, 101, 32, 109, 97, 112, 32, 111, 110, 32, 97, 32, 116, 114, 101, 101, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 10, 45, 45, 32, 102, 111, 114, 32, 117, 115, 97, 103, 101, 32, 115, 101, 101, 32, 116, 101, 115, 116, 47, 100, 101, 101, 112, 109, 97, 112, 46, 108, 117, 97, 10, 45, 45, 32, 111, 112, 101, 114, 97, 116, 101, 115, 32, 111, 110, 108, 121, 32, 111, 110, 32, 115, 116, 114, 105, 110, 103, 115, 44, 32, 112, 97, 115, 115, 101, 115, 32, 110, 117, 109, 98, 101, 114, 115, 32, 116, 104, 114, 111, 117, 103, 104, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 116, 44, 46, 46, 46, 41, 10, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 102, 117, 110, 41, 32, 126, 61, 32, 39, 102, 117, 110, 99, 116, 105, 111, 110, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 73, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 100, 101, 101, 112, 109, 97, 112, 32, 49, 115, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 102, 117, 110, 99, 116, 105, 111, 110, 34, 44, 32, 51, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 116, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 116, 41, 32, 126, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 73, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 100, 101, 101, 112, 109, 97, 112, 32, 50, 110, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 116, 97, 98, 108, 101, 34, 44, 32, 51, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 125, 10, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 116, 41, 32, 100, 111, 10, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 114, 101, 115, 91, 107, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 118, 44, 46, 46, 46, 41, 32, 45, 45, 32, 114, 101, 99, 117, 114, 115, 105, 111, 110, 10, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 32, 114, 101, 115, 91, 107, 93, 32, 61, 32, 102, 117, 110, 40, 118, 44, 107, 44, 46, 46, 46, 41, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 114, 101, 115, 44, 32, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 116, 41, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 97, 114, 114, 97, 121, 40, 111, 98, 106, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 111, 98, 106, 32, 116, 104, 101, 110, 32, 101, 114, 114, 111, 114, 40, 34, 65, 114, 103, 117, 109, 101, 110, 116, 32, 111, 102, 32, 105, 115, 97, 114, 114, 97, 121, 40, 41, 32, 105, 115, 32, 110, 105, 108, 34, 44, 50, 41, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 111, 98, 106, 41, 32, 126, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 32, 101, 114, 114, 111, 114, 40, 34, 65, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 116, 97, 98, 108, 101, 58, 32, 34, 46, 46, 116, 121, 112, 101, 40, 111, 98, 106, 41, 44, 50, 41, 32, 101, 110, 100, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 117, 110, 116, 32, 61, 32, 48, 10, 32, 32, 32, 102, 111, 114, 32, 107, 44, 32, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 111, 98, 106, 41, 32, 100, 111, 10, 9, 32, 32, 45, 45, 32, 99, 104, 101, 99, 107, 32, 116, 104, 97, 116, 32, 97, 108, 108, 32, 107, 101, 121, 115, 32, 97, 114, 101, 32, 110, 117, 109, 98, 101, 114, 115, 10, 9, 32, 32, 45, 45, 32, 100, 111, 110, 39, 116, 32, 99, 104, 101, 99, 107, 32, 115, 112, 97, 114, 115, 101, 32, 114, 97, 116, 105, 111, 32, 40, 99, 106, 115, 111, 110, 39, 115, 32, 108, 117, 97, 95, 97, 114, 114, 97, 121, 95, 108, 101, 110, 103, 116, 104, 41, 10, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 107, 41, 32, 126, 61, 32, 34, 110, 117, 109, 98, 101, 114, 34, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 48, 32, 101, 110, 100, 10, 9, 32, 32, 99, 111, 117, 110, 116, 32, 61, 32, 99, 111, 117, 110, 116, 32, 43, 32, 49, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 99, 111, 117, 110, 116, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 114, 114, 97, 121, 95, 99, 111, 110, 116, 97, 105, 110, 115, 40, 97, 114, 114, 44, 32, 111, 98, 106, 41, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 97, 114, 114, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 32, 34, 73, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 97, 114, 114, 97, 121, 95, 99, 111, 110, 116, 97, 105, 110, 115, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 116, 97, 98, 108, 101, 34, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 102, 97, 108, 115, 101, 10, 32, 32, 32, 102, 111, 114, 32, 107, 44, 32, 118, 32, 105, 110, 32, 105, 112, 97, 105, 114, 115, 40, 111, 98, 106, 41, 32, 100, 111, 10, 9, 32, 32, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 107, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 32, 34, 73, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 97, 114, 114, 97, 121, 95, 99, 111, 110, 116, 97, 105, 110, 115, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 34, 41, 10, 9, 32, 32, 114, 101, 115, 32, 61, 32, 114, 101, 115, 32, 111, 114, 32, 118, 32, 61, 61, 32, 111, 98, 106, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 10, 101, 110, 100, 10, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 104, 101, 108, 112, 40, 109, 111, 100, 117, 108, 101, 41, 10, 32, 32, 32, 105, 102, 32, 109, 111, 100, 117, 108, 101, 32, 61, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 10, 9, 32, 32, 112, 114, 105, 110, 116, 40, 34, 117, 115, 97, 103, 101, 58, 32, 104, 101, 108, 112, 40, 109, 111, 100, 117, 108, 101, 41, 34, 41, 10, 9, 32, 32, 112, 114, 105, 110, 116, 40, 34, 101, 120, 97, 109, 112, 108, 101, 32, 62, 32, 104, 101, 108, 112, 40, 111, 99, 116, 101, 116, 41, 34, 41, 10, 9, 32, 32, 112, 114, 105, 110, 116, 40, 34, 101, 120, 97, 109, 112, 108, 101, 32, 62, 32, 104, 101, 108, 112, 40, 101, 99, 100, 104, 41, 34, 41, 10, 9, 32, 32, 112, 114, 105, 110, 116, 40, 34, 101, 120, 97, 109, 112, 108, 101, 32, 62, 32, 104, 101, 108, 112, 40, 101, 99, 112, 41, 34, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 109, 111, 100, 117, 108, 101, 41, 32, 100, 111, 10, 9, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 118, 41, 126, 61, 39, 116, 97, 98, 108, 101, 39, 32, 97, 110, 100, 32, 115, 116, 114, 105, 110, 103, 46, 115, 117, 98, 40, 107, 44, 49, 44, 49, 41, 126, 61, 39, 95, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 112, 114, 105, 110, 116, 40, 34, 99, 108, 97, 115, 115, 32, 109, 101, 116, 104, 111, 100, 58, 32, 34, 46, 46, 107, 41, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 108, 111, 99, 97, 108, 32, 105, 110, 115, 116, 32, 61, 32, 109, 111, 100, 117, 108, 101, 46, 110, 101, 119, 40, 41, 10, 32, 32, 32, 45, 45, 32, 105, 102, 32, 105, 110, 115, 116, 32, 61, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 102, 111, 114, 32, 115, 44, 102, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 105, 110, 115, 116, 41, 41, 32, 100, 111, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 105, 102, 40, 115, 116, 114, 105, 110, 103, 46, 115, 117, 98, 40, 115, 44, 49, 44, 50, 41, 126, 61, 39, 95, 95, 39, 41, 32, 116, 104, 101, 110, 32, 112, 114, 105, 110, 116, 40, 34, 111, 98, 106, 101, 99, 116, 32, 109, 101, 116, 104, 111, 100, 58, 32, 34, 46, 46, 115, 41, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 45, 45, 32, 84, 79, 68, 79, 58, 32, 111, 112, 116, 105, 109, 105, 122, 101, 32, 105, 110, 32, 67, 32, 117, 115, 105, 110, 103, 32, 115, 116, 114, 116, 111, 107, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 112, 108, 105, 116, 40, 115, 114, 99, 44, 112, 97, 116, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 98, 108, 32, 61, 32, 123, 125, 10, 32, 32, 32, 115, 114, 99, 58, 103, 115, 117, 98, 40, 112, 97, 116, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 120, 41, 32, 116, 98, 108, 91, 35, 116, 98, 108, 43, 49, 93, 61, 120, 32, 101, 110, 100, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 98, 108, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 116, 114, 116, 111, 107, 40, 115, 114, 99, 44, 32, 112, 97, 116, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 115, 114, 99, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 125, 32, 101, 110, 100, 10, 32, 32, 32, 112, 97, 116, 32, 61, 32, 112, 97, 116, 32, 111, 114, 32, 34, 37, 83, 43, 34, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 115, 114, 99, 41, 32, 61, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 44, 32, 34, 115, 116, 114, 116, 111, 107, 32, 101, 114, 114, 111, 114, 58, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 105, 110, 103, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 112, 108, 105, 116, 40, 115, 114, 99, 44, 32, 112, 97, 116, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 97, 115, 115, 101, 114, 116, 32, 97, 108, 108, 32, 118, 97, 108, 117, 101, 115, 32, 105, 110, 32, 116, 97, 98, 108, 101, 32, 97, 114, 101, 32, 99, 111, 110, 118, 101, 114, 116, 101, 100, 32, 116, 111, 32, 122, 101, 110, 114, 111, 111, 109, 32, 116, 121, 112, 101, 115, 10, 45, 45, 32, 117, 115, 101, 100, 32, 105, 110, 32, 122, 101, 110, 99, 111, 100, 101, 32, 119, 104, 101, 110, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 105, 110, 103, 32, 111, 117, 116, 32, 111, 102, 32, 103, 105, 118, 101, 110, 32, 109, 101, 109, 111, 114, 121, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 103, 117, 97, 114, 100, 40, 118, 97, 108, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 40, 105, 115, 122, 101, 110, 40, 116, 121, 112, 101, 40, 118, 97, 108, 41, 41, 32, 111, 114, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 118, 97, 108, 41, 41, 32, 116, 104, 101, 110, 10, 9, 9, 73, 46, 112, 114, 105, 110, 116, 40, 90, 69, 78, 46, 104, 101, 97, 112, 40, 41, 46, 65, 67, 75, 41, 10, 9, 9, 120, 120, 120, 40, 34, 73, 110, 118, 97, 108, 105, 100, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 118, 97, 108, 41, 10, 9, 9, 101, 114, 114, 111, 114, 40, 34, 90, 101, 110, 103, 117, 97, 114, 100, 32, 100, 101, 116, 101, 99, 116, 101, 100, 32, 97, 110, 32, 105, 110, 118, 97, 108, 105, 100, 32, 118, 97, 108, 117, 101, 32, 105, 110, 32, 72, 69, 65, 80, 58, 32, 116, 121, 112, 101, 32, 34, 46, 46, 116, 121, 112, 101, 40, 118, 97, 108, 41, 44, 32, 50, 41, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10]);
Module['FS_createDataFile']('/', 'zenroom_common.lua', fileData7, true, true, false);
var fileData8 = [];
fileData8.push.apply(fileData8, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 10, 45, 45, 45, 32, 87, 72, 69, 78, 10, 10, 87, 104, 101, 110, 40, 34, 97, 112, 112, 101, 110, 100, 32, 39, 39, 32, 116, 111, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 114, 99, 44, 32, 100, 101, 115, 116, 44, 32, 102, 111, 114, 109, 97, 116, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 118, 97, 108, 32, 61, 32, 65, 67, 75, 91, 115, 114, 99, 93, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 118, 97, 108, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 97, 112, 112, 101, 110, 100, 32, 97, 32, 110, 111, 110, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 114, 105, 97, 98, 108, 101, 58, 32, 34, 46, 46, 115, 114, 99, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 100, 115, 116, 32, 61, 32, 65, 67, 75, 91, 100, 101, 115, 116, 93, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 100, 115, 116, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 97, 112, 112, 101, 110, 100, 32, 116, 111, 32, 110, 111, 110, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 58, 32, 34, 46, 46, 100, 101, 115, 116, 41, 10, 9, 9, 65, 67, 75, 91, 100, 101, 115, 116, 93, 32, 61, 32, 100, 115, 116, 32, 46, 46, 32, 118, 97, 108, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 101, 115, 116, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 91, 100, 101, 115, 116, 93, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 100, 101, 115, 116, 41, 10, 9, 9, 65, 67, 75, 91, 100, 101, 115, 116, 93, 32, 61, 32, 123, 32, 125, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 100, 101, 115, 116, 93, 32, 61, 32, 103, 117, 101, 115, 115, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 65, 67, 75, 91, 100, 101, 115, 116, 93, 44, 32, 100, 101, 115, 116, 41, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 100, 101, 115, 116, 93, 46, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 115, 105, 109, 112, 108, 105, 102, 105, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 102, 111, 114, 32, 73, 32, 119, 114, 105, 116, 101, 58, 32, 105, 109, 112, 111, 114, 116, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 102, 114, 111, 109, 95, 115, 116, 114, 105, 110, 103, 32, 46, 46, 46, 10, 87, 104, 101, 110, 40, 34, 119, 114, 105, 116, 101, 32, 115, 116, 114, 105, 110, 103, 32, 39, 39, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 111, 110, 116, 101, 110, 116, 44, 32, 100, 101, 115, 116, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 91, 100, 101, 115, 116, 93, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 100, 101, 115, 116, 41, 10, 9, 9, 65, 67, 75, 91, 100, 101, 115, 116, 93, 32, 61, 32, 79, 46, 102, 114, 111, 109, 95, 115, 116, 114, 105, 110, 103, 40, 99, 111, 110, 116, 101, 110, 116, 41, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 100, 101, 115, 116, 93, 32, 61, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 32, 125, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 46, 46, 46, 32, 97, 110, 100, 32, 102, 114, 111, 109, 32, 97, 32, 110, 117, 109, 98, 101, 114, 10, 87, 104, 101, 110, 40, 34, 119, 114, 105, 116, 101, 32, 110, 117, 109, 98, 101, 114, 32, 39, 39, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 111, 110, 116, 101, 110, 116, 44, 32, 100, 101, 115, 116, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 91, 100, 101, 115, 116, 93, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 100, 101, 115, 116, 41, 10, 9, 9, 45, 45, 32, 84, 79, 68, 79, 58, 32, 100, 101, 116, 101, 99, 116, 32, 110, 117, 109, 98, 101, 114, 32, 98, 97, 115, 101, 32, 49, 48, 10, 9, 9, 65, 67, 75, 91, 100, 101, 115, 116, 93, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 99, 111, 110, 116, 101, 110, 116, 44, 32, 49, 48, 41, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 100, 101, 115, 116, 93, 32, 61, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 32, 125, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 115, 101, 116, 32, 39, 39, 32, 116, 111, 32, 39, 39, 32, 97, 115, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 101, 115, 116, 44, 32, 99, 111, 110, 116, 101, 110, 116, 44, 32, 102, 111, 114, 109, 97, 116, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 91, 100, 101, 115, 116, 93, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 100, 101, 115, 116, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 103, 117, 101, 115, 115, 32, 61, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 102, 111, 114, 109, 97, 116, 41, 10, 9, 9, 103, 117, 101, 115, 115, 46, 114, 97, 119, 32, 61, 32, 99, 111, 110, 116, 101, 110, 116, 10, 9, 9, 65, 67, 75, 91, 100, 101, 115, 116, 93, 32, 61, 32, 111, 112, 101, 114, 97, 116, 101, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 103, 117, 101, 115, 115, 41, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 100, 101, 115, 116, 93, 32, 61, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 102, 111, 114, 109, 97, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 32, 125, 10, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 114, 97, 110, 100, 111, 109, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 101, 115, 116, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 91, 100, 101, 115, 116, 93, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 100, 101, 115, 116, 41, 10, 9, 9, 65, 67, 75, 91, 100, 101, 115, 116, 93, 32, 61, 32, 79, 67, 84, 69, 84, 46, 114, 97, 110, 100, 111, 109, 40, 54, 52, 41, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 114, 105, 103, 104, 116, 32, 110, 111, 119, 32, 104, 97, 114, 100, 99, 111, 100, 101, 100, 32, 50, 53, 54, 32, 98, 105, 116, 32, 114, 97, 110, 100, 111, 109, 32, 115, 101, 99, 114, 101, 116, 115, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 32, 111, 102, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 114, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 114, 99, 93, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 114, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 39, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 39, 41, 10, 9, 9, 65, 67, 75, 46, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 32, 61, 32, 90, 69, 78, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 65, 67, 75, 91, 115, 114, 99, 93, 41, 10, 101, 110, 100, 41, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 102, 108, 97, 116, 116, 101, 110, 105, 110, 103, 32, 111, 102, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 114, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 114, 99, 93, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 114, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 102, 108, 97, 116, 116, 101, 110, 105, 110, 103, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 39, 102, 108, 97, 116, 116, 101, 110, 105, 110, 103, 39, 41, 10, 9, 9, 65, 67, 75, 46, 102, 108, 97, 116, 116, 101, 110, 105, 110, 103, 32, 61, 32, 90, 69, 78, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 65, 67, 75, 91, 115, 114, 99, 93, 41, 10, 101, 110, 100, 41, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 32, 111, 102, 32, 100, 97, 116, 97, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 39, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 39, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 114, 101, 115, 10, 9, 9, 114, 101, 115, 32, 61, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 65, 67, 75, 41, 10, 9, 9, 65, 67, 75, 46, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 32, 61, 10, 9, 9, 32, 32, 32, 79, 67, 84, 69, 84, 46, 102, 114, 111, 109, 95, 115, 116, 114, 105, 110, 103, 40, 114, 101, 115, 46, 115, 116, 114, 105, 110, 103, 115, 41, 32, 46, 46, 32, 114, 101, 115, 46, 111, 99, 116, 101, 116, 115, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 99, 98, 111, 114, 32, 111, 102, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 114, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 114, 99, 93, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 114, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 102, 108, 97, 116, 116, 101, 110, 105, 110, 103, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 39, 99, 98, 111, 114, 39, 41, 10, 9, 9, 65, 67, 75, 46, 99, 98, 111, 114, 32, 61, 32, 67, 66, 79, 82, 46, 101, 110, 99, 111, 100, 101, 40, 65, 67, 75, 91, 115, 114, 99, 93, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 106, 115, 111, 110, 32, 111, 102, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 114, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 114, 99, 93, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 114, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 102, 108, 97, 116, 116, 101, 110, 105, 110, 103, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 39, 99, 98, 111, 114, 39, 41, 10, 9, 9, 65, 67, 75, 46, 99, 98, 111, 114, 32, 61, 32, 74, 83, 79, 78, 46, 101, 110, 99, 111, 100, 101, 40, 65, 67, 75, 91, 115, 114, 99, 93, 41, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 103, 101, 110, 101, 114, 105, 99, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 32, 117, 115, 105, 110, 103, 32, 111, 118, 101, 114, 108, 111, 97, 100, 101, 100, 32, 95, 95, 101, 113, 32, 111, 110, 32, 97, 110, 121, 32, 118, 97, 108, 117, 101, 10, 87, 104, 101, 110, 40, 34, 118, 101, 114, 105, 102, 121, 32, 39, 39, 32, 105, 115, 32, 101, 113, 117, 97, 108, 32, 116, 111, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 108, 44, 114, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 116, 97, 98, 101, 113, 32, 61, 32, 102, 97, 108, 115, 101, 10, 9, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 65, 67, 75, 91, 108, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 65, 67, 75, 91, 114, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 10, 9, 9, 9, 9, 9, 32, 32, 34, 67, 97, 110, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 101, 113, 117, 97, 108, 105, 116, 121, 58, 32, 34, 46, 46, 108, 46, 46, 34, 32, 105, 115, 32, 97, 32, 116, 97, 98, 108, 101, 44, 32, 34, 46, 46, 114, 46, 46, 34, 32, 105, 115, 32, 110, 111, 116, 34, 41, 10, 9, 9, 32, 32, 32, 116, 97, 98, 101, 113, 32, 61, 32, 116, 114, 117, 101, 10, 9, 9, 101, 110, 100, 10, 9, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 65, 67, 75, 91, 114, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 65, 67, 75, 91, 108, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 10, 9, 9, 9, 9, 9, 32, 32, 34, 67, 97, 110, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 101, 113, 117, 97, 108, 105, 116, 121, 58, 32, 34, 46, 46, 114, 46, 46, 34, 32, 105, 115, 32, 97, 32, 116, 97, 98, 108, 101, 44, 32, 34, 46, 46, 108, 46, 46, 34, 32, 105, 115, 32, 110, 111, 116, 34, 41, 10, 9, 9, 32, 32, 32, 116, 97, 98, 101, 113, 32, 61, 32, 116, 114, 117, 101, 10, 9, 9, 101, 110, 100, 10, 9, 9, 105, 102, 32, 116, 97, 98, 101, 113, 32, 116, 104, 101, 110, 32, 45, 45, 32, 117, 115, 101, 32, 67, 66, 79, 82, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 97, 110, 100, 32, 99, 111, 109, 112, 97, 114, 101, 32, 115, 116, 114, 105, 110, 103, 115, 58, 32, 116, 104, 101, 114, 101, 10, 9, 9, 9, 9, 9, 32, 32, 45, 45, 32, 109, 97, 121, 32, 98, 101, 32, 102, 97, 115, 116, 101, 114, 32, 119, 97, 121, 115, 44, 32, 98, 117, 116, 32, 116, 104, 105, 115, 32, 105, 115, 32, 99, 101, 114, 116, 97, 105, 110, 108, 121, 32, 116, 104, 101, 10, 9, 9, 9, 9, 9, 32, 32, 45, 45, 32, 109, 111, 115, 116, 32, 109, 97, 105, 110, 116, 97, 105, 110, 97, 98, 108, 101, 10, 9, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 32, 90, 69, 78, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 65, 67, 75, 91, 108, 93, 41, 32, 61, 61, 32, 90, 69, 78, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 65, 67, 75, 91, 114, 93, 41, 44, 10, 9, 9, 9, 9, 9, 32, 32, 32, 34, 86, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 97, 114, 114, 97, 121, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 101, 113, 117, 97, 108, 58, 32, 34, 46, 46, 108, 46, 46, 34, 32, 61, 61, 32, 34, 46, 46, 114, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 108, 93, 32, 61, 61, 32, 65, 67, 75, 91, 114, 93, 44, 10, 9, 9, 9, 9, 9, 32, 32, 34, 86, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 111, 98, 106, 101, 99, 116, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 101, 113, 117, 97, 108, 58, 32, 34, 46, 46, 108, 46, 46, 34, 32, 61, 61, 32, 34, 46, 46, 114, 41, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 118, 101, 114, 105, 102, 121, 32, 39, 39, 32, 105, 115, 32, 110, 111, 116, 32, 101, 113, 117, 97, 108, 32, 116, 111, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 108, 44, 114, 41, 10, 9, 108, 111, 99, 97, 108, 32, 116, 97, 98, 101, 113, 32, 61, 32, 102, 97, 108, 115, 101, 10, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 65, 67, 75, 91, 108, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 65, 67, 75, 91, 114, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 10, 9, 9, 9, 9, 32, 32, 34, 67, 97, 110, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 101, 113, 117, 97, 108, 105, 116, 121, 58, 32, 34, 46, 46, 108, 46, 46, 34, 32, 105, 115, 32, 97, 32, 116, 97, 98, 108, 101, 44, 32, 34, 46, 46, 114, 46, 46, 34, 32, 105, 115, 32, 110, 111, 116, 34, 41, 10, 9, 32, 32, 32, 116, 97, 98, 101, 113, 32, 61, 32, 116, 114, 117, 101, 10, 9, 101, 110, 100, 10, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 65, 67, 75, 91, 114, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 65, 67, 75, 91, 108, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 10, 9, 9, 9, 9, 32, 32, 34, 67, 97, 110, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 101, 113, 117, 97, 108, 105, 116, 121, 58, 32, 34, 46, 46, 114, 46, 46, 34, 32, 105, 115, 32, 97, 32, 116, 97, 98, 108, 101, 44, 32, 34, 46, 46, 108, 46, 46, 34, 32, 105, 115, 32, 110, 111, 116, 34, 41, 10, 9, 32, 32, 32, 116, 97, 98, 101, 113, 32, 61, 32, 116, 114, 117, 101, 10, 9, 101, 110, 100, 10, 9, 105, 102, 32, 116, 97, 98, 101, 113, 32, 116, 104, 101, 110, 32, 45, 45, 32, 117, 115, 101, 32, 67, 66, 79, 82, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 97, 110, 100, 32, 99, 111, 109, 112, 97, 114, 101, 32, 115, 116, 114, 105, 110, 103, 115, 58, 32, 116, 104, 101, 114, 101, 10, 9, 9, 9, 9, 32, 32, 45, 45, 32, 109, 97, 121, 32, 98, 101, 32, 102, 97, 115, 116, 101, 114, 32, 119, 97, 121, 115, 44, 32, 98, 117, 116, 32, 116, 104, 105, 115, 32, 105, 115, 32, 99, 101, 114, 116, 97, 105, 110, 108, 121, 32, 116, 104, 101, 10, 9, 9, 9, 9, 32, 32, 45, 45, 32, 109, 111, 115, 116, 32, 109, 97, 105, 110, 116, 97, 105, 110, 97, 98, 108, 101, 10, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 32, 67, 66, 79, 82, 46, 101, 110, 99, 111, 100, 101, 40, 65, 67, 75, 91, 108, 93, 41, 32, 126, 61, 32, 67, 66, 79, 82, 46, 101, 110, 99, 111, 100, 101, 40, 65, 67, 75, 91, 114, 93, 41, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 86, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 97, 114, 114, 97, 121, 115, 32, 97, 114, 101, 32, 101, 113, 117, 97, 108, 58, 32, 34, 46, 46, 108, 46, 46, 34, 32, 61, 61, 32, 34, 46, 46, 114, 41, 10, 9, 101, 108, 115, 101, 10, 9, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 108, 93, 32, 126, 61, 32, 65, 67, 75, 91, 114, 93, 44, 10, 9, 9, 9, 9, 32, 32, 34, 86, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 111, 98, 106, 101, 99, 116, 115, 32, 97, 114, 101, 32, 101, 113, 117, 97, 108, 58, 32, 34, 46, 46, 108, 46, 46, 34, 32, 61, 61, 32, 34, 46, 46, 114, 41, 10, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 110, 117, 109, 101, 114, 105, 99, 97, 108, 115, 10, 87, 104, 101, 110, 40, 34, 115, 101, 116, 32, 39, 39, 32, 116, 111, 32, 39, 39, 32, 98, 97, 115, 101, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 101, 115, 116, 44, 32, 99, 111, 110, 116, 101, 110, 116, 44, 32, 98, 97, 115, 101, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 91, 100, 101, 115, 116, 93, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 100, 101, 115, 116, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 98, 97, 115, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 98, 97, 115, 101, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 98, 97, 115, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 101, 114, 105, 99, 97, 108, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 111, 114, 32, 98, 97, 115, 101, 58, 32, 34, 46, 46, 98, 97, 115, 101, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 110, 117, 109, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 99, 111, 110, 116, 101, 110, 116, 44, 98, 97, 115, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 117, 109, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 101, 114, 105, 99, 97, 108, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 111, 114, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 99, 111, 110, 116, 101, 110, 116, 41, 10, 9, 9, 65, 67, 75, 91, 100, 101, 115, 116, 93, 32, 61, 32, 110, 117, 109, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 100, 101, 115, 116, 93, 32, 61, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 32, 125, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 99, 104, 101, 99, 107, 32, 97, 32, 116, 117, 112, 108, 101, 32, 111, 102, 32, 110, 117, 109, 98, 101, 114, 115, 32, 98, 101, 102, 111, 114, 101, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 44, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 111, 99, 116, 101, 116, 32, 105, 102, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 117, 109, 99, 104, 101, 99, 107, 40, 108, 101, 102, 116, 44, 32, 114, 105, 103, 104, 116, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 108, 44, 32, 97, 114, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 101, 102, 116, 44, 32, 34, 110, 117, 109, 99, 104, 101, 99, 107, 32, 108, 101, 102, 116, 32, 111, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 108, 101, 102, 116, 41, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 34, 32, 116, 104, 101, 110, 32, 97, 108, 32, 61, 32, 66, 73, 71, 46, 110, 101, 119, 40, 108, 101, 102, 116, 41, 58, 105, 110, 116, 101, 103, 101, 114, 40, 41, 10, 32, 32, 32, 101, 108, 115, 101, 32, 97, 108, 32, 61, 32, 108, 101, 102, 116, 32, 101, 110, 100, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 108, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 97, 108, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 99, 104, 101, 99, 107, 32, 108, 101, 102, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 58, 32, 34, 46, 46, 116, 121, 112, 101, 40, 108, 101, 102, 116, 41, 41, 10, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 114, 105, 103, 104, 116, 44, 32, 34, 110, 117, 109, 99, 104, 101, 99, 107, 32, 114, 105, 103, 104, 116, 32, 111, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 114, 105, 103, 104, 116, 41, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 34, 32, 116, 104, 101, 110, 32, 97, 114, 32, 61, 32, 66, 73, 71, 46, 110, 101, 119, 40, 114, 105, 103, 104, 116, 41, 58, 105, 110, 116, 101, 103, 101, 114, 40, 41, 10, 32, 32, 32, 101, 108, 115, 101, 32, 97, 114, 32, 61, 32, 114, 105, 103, 104, 116, 32, 101, 110, 100, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 97, 114, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 114, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 101, 114, 105, 99, 97, 108, 32, 105, 110, 32, 114, 105, 103, 104, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 58, 32, 34, 46, 46, 116, 121, 112, 101, 40, 114, 105, 103, 104, 116, 41, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 108, 44, 32, 114, 10, 101, 110, 100, 10, 87, 104, 101, 110, 40, 34, 110, 117, 109, 98, 101, 114, 32, 39, 39, 32, 105, 115, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 108, 101, 102, 116, 44, 32, 114, 105, 103, 104, 116, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 108, 44, 32, 114, 32, 61, 32, 110, 117, 109, 99, 104, 101, 99, 107, 40, 65, 67, 75, 91, 108, 101, 102, 116, 93, 44, 32, 65, 67, 75, 91, 114, 105, 103, 104, 116, 93, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 32, 60, 32, 114, 44, 32, 34, 70, 97, 105, 108, 101, 100, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 58, 32, 34, 46, 46, 108, 46, 46, 34, 32, 105, 115, 32, 110, 111, 116, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 34, 46, 46, 114, 41, 10, 101, 110, 100, 41, 10, 87, 104, 101, 110, 40, 34, 110, 117, 109, 98, 101, 114, 32, 39, 39, 32, 105, 115, 32, 108, 101, 115, 115, 32, 111, 114, 32, 101, 113, 117, 97, 108, 32, 116, 104, 97, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 108, 101, 102, 116, 44, 32, 114, 105, 103, 104, 116, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 108, 44, 32, 114, 32, 61, 32, 110, 117, 109, 99, 104, 101, 99, 107, 40, 65, 67, 75, 91, 108, 101, 102, 116, 93, 44, 32, 65, 67, 75, 91, 114, 105, 103, 104, 116, 93, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 32, 60, 61, 32, 114, 44, 32, 34, 70, 97, 105, 108, 101, 100, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 58, 32, 34, 46, 46, 108, 46, 46, 34, 32, 105, 115, 32, 110, 111, 116, 32, 108, 101, 115, 115, 32, 111, 114, 32, 101, 113, 117, 97, 108, 32, 116, 104, 97, 110, 32, 34, 46, 46, 114, 41, 10, 101, 110, 100, 41, 10, 87, 104, 101, 110, 40, 34, 110, 117, 109, 98, 101, 114, 32, 39, 39, 32, 105, 115, 32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 108, 101, 102, 116, 44, 32, 114, 105, 103, 104, 116, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 108, 44, 32, 114, 32, 61, 32, 110, 117, 109, 99, 104, 101, 99, 107, 40, 65, 67, 75, 91, 108, 101, 102, 116, 93, 44, 32, 65, 67, 75, 91, 114, 105, 103, 104, 116, 93, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 32, 62, 32, 114, 44, 32, 34, 70, 97, 105, 108, 101, 100, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 58, 32, 34, 46, 46, 108, 46, 46, 34, 32, 105, 115, 32, 110, 111, 116, 32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 34, 46, 46, 114, 41, 10, 101, 110, 100, 41, 10, 87, 104, 101, 110, 40, 34, 110, 117, 109, 98, 101, 114, 32, 39, 39, 32, 105, 115, 32, 109, 111, 114, 101, 32, 111, 114, 32, 101, 113, 117, 97, 108, 32, 116, 104, 97, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 108, 101, 102, 116, 44, 32, 114, 105, 103, 104, 116, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 108, 44, 32, 114, 32, 61, 32, 110, 117, 109, 99, 104, 101, 99, 107, 40, 65, 67, 75, 91, 108, 101, 102, 116, 93, 44, 32, 65, 67, 75, 91, 114, 105, 103, 104, 116, 93, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 32, 62, 61, 32, 114, 44, 32, 34, 70, 97, 105, 108, 101, 100, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 58, 32, 34, 46, 46, 108, 46, 46, 34, 32, 105, 115, 32, 110, 111, 116, 32, 109, 111, 114, 101, 32, 111, 114, 32, 101, 113, 117, 97, 108, 32, 116, 104, 97, 110, 32, 34, 46, 46, 114, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 114, 101, 110, 97, 109, 101, 32, 116, 104, 101, 32, 39, 39, 32, 116, 111, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 108, 100, 44, 110, 101, 119, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 111, 108, 100, 93, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 111, 108, 100, 41, 10, 9, 9, 65, 67, 75, 91, 110, 101, 119, 93, 32, 61, 32, 65, 67, 75, 91, 111, 108, 100, 93, 10, 9, 9, 65, 67, 75, 91, 111, 108, 100, 93, 32, 61, 32, 110, 105, 108, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 110, 101, 119, 93, 32, 61, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 111, 108, 100, 93, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 111, 108, 100, 93, 32, 61, 32, 110, 105, 108, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 115, 112, 108, 105, 116, 32, 116, 104, 101, 32, 114, 105, 103, 104, 116, 109, 111, 115, 116, 32, 39, 39, 32, 98, 121, 116, 101, 115, 32, 111, 102, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 108, 101, 110, 44, 32, 115, 114, 99, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 115, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 108, 101, 110, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 98, 101, 114, 32, 97, 114, 103, 32, 35, 49, 58, 32, 34, 46, 46, 116, 121, 112, 101, 40, 108, 101, 110, 41, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 114, 99, 93, 44, 32, 34, 69, 108, 101, 109, 101, 110, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 114, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 114, 105, 103, 104, 116, 109, 111, 115, 116, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 34, 114, 105, 103, 104, 116, 109, 111, 115, 116, 34, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 108, 44, 114, 32, 61, 32, 79, 67, 84, 69, 84, 46, 99, 104, 111, 112, 40, 65, 67, 75, 91, 115, 114, 99, 93, 44, 115, 41, 10, 9, 9, 65, 67, 75, 46, 114, 105, 103, 104, 116, 109, 111, 115, 116, 32, 61, 32, 114, 10, 9, 9, 65, 67, 75, 91, 115, 114, 99, 93, 32, 61, 32, 108, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 114, 105, 103, 104, 116, 109, 111, 115, 116, 32, 61, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 115, 114, 99, 93, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 115, 112, 108, 105, 116, 32, 116, 104, 101, 32, 108, 101, 102, 116, 109, 111, 115, 116, 32, 39, 39, 32, 98, 121, 116, 101, 115, 32, 111, 102, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 108, 101, 110, 44, 32, 115, 114, 99, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 115, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 108, 101, 110, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 98, 101, 114, 32, 97, 114, 103, 32, 35, 49, 58, 32, 34, 46, 46, 116, 121, 112, 101, 40, 108, 101, 110, 41, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 114, 99, 93, 44, 32, 34, 69, 108, 101, 109, 101, 110, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 114, 99, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 108, 101, 102, 116, 109, 111, 115, 116, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 34, 46, 46, 34, 108, 101, 102, 116, 109, 111, 115, 116, 34, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 108, 44, 114, 32, 61, 32, 79, 67, 84, 69, 84, 46, 99, 104, 111, 112, 40, 65, 67, 75, 91, 115, 114, 99, 93, 44, 115, 41, 10, 9, 9, 65, 67, 75, 46, 108, 101, 102, 116, 109, 111, 115, 116, 32, 61, 32, 108, 10, 9, 9, 65, 67, 75, 91, 115, 114, 99, 93, 32, 61, 32, 114, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 108, 101, 102, 116, 109, 111, 115, 116, 32, 61, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 115, 114, 99, 93, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 115, 117, 109, 32, 111, 102, 32, 39, 39, 32, 97, 110, 100, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 108, 101, 102, 116, 44, 114, 105, 103, 104, 116, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 108, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 65, 67, 75, 91, 108, 101, 102, 116, 93, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 98, 101, 114, 32, 102, 111, 114, 32, 115, 117, 109, 58, 32, 34, 46, 46, 108, 101, 102, 116, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 65, 67, 75, 91, 114, 105, 103, 104, 116, 93, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 114, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 98, 101, 114, 32, 102, 111, 114, 32, 115, 117, 109, 58, 32, 34, 46, 46, 114, 105, 103, 104, 116, 41, 10, 9, 9, 65, 67, 75, 46, 115, 117, 109, 32, 61, 32, 108, 32, 43, 32, 114, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 115, 117, 109, 32, 61, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 115, 117, 109, 44, 10, 9, 9, 9, 9, 9, 9, 32, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 10, 9, 9, 9, 9, 9, 9, 32, 32, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 10, 9, 9, 9, 9, 9, 9, 32, 32, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 32, 125, 10, 101, 110, 100, 41, 10, 45, 45, 32, 84, 79, 68, 79, 58, 10, 45, 45, 32, 87, 104, 101, 110, 40, 34, 115, 101, 116, 32, 39, 39, 32, 97, 115, 32, 39, 39, 32, 119, 105, 116, 104, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 101, 115, 116, 44, 32, 102, 111, 114, 109, 97, 116, 44, 32, 99, 111, 110, 116, 101, 110, 116, 41, 32, 101, 110, 100, 41, 10, 45, 45, 32, 87, 104, 101, 110, 40, 34, 97, 112, 112, 101, 110, 100, 32, 39, 39, 32, 97, 115, 32, 39, 39, 32, 116, 111, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 111, 110, 116, 101, 110, 116, 44, 32, 102, 111, 114, 109, 97, 116, 44, 32, 100, 101, 115, 116, 41, 32, 101, 110, 100, 41, 10, 45, 45, 32, 87, 104, 101, 110, 40, 34, 119, 114, 105, 116, 101, 32, 39, 39, 32, 97, 115, 32, 39, 39, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 111, 110, 116, 101, 110, 116, 44, 32, 100, 101, 115, 116, 41, 32, 101, 110, 100, 41, 10, 45, 45, 32, 105, 109, 112, 108, 105, 99, 105, 116, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 97, 115, 32, 115, 116, 114, 105, 110, 103, 10]);
Module['FS_createDataFile']('/', 'zencode_when.lua', fileData8, true, true, false);
var fileData9 = [];
fileData9.push.apply(fileData9, [108, 111, 99, 97, 108, 32, 102, 112, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 39, 102, 112, 39, 10, 10, 114, 101, 116, 117, 114, 110, 32, 102, 112, 10]);
Module['FS_createDataFile']('/', 'zenroom_fp.lua', fileData9, true, true, false);
var fileData10 = [];
fileData10.push.apply(fileData10, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 108, 111, 99, 97, 108, 32, 101, 99, 112, 50, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 39, 101, 99, 112, 50, 39, 10, 114, 101, 113, 117, 105, 114, 101, 39, 102, 112, 49, 50, 39, 32, 45, 45, 32, 70, 80, 49, 50, 32, 105, 109, 112, 108, 105, 99, 105, 116, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 99, 112, 50, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 40, 115, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 101, 99, 112, 50, 46, 109, 97, 112, 105, 116, 40, 115, 104, 97, 53, 49, 50, 40, 115, 41, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 99, 112, 50, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 101, 99, 112, 50, 46, 109, 97, 112, 105, 116, 40, 79, 67, 84, 69, 84, 46, 114, 97, 110, 100, 111, 109, 40, 54, 52, 41, 41, 10, 101, 110, 100, 10, 10, 114, 101, 116, 117, 114, 110, 32, 101, 99, 112, 50, 10]);
Module['FS_createDataFile']('/', 'zenroom_ecp2.lua', fileData10, true, true, false);
var fileData11 = [];
fileData11.push.apply(fileData11, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 32, 68, 101, 99, 101, 110, 116, 114, 97, 108, 105, 122, 101, 100, 32, 80, 114, 105, 118, 97, 99, 121, 45, 80, 114, 101, 115, 101, 114, 118, 105, 110, 103, 32, 80, 114, 111, 120, 105, 109, 105, 116, 121, 32, 84, 114, 97, 99, 105, 110, 103, 32, 115, 99, 101, 110, 97, 114, 105, 111, 110, 32, 105, 110, 32, 90, 101, 110, 99, 111, 100, 101, 10, 10, 83, 72, 65, 50, 53, 54, 32, 61, 32, 72, 65, 83, 72, 46, 110, 101, 119, 40, 39, 115, 104, 97, 50, 53, 54, 39, 41, 10, 10, 45, 45, 32, 90, 69, 78, 46, 97, 100, 100, 95, 115, 99, 104, 101, 109, 97, 40, 123, 10, 45, 45, 32, 9, 32, 32, 45, 45, 32, 115, 101, 99, 114, 101, 116, 95, 100, 97, 121, 95, 107, 101, 121, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 45, 45, 32, 9, 32, 32, 45, 45, 32, 9, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 35, 111, 98, 106, 32, 61, 61, 32, 51, 50, 44, 32, 34, 83, 101, 99, 114, 101, 116, 32, 100, 97, 121, 32, 107, 101, 121, 32, 104, 97, 115, 32, 119, 114, 111, 110, 103, 32, 115, 105, 122, 101, 32, 40, 110, 111, 116, 32, 51, 50, 32, 98, 121, 116, 101, 115, 32, 47, 32, 50, 53, 54, 32, 98, 105, 116, 115, 41, 34, 41, 10, 45, 45, 32, 9, 32, 32, 45, 45, 32, 9, 32, 114, 101, 116, 117, 114, 110, 32, 111, 98, 106, 10, 45, 45, 32, 9, 32, 32, 45, 45, 32, 101, 110, 100, 10, 45, 45, 32, 9, 32, 32, 45, 45, 32, 84, 79, 68, 79, 58, 10, 45, 45, 32, 9, 32, 32, 45, 45, 32, 108, 105, 115, 116, 32, 111, 102, 32, 105, 110, 102, 101, 99, 116, 101, 100, 32, 40, 97, 114, 114, 97, 121, 32, 111, 102, 32, 51, 50, 32, 98, 121, 116, 101, 32, 114, 97, 110, 100, 111, 109, 32, 104, 97, 115, 104, 101, 115, 41, 10, 45, 45, 32, 9, 32, 32, 45, 45, 32, 101, 112, 104, 101, 109, 101, 114, 97, 108, 32, 105, 100, 115, 32, 40, 97, 114, 114, 97, 121, 32, 111, 102, 32, 49, 54, 32, 98, 121, 116, 101, 32, 65, 69, 83, 45, 71, 67, 77, 32, 99, 104, 101, 99, 107, 115, 117, 109, 115, 41, 10, 45, 45, 32, 125, 41, 10, 10, 87, 104, 101, 110, 40, 34, 114, 101, 110, 101, 119, 32, 116, 104, 101, 32, 115, 101, 99, 114, 101, 116, 32, 100, 97, 121, 32, 107, 101, 121, 32, 116, 111, 32, 97, 32, 110, 101, 119, 32, 100, 97, 121, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 100, 97, 121, 95, 107, 101, 121, 44, 32, 34, 83, 101, 99, 114, 101, 116, 32, 100, 97, 121, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 115, 107, 32, 61, 32, 83, 72, 65, 50, 53, 54, 58, 112, 114, 111, 99, 101, 115, 115, 40, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 100, 97, 121, 95, 107, 101, 121, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 107, 44, 32, 34, 69, 114, 114, 111, 114, 32, 114, 101, 110, 101, 119, 105, 110, 103, 32, 115, 101, 99, 114, 101, 116, 32, 100, 97, 121, 32, 107, 101, 121, 32, 40, 83, 72, 65, 50, 53, 54, 41, 34, 41, 10, 9, 9, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 100, 97, 121, 95, 107, 101, 121, 32, 61, 32, 115, 107, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 101, 112, 104, 101, 109, 101, 114, 97, 108, 32, 105, 100, 115, 32, 102, 111, 114, 32, 116, 111, 100, 97, 121, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 100, 97, 121, 95, 107, 101, 121, 44, 32, 34, 83, 101, 99, 114, 101, 116, 32, 100, 97, 121, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 98, 114, 111, 97, 100, 99, 97, 115, 116, 95, 107, 101, 121, 44, 32, 34, 66, 114, 111, 97, 100, 99, 97, 115, 116, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 65, 67, 75, 46, 101, 112, 111, 99, 104, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 32, 34, 69, 112, 111, 99, 104, 32, 108, 101, 110, 103, 116, 104, 32, 40, 109, 105, 110, 117, 116, 101, 115, 41, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 80, 82, 70, 32, 61, 32, 83, 72, 65, 50, 53, 54, 58, 104, 109, 97, 99, 40, 65, 67, 75, 46, 115, 101, 99, 114, 101, 116, 95, 100, 97, 121, 95, 107, 101, 121, 44, 32, 65, 67, 75, 46, 98, 114, 111, 97, 100, 99, 97, 115, 116, 95, 107, 101, 121, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 101, 112, 100, 32, 61, 32, 40, 50, 52, 42, 54, 48, 41, 47, 65, 67, 75, 46, 101, 112, 111, 99, 104, 32, 45, 45, 32, 110, 117, 109, 32, 101, 112, 111, 99, 104, 115, 32, 112, 101, 114, 32, 100, 97, 121, 10, 9, 9, 108, 111, 99, 97, 108, 32, 122, 101, 114, 111, 32, 61, 32, 79, 67, 84, 69, 84, 46, 122, 101, 114, 111, 40, 73, 46, 115, 112, 121, 40, 101, 112, 100, 42, 49, 54, 41, 41, 32, 45, 45, 32, 48, 32, 98, 121, 116, 101, 32, 98, 117, 102, 102, 101, 114, 10, 9, 9, 65, 67, 75, 46, 101, 112, 104, 101, 109, 101, 114, 97, 108, 95, 105, 100, 115, 32, 61, 32, 123, 32, 125, 10, 9, 9, 102, 111, 114, 32, 105, 32, 61, 32, 48, 44, 101, 112, 100, 44, 49, 32, 100, 111, 10, 9, 9, 32, 32, 32, 108, 111, 99, 97, 108, 32, 80, 82, 71, 32, 61, 32, 73, 46, 115, 112, 121, 40, 65, 69, 83, 46, 99, 116, 114, 40, 80, 82, 70, 44, 32, 122, 101, 114, 111, 44, 32, 79, 46, 102, 114, 111, 109, 95, 110, 117, 109, 98, 101, 114, 40, 105, 41, 41, 41, 10, 9, 9, 32, 32, 32, 108, 111, 99, 97, 108, 32, 108, 44, 114, 32, 61, 32, 79, 67, 84, 69, 84, 46, 99, 104, 111, 112, 40, 80, 82, 71, 44, 49, 54, 41, 10, 9, 9, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 46, 101, 112, 104, 101, 109, 101, 114, 97, 108, 95, 105, 100, 115, 44, 32, 108, 41, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 112, 114, 111, 120, 105, 109, 105, 116, 121, 32, 116, 114, 97, 99, 105, 110, 103, 32, 111, 102, 32, 105, 110, 102, 101, 99, 116, 101, 100, 32, 105, 100, 115, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 65, 67, 75, 46, 101, 112, 111, 99, 104, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 32, 34, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 109, 111, 109, 101, 110, 116, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 65, 67, 75, 46, 108, 105, 115, 116, 95, 111, 102, 95, 105, 110, 102, 101, 99, 116, 101, 100, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 32, 34, 76, 105, 115, 116, 32, 111, 102, 32, 105, 110, 102, 101, 99, 116, 101, 100, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 65, 67, 75, 46, 101, 112, 104, 101, 109, 101, 114, 97, 108, 95, 105, 100, 115, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 32, 34, 76, 105, 115, 116, 32, 111, 102, 32, 101, 112, 104, 101, 109, 101, 114, 97, 108, 32, 105, 100, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 98, 114, 111, 97, 100, 99, 97, 115, 116, 95, 107, 101, 121, 44, 32, 34, 66, 114, 111, 97, 100, 99, 97, 115, 116, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 65, 67, 75, 46, 112, 114, 111, 120, 105, 109, 105, 116, 121, 95, 116, 114, 97, 99, 105, 110, 103, 32, 61, 32, 123, 32, 125, 10, 9, 9, 108, 111, 99, 97, 108, 32, 101, 112, 100, 32, 61, 32, 40, 50, 52, 42, 54, 48, 41, 47, 65, 67, 75, 46, 101, 112, 111, 99, 104, 32, 45, 45, 32, 110, 117, 109, 32, 101, 112, 111, 99, 104, 115, 32, 112, 101, 114, 32, 100, 97, 121, 10, 9, 9, 108, 111, 99, 97, 108, 32, 122, 101, 114, 111, 32, 61, 32, 79, 67, 84, 69, 84, 46, 110, 101, 119, 40, 101, 112, 100, 42, 49, 54, 41, 58, 122, 101, 114, 111, 40, 41, 32, 45, 45, 32, 48, 32, 98, 121, 116, 101, 32, 98, 117, 102, 102, 101, 114, 10, 9, 9, 102, 111, 114, 32, 110, 44, 115, 107, 32, 105, 110, 32, 105, 112, 97, 105, 114, 115, 40, 65, 67, 75, 46, 108, 105, 115, 116, 95, 111, 102, 95, 105, 110, 102, 101, 99, 116, 101, 100, 41, 32, 100, 111, 10, 9, 9, 32, 32, 32, 108, 111, 99, 97, 108, 32, 80, 82, 70, 32, 61, 32, 83, 72, 65, 50, 53, 54, 58, 104, 109, 97, 99, 40, 115, 107, 44, 32, 65, 67, 75, 46, 98, 114, 111, 97, 100, 99, 97, 115, 116, 95, 107, 101, 121, 41, 10, 9, 9, 32, 32, 32, 102, 111, 114, 32, 105, 32, 61, 32, 48, 44, 101, 112, 100, 44, 49, 32, 100, 111, 10, 9, 9, 9, 32, 32, 108, 111, 99, 97, 108, 32, 80, 82, 71, 32, 61, 32, 79, 67, 84, 69, 84, 46, 99, 104, 111, 112, 40, 32, 65, 69, 83, 46, 99, 116, 114, 40, 80, 82, 70, 44, 32, 122, 101, 114, 111, 44, 32, 79, 46, 102, 114, 111, 109, 95, 110, 117, 109, 98, 101, 114, 40, 105, 41, 41, 44, 32, 49, 54, 41, 10, 9, 9, 9, 32, 32, 102, 111, 114, 32, 110, 110, 44, 101, 112, 104, 32, 105, 110, 32, 110, 101, 120, 116, 44, 32, 65, 67, 75, 46, 101, 112, 104, 101, 109, 101, 114, 97, 108, 95, 105, 100, 115, 44, 32, 110, 105, 108, 32, 100, 111, 10, 9, 9, 9, 9, 32, 105, 102, 32, 101, 112, 104, 32, 61, 61, 32, 80, 82, 71, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 9, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 46, 112, 114, 111, 120, 105, 109, 105, 116, 121, 95, 116, 114, 97, 99, 105, 110, 103, 44, 32, 115, 107, 41, 10, 9, 9, 9, 9, 32, 101, 110, 100, 10, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 32, 32, 32, 101, 110, 100, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10]);
Module['FS_createDataFile']('/', 'zencode_dp3t.lua', fileData11, true, true, false);
var fileData12 = [];
fileData12.push.apply(fileData12, [108, 111, 99, 97, 108, 32, 98, 105, 103, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 39, 98, 105, 103, 39, 10, 10, 114, 101, 116, 117, 114, 110, 32, 98, 105, 103, 10]);
Module['FS_createDataFile']('/', 'zenroom_big.lua', fileData12, true, true, false);
var fileData13 = [];
fileData13.push.apply(fileData13, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 108, 111, 99, 97, 108, 32, 101, 99, 112, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 39, 101, 99, 112, 39, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 99, 112, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 40, 115, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 101, 99, 112, 46, 109, 97, 112, 105, 116, 40, 115, 104, 97, 53, 49, 50, 40, 115, 41, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 99, 112, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 101, 99, 112, 46, 109, 97, 112, 105, 116, 40, 79, 67, 84, 69, 84, 46, 114, 97, 110, 100, 111, 109, 40, 54, 52, 41, 41, 10, 101, 110, 100, 10, 10, 114, 101, 116, 117, 114, 110, 32, 101, 99, 112, 10]);
Module['FS_createDataFile']('/', 'zenroom_ecp.lua', fileData13, true, true, false);
var fileData14 = [];
fileData14.push.apply(fileData14, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 32, 108, 105, 109, 105, 116, 32, 111, 117, 116, 112, 117, 116, 32, 111, 102, 32, 115, 116, 114, 105, 110, 103, 32, 105, 102, 32, 116, 111, 111, 32, 108, 111, 110, 103, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 105, 109, 105, 116, 40, 97, 110, 121, 115, 116, 114, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 97, 110, 121, 115, 116, 114, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 61, 61, 39, 115, 116, 114, 105, 110, 103, 39, 44, 34, 65, 114, 103, 117, 109, 101, 110, 116, 32, 116, 111, 32, 108, 105, 109, 105, 116, 32, 111, 110, 45, 115, 99, 114, 101, 101, 110, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 105, 110, 103, 34, 41, 10, 32, 32, 32, 105, 102, 32, 35, 97, 110, 121, 115, 116, 114, 32, 62, 32, 51, 50, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 40, 115, 116, 114, 105, 110, 103, 46, 115, 117, 98, 40, 97, 110, 121, 115, 116, 114, 44, 49, 44, 51, 50, 41, 46, 46, 34, 46, 46, 34, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 40, 97, 110, 121, 115, 116, 114, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 100, 101, 98, 117, 103, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 98, 117, 103, 95, 116, 114, 97, 99, 101, 98, 97, 99, 107, 40, 41, 10, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 90, 69, 78, 46, 116, 114, 97, 99, 101, 98, 97, 99, 107, 41, 32, 100, 111, 10, 9, 32, 32, 119, 97, 114, 110, 40, 118, 41, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 71, 105, 118, 101, 110, 40, 34, 98, 97, 99, 107, 116, 114, 97, 99, 101, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 100, 101, 98, 117, 103, 95, 116, 114, 97, 99, 101, 98, 97, 99, 107, 40, 41, 32, 101, 110, 100, 41, 10, 87, 104, 101, 110, 40, 34, 98, 97, 99, 107, 116, 114, 97, 99, 101, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 100, 101, 98, 117, 103, 95, 116, 114, 97, 99, 101, 98, 97, 99, 107, 40, 41, 32, 101, 110, 100, 41, 10, 84, 104, 101, 110, 40, 34, 98, 97, 99, 107, 116, 114, 97, 99, 101, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 100, 101, 98, 117, 103, 95, 116, 114, 97, 99, 101, 98, 97, 99, 107, 40, 41, 32, 101, 110, 100, 41, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 98, 117, 103, 95, 104, 101, 97, 112, 95, 100, 117, 109, 112, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 72, 69, 65, 80, 32, 61, 32, 90, 69, 78, 46, 104, 101, 97, 112, 40, 41, 10, 32, 32, 32, 73, 46, 119, 97, 114, 110, 40, 123, 97, 95, 71, 73, 86, 69, 78, 95, 105, 110, 32, 61, 32, 72, 69, 65, 80, 46, 73, 78, 44, 10, 9, 9, 32, 32, 32, 98, 95, 87, 72, 69, 78, 95, 97, 99, 107, 32, 61, 32, 72, 69, 65, 80, 46, 65, 67, 75, 44, 10, 9, 9, 32, 32, 32, 99, 95, 84, 72, 69, 78, 95, 111, 117, 116, 32, 61, 32, 72, 69, 65, 80, 46, 79, 85, 84, 125, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 98, 117, 103, 95, 104, 101, 97, 112, 95, 115, 99, 104, 101, 109, 97, 40, 41, 10, 32, 32, 32, 73, 46, 115, 99, 104, 101, 109, 97, 40, 123, 83, 67, 72, 69, 77, 65, 32, 61, 32, 90, 69, 78, 46, 104, 101, 97, 112, 40, 41, 125, 41, 10, 32, 32, 32, 45, 45, 32, 112, 114, 105, 110, 116, 32, 111, 110, 108, 121, 32, 107, 101, 121, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 118, 97, 108, 117, 101, 115, 10, 101, 110, 100, 10, 10, 45, 45, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 98, 117, 103, 95, 111, 98, 106, 95, 100, 117, 109, 112, 40, 41, 10, 45, 45, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 98, 117, 103, 95, 111, 98, 106, 95, 115, 99, 104, 101, 109, 97, 40, 41, 10, 10, 71, 105, 118, 101, 110, 40, 34, 100, 101, 98, 117, 103, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 90, 69, 78, 46, 100, 101, 98, 117, 103, 40, 41, 32, 101, 110, 100, 41, 10, 87, 104, 101, 110, 40, 34, 100, 101, 98, 117, 103, 34, 44, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 90, 69, 78, 46, 100, 101, 98, 117, 103, 40, 41, 32, 101, 110, 100, 41, 10, 84, 104, 101, 110, 40, 34, 100, 101, 98, 117, 103, 34, 44, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 90, 69, 78, 46, 100, 101, 98, 117, 103, 40, 41, 32, 101, 110, 100, 41, 10, 10, 71, 105, 118, 101, 110, 40, 34, 115, 99, 104, 101, 109, 97, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 100, 101, 98, 117, 103, 95, 104, 101, 97, 112, 95, 115, 99, 104, 101, 109, 97, 40, 41, 32, 101, 110, 100, 41, 10, 87, 104, 101, 110, 40, 34, 115, 99, 104, 101, 109, 97, 34, 44, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 100, 101, 98, 117, 103, 95, 104, 101, 97, 112, 95, 115, 99, 104, 101, 109, 97, 40, 41, 32, 101, 110, 100, 41, 10, 84, 104, 101, 110, 40, 34, 115, 99, 104, 101, 109, 97, 34, 44, 32, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 100, 101, 98, 117, 103, 95, 104, 101, 97, 112, 95, 115, 99, 104, 101, 109, 97, 40, 41, 32, 101, 110, 100, 41, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 98, 117, 103, 95, 99, 111, 100, 101, 99, 40, 41, 10, 32, 32, 32, 73, 46, 119, 97, 114, 110, 40, 123, 67, 79, 68, 69, 67, 32, 61, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 125, 41, 10, 101, 110, 100, 10, 10, 71, 105, 118, 101, 110, 40, 34, 99, 111, 100, 101, 99, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 100, 101, 98, 117, 103, 95, 99, 111, 100, 101, 99, 40, 41, 32, 101, 110, 100, 41, 10, 87, 104, 101, 110, 40, 34, 99, 111, 100, 101, 99, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 100, 101, 98, 117, 103, 95, 99, 111, 100, 101, 99, 40, 41, 32, 101, 110, 100, 41, 10, 84, 104, 101, 110, 40, 34, 99, 111, 100, 101, 99, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 100, 101, 98, 117, 103, 95, 99, 111, 100, 101, 99, 40, 41, 32, 101, 110, 100, 41, 10]);
Module['FS_createDataFile']('/', 'zencode_debug.lua', fileData14, true, true, false);
var fileData15 = [];
fileData15.push.apply(fileData15, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 32, 84, 79, 68, 79, 58, 32, 117, 115, 101, 32, 115, 116, 114, 105, 99, 116, 32, 116, 97, 98, 108, 101, 10, 45, 45, 32, 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 101, 118, 101, 100, 111, 110, 111, 118, 97, 110, 46, 103, 105, 116, 104, 117, 98, 46, 105, 111, 47, 80, 101, 110, 108, 105, 103, 104, 116, 47, 97, 112, 105, 47, 108, 105, 98, 114, 97, 114, 105, 101, 115, 47, 112, 108, 46, 115, 116, 114, 105, 99, 116, 46, 104, 116, 109, 108, 10, 10, 45, 45, 32, 116, 104, 101, 32, 109, 97, 105, 110, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 99, 111, 110, 99, 101, 114, 110, 32, 105, 110, 32, 116, 104, 105, 115, 32, 90, 101, 110, 99, 111, 100, 101, 32, 109, 111, 100, 117, 108, 101, 32, 105, 115, 32, 116, 104, 97, 116, 32, 110, 111, 32, 100, 97, 116, 97, 10, 45, 45, 32, 112, 97, 115, 115, 101, 115, 32, 119, 105, 116, 104, 111, 117, 116, 32, 118, 97, 108, 105, 100, 97, 116, 105, 111, 110, 32, 102, 114, 111, 109, 32, 73, 78, 32, 116, 111, 32, 65, 67, 75, 32, 111, 114, 32, 102, 114, 111, 109, 32, 105, 110, 108, 105, 110, 101, 32, 105, 110, 112, 117, 116, 46, 10, 10, 45, 45, 32, 71, 73, 86, 69, 78, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 99, 40, 41, 10, 32, 32, 32, 84, 77, 80, 32, 61, 32, 123, 32, 125, 10, 32, 32, 32, 99, 111, 108, 108, 101, 99, 116, 103, 97, 114, 98, 97, 103, 101, 39, 99, 111, 108, 108, 101, 99, 116, 39, 10, 101, 110, 100, 10, 10, 45, 45, 45, 10, 45, 45, 32, 80, 105, 99, 107, 32, 97, 32, 103, 101, 110, 101, 114, 105, 99, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 60, 98, 62, 73, 78, 60, 47, 98, 62, 32, 109, 101, 109, 111, 114, 121, 10, 45, 45, 32, 115, 112, 97, 99, 101, 46, 32, 76, 111, 111, 107, 115, 32, 102, 111, 114, 32, 110, 97, 109, 101, 100, 32, 100, 97, 116, 97, 32, 111, 110, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 97, 110, 100, 32, 115, 101, 99, 111, 110, 100, 32, 108, 101, 118, 101, 108, 32, 97, 110, 100, 32, 109, 97, 107, 101, 115, 10, 45, 45, 32, 105, 116, 32, 114, 101, 97, 100, 121, 32, 105, 110, 32, 84, 77, 80, 32, 102, 111, 114, 32, 64, 123, 118, 97, 108, 105, 100, 97, 116, 101, 125, 32, 111, 114, 32, 64, 123, 97, 99, 107, 125, 46, 10, 45, 45, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 105, 99, 107, 40, 110, 97, 109, 101, 44, 32, 100, 97, 116, 97, 44, 32, 101, 110, 99, 111, 100, 105, 110, 103, 41, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 119, 104, 97, 116, 32, 115, 116, 114, 105, 110, 103, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 32, 111, 102, 32, 116, 104, 101, 32, 100, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 99, 111, 110, 118, 91, 111, 112, 116, 93, 32, 111, 112, 116, 105, 111, 110, 97, 108, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 115, 112, 101, 99, 32, 40, 100, 101, 102, 97, 117, 108, 116, 32, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 41, 10, 45, 45, 32, 64, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 32, 111, 114, 32, 102, 97, 108, 115, 101, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 105, 99, 107, 40, 119, 104, 97, 116, 44, 32, 99, 111, 110, 118, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 103, 117, 101, 115, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 97, 116, 97, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 97, 119, 10, 32, 32, 32, 114, 97, 119, 32, 61, 32, 73, 78, 46, 75, 69, 89, 83, 91, 119, 104, 97, 116, 93, 32, 111, 114, 32, 73, 78, 91, 119, 104, 97, 116, 93, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 114, 97, 119, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 102, 105, 110, 100, 32, 39, 34, 46, 46, 119, 104, 97, 116, 46, 46, 34, 39, 32, 97, 110, 121, 119, 104, 101, 114, 101, 34, 41, 10, 32, 32, 32, 45, 45, 32, 105, 102, 32, 110, 111, 116, 32, 99, 111, 110, 118, 32, 97, 110, 100, 32, 90, 69, 78, 46, 115, 99, 104, 101, 109, 97, 115, 91, 119, 104, 97, 116, 93, 32, 116, 104, 101, 110, 32, 99, 111, 110, 118, 32, 61, 32, 119, 104, 97, 116, 32, 101, 110, 100, 10, 32, 32, 32, 84, 77, 80, 32, 61, 32, 103, 117, 101, 115, 115, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 114, 97, 119, 44, 32, 99, 111, 110, 118, 32, 111, 114, 32, 119, 104, 97, 116, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 84, 77, 80, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 103, 117, 101, 115, 115, 32, 97, 110, 121, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 111, 114, 58, 32, 34, 46, 46, 10, 9, 9, 9, 9, 32, 108, 117, 97, 116, 121, 112, 101, 40, 114, 97, 119, 41, 46, 46, 34, 32, 34, 46, 46, 40, 99, 111, 110, 118, 32, 111, 114, 32, 119, 104, 97, 116, 32, 111, 114, 32, 34, 40, 110, 105, 108, 41, 34, 41, 41, 10, 32, 32, 32, 84, 77, 80, 46, 110, 97, 109, 101, 32, 61, 32, 119, 104, 97, 116, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 79, 75, 41, 10, 32, 32, 32, 105, 102, 32, 68, 69, 66, 85, 71, 32, 62, 32, 49, 32, 116, 104, 101, 110, 32, 90, 69, 78, 58, 102, 116, 114, 97, 99, 101, 40, 34, 112, 105, 99, 107, 32, 102, 111, 117, 110, 100, 32, 34, 46, 46, 119, 104, 97, 116, 41, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 45, 45, 45, 10, 45, 45, 32, 80, 105, 99, 107, 32, 97, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 32, 110, 97, 109, 101, 100, 32, 39, 119, 104, 97, 116, 39, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 117, 110, 100, 101, 114, 32, 97, 32, 39, 115, 101, 99, 116, 105, 111, 110, 39, 32, 107, 101, 121, 10, 45, 45, 32, 111, 102, 32, 116, 104, 101, 32, 97, 116, 32, 116, 104, 101, 32, 114, 111, 111, 116, 32, 111, 102, 32, 116, 104, 101, 32, 60, 98, 62, 73, 78, 60, 47, 98, 62, 32, 109, 101, 109, 111, 114, 121, 32, 115, 112, 97, 99, 101, 46, 32, 76, 111, 111, 107, 115, 32, 102, 111, 114, 32, 110, 97, 109, 101, 100, 10, 45, 45, 32, 100, 97, 116, 97, 32, 97, 116, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 97, 110, 100, 32, 115, 101, 99, 111, 110, 100, 32, 108, 101, 118, 101, 108, 32, 117, 110, 100, 101, 114, 110, 101, 97, 116, 104, 32, 73, 78, 91, 115, 101, 99, 116, 105, 111, 110, 93, 32, 97, 110, 100, 32, 109, 111, 118, 101, 115, 10, 45, 45, 32, 105, 116, 32, 116, 111, 32, 84, 77, 80, 91, 119, 104, 97, 116, 93, 91, 115, 101, 99, 116, 105, 111, 110, 93, 44, 32, 114, 101, 97, 100, 121, 32, 102, 111, 114, 32, 64, 123, 118, 97, 108, 105, 100, 97, 116, 101, 125, 32, 111, 114, 32, 64, 123, 97, 99, 107, 125, 46, 32, 73, 102, 10, 45, 45, 32, 84, 77, 80, 91, 119, 104, 97, 116, 93, 32, 101, 120, 105, 115, 116, 115, 32, 97, 108, 114, 101, 97, 100, 121, 44, 32, 101, 118, 101, 114, 121, 32, 110, 101, 119, 32, 101, 110, 116, 114, 121, 32, 105, 115, 32, 97, 100, 100, 101, 100, 32, 97, 115, 32, 97, 32, 107, 101, 121, 47, 118, 97, 108, 117, 101, 10, 45, 45, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 105, 99, 107, 105, 110, 40, 115, 101, 99, 116, 105, 111, 110, 44, 32, 110, 97, 109, 101, 41, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 115, 101, 99, 116, 105, 111, 110, 32, 115, 116, 114, 105, 110, 103, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 32, 111, 102, 32, 116, 104, 101, 32, 115, 101, 99, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 116, 104, 101, 32, 100, 97, 116, 97, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 119, 104, 97, 116, 32, 115, 116, 114, 105, 110, 103, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 32, 111, 102, 32, 116, 104, 101, 32, 100, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 99, 111, 110, 118, 32, 115, 116, 114, 105, 110, 103, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 111, 114, 32, 115, 99, 104, 101, 109, 97, 32, 116, 111, 32, 117, 115, 101, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 102, 97, 105, 108, 32, 98, 111, 111, 108, 32, 98, 97, 105, 108, 32, 111, 117, 116, 32, 111, 114, 32, 99, 111, 110, 116, 105, 110, 117, 101, 32, 111, 110, 32, 101, 114, 114, 111, 114, 10, 45, 45, 32, 64, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 32, 111, 114, 32, 102, 97, 108, 115, 101, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 105, 99, 107, 105, 110, 40, 115, 101, 99, 116, 105, 111, 110, 44, 32, 119, 104, 97, 116, 44, 32, 99, 111, 110, 118, 44, 32, 102, 97, 105, 108, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 101, 99, 116, 105, 111, 110, 44, 32, 34, 78, 111, 32, 115, 101, 99, 116, 105, 111, 110, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 34, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 111, 111, 116, 32, 45, 45, 32, 115, 101, 99, 116, 105, 111, 110, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 97, 119, 32, 45, 45, 32, 100, 97, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 98, 97, 105, 108, 32, 45, 45, 32, 102, 97, 105, 108, 10, 32, 32, 32, 114, 111, 111, 116, 32, 61, 32, 73, 78, 46, 75, 69, 89, 83, 91, 115, 101, 99, 116, 105, 111, 110, 93, 10, 32, 32, 32, 105, 102, 32, 114, 111, 111, 116, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 97, 119, 32, 61, 32, 114, 111, 111, 116, 91, 119, 104, 97, 116, 93, 10, 9, 32, 32, 105, 102, 32, 114, 97, 119, 32, 116, 104, 101, 110, 32, 103, 111, 116, 111, 32, 102, 111, 117, 110, 100, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 111, 111, 116, 32, 61, 32, 73, 78, 91, 115, 101, 99, 116, 105, 111, 110, 93, 10, 32, 32, 32, 105, 102, 32, 114, 111, 111, 116, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 97, 119, 32, 61, 32, 114, 111, 111, 116, 91, 119, 104, 97, 116, 93, 10, 9, 32, 32, 105, 102, 32, 114, 97, 119, 32, 116, 104, 101, 110, 32, 103, 111, 116, 111, 32, 102, 111, 117, 110, 100, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 114, 97, 119, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 102, 105, 110, 100, 32, 39, 34, 46, 46, 119, 104, 97, 116, 46, 46, 34, 39, 32, 105, 110, 115, 105, 100, 101, 32, 39, 34, 46, 46, 115, 101, 99, 116, 105, 111, 110, 46, 46, 34, 39, 34, 41, 10, 32, 32, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 99, 104, 101, 99, 107, 32, 97, 108, 108, 32, 99, 111, 114, 110, 101, 114, 32, 99, 97, 115, 101, 115, 32, 116, 111, 32, 109, 97, 107, 101, 32, 115, 117, 114, 101, 32, 84, 77, 80, 91, 119, 104, 97, 116, 93, 32, 105, 115, 32, 97, 32, 107, 47, 118, 32, 109, 97, 112, 10, 32, 32, 32, 58, 58, 102, 111, 117, 110, 100, 58, 58, 10, 32, 32, 32, 45, 45, 32, 99, 111, 110, 118, 32, 61, 32, 99, 111, 110, 118, 32, 111, 114, 32, 119, 104, 97, 116, 10, 32, 32, 32, 45, 45, 32, 105, 102, 32, 110, 111, 116, 32, 99, 111, 110, 118, 32, 97, 110, 100, 32, 90, 69, 78, 46, 115, 99, 104, 101, 109, 97, 115, 91, 119, 104, 97, 116, 93, 32, 116, 104, 101, 110, 32, 99, 111, 110, 118, 32, 61, 32, 119, 104, 97, 116, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 105, 102, 32, 110, 111, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 116, 104, 101, 110, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 105, 115, 32, 115, 97, 109, 101, 32, 97, 115, 32, 110, 97, 109, 101, 32, 40, 115, 99, 104, 101, 109, 97, 115, 32, 101, 116, 99, 46, 41, 10, 32, 32, 32, 84, 77, 80, 32, 61, 32, 103, 117, 101, 115, 115, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 114, 97, 119, 44, 32, 99, 111, 110, 118, 32, 111, 114, 32, 119, 104, 97, 116, 32, 41, 10, 32, 32, 32, 84, 77, 80, 46, 110, 97, 109, 101, 32, 61, 32, 119, 104, 97, 116, 10, 32, 32, 32, 84, 77, 80, 46, 114, 111, 111, 116, 32, 61, 32, 115, 101, 99, 116, 105, 111, 110, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 79, 75, 41, 10, 32, 32, 32, 105, 102, 32, 68, 69, 66, 85, 71, 32, 62, 32, 49, 32, 116, 104, 101, 110, 32, 90, 69, 78, 58, 102, 116, 114, 97, 99, 101, 40, 34, 112, 105, 99, 107, 105, 110, 32, 102, 111, 117, 110, 100, 32, 34, 46, 46, 119, 104, 97, 116, 46, 46, 34, 32, 105, 110, 32, 34, 46, 46, 115, 101, 99, 116, 105, 111, 110, 41, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 99, 107, 95, 116, 97, 98, 108, 101, 40, 107, 101, 121, 44, 118, 97, 108, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 107, 101, 121, 41, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 44, 34, 90, 69, 78, 58, 116, 97, 98, 108, 101, 95, 97, 100, 100, 32, 97, 114, 103, 32, 35, 49, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 105, 110, 103, 34, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 118, 97, 108, 41, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 44, 34, 90, 69, 78, 58, 116, 97, 98, 108, 101, 95, 97, 100, 100, 32, 97, 114, 103, 32, 35, 50, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 105, 110, 103, 34, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 65, 67, 75, 91, 107, 101, 121, 93, 32, 116, 104, 101, 110, 32, 65, 67, 75, 91, 107, 101, 121, 93, 32, 61, 32, 123, 32, 125, 32, 101, 110, 100, 10, 32, 32, 32, 65, 67, 75, 91, 107, 101, 121, 93, 91, 118, 97, 108, 93, 32, 61, 32, 111, 112, 101, 114, 97, 116, 101, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 84, 77, 80, 41, 10, 101, 110, 100, 10, 10, 10, 45, 45, 45, 10, 45, 45, 32, 70, 105, 110, 97, 108, 32, 115, 116, 101, 112, 32, 105, 110, 115, 105, 100, 101, 32, 116, 104, 101, 32, 60, 98, 62, 71, 105, 118, 101, 110, 60, 47, 98, 62, 32, 98, 108, 111, 99, 107, 32, 116, 111, 119, 97, 114, 100, 115, 32, 116, 104, 101, 32, 60, 98, 62, 87, 104, 101, 110, 60, 47, 98, 62, 58, 10, 45, 45, 32, 112, 97, 115, 115, 32, 111, 110, 32, 97, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 65, 67, 75, 32, 109, 101, 109, 111, 114, 121, 32, 115, 112, 97, 99, 101, 44, 32, 114, 101, 97, 100, 121, 32, 102, 111, 114, 10, 45, 45, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 46, 32, 32, 73, 116, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 116, 104, 101, 32, 100, 97, 116, 97, 32, 116, 111, 32, 98, 101, 32, 112, 114, 101, 115, 101, 110, 116, 32, 105, 110, 32, 84, 77, 80, 91, 110, 97, 109, 101, 93, 32, 97, 110, 100, 10, 45, 45, 32, 116, 121, 112, 105, 99, 97, 108, 108, 121, 32, 102, 111, 108, 108, 111, 119, 115, 32, 97, 32, 64, 123, 112, 105, 99, 107, 125, 46, 32, 73, 110, 32, 115, 111, 109, 101, 32, 114, 101, 115, 116, 114, 105, 99, 116, 101, 100, 32, 99, 97, 115, 101, 115, 32, 105, 116, 32, 105, 115, 32, 117, 115, 101, 100, 10, 45, 45, 32, 105, 110, 115, 105, 100, 101, 32, 97, 32, 60, 98, 62, 87, 104, 101, 110, 60, 47, 98, 62, 32, 98, 108, 111, 99, 107, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 116, 104, 101, 32, 105, 110, 108, 105, 110, 101, 32, 105, 110, 115, 101, 114, 116, 105, 111, 110, 32, 111, 102, 32, 100, 97, 116, 97, 10, 45, 45, 32, 102, 114, 111, 109, 32, 122, 101, 110, 99, 111, 100, 101, 46, 10, 45, 45, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 99, 107, 40, 110, 97, 109, 101, 41, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 110, 97, 109, 101, 32, 115, 116, 114, 105, 110, 103, 32, 107, 101, 121, 32, 111, 102, 32, 116, 104, 101, 32, 100, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 32, 105, 110, 32, 84, 77, 80, 91, 110, 97, 109, 101, 93, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 99, 107, 40, 110, 97, 109, 101, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 84, 77, 80, 44, 32, 34, 78, 111, 32, 118, 97, 108, 105, 100, 32, 111, 98, 106, 101, 99, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 32, 110, 97, 109, 101, 41, 10, 32, 32, 32, 45, 45, 32, 67, 79, 68, 69, 67, 91, 119, 104, 97, 116, 93, 32, 61, 32, 67, 79, 68, 69, 67, 91, 119, 104, 97, 116, 93, 32, 111, 114, 32, 123, 10, 32, 32, 32, 45, 45, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 103, 117, 101, 115, 115, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 45, 45, 32, 32, 32, 32, 105, 115, 116, 97, 98, 108, 101, 32, 61, 32, 103, 117, 101, 115, 115, 46, 105, 115, 116, 97, 98, 108, 101, 44, 10, 32, 32, 32, 45, 45, 32, 32, 32, 32, 105, 115, 115, 99, 104, 101, 109, 97, 32, 61, 32, 103, 117, 101, 115, 115, 46, 105, 115, 115, 99, 104, 101, 109, 97, 32, 125, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 91, 110, 97, 109, 101, 93, 44, 32, 34, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 44, 32, 99, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 58, 32, 34, 46, 46, 110, 97, 109, 101, 44, 32, 50, 41, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 79, 75, 41, 10, 32, 32, 32, 65, 67, 75, 91, 110, 97, 109, 101, 93, 32, 61, 32, 111, 112, 101, 114, 97, 116, 101, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 84, 77, 80, 41, 10, 32, 32, 32, 45, 45, 32, 115, 97, 118, 101, 32, 99, 111, 100, 101, 99, 32, 115, 116, 97, 116, 101, 10, 32, 32, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 110, 97, 109, 101, 93, 32, 61, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 84, 77, 80, 46, 110, 97, 109, 101, 44, 10, 9, 9, 9, 9, 9, 32, 32, 32, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 84, 77, 80, 46, 108, 117, 97, 116, 121, 112, 101, 44, 10, 9, 9, 9, 9, 9, 32, 32, 32, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 84, 77, 80, 46, 122, 101, 110, 116, 121, 112, 101, 44, 10, 9, 9, 9, 9, 9, 32, 32, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 84, 77, 80, 46, 101, 110, 99, 111, 100, 105, 110, 103, 44, 10, 9, 9, 9, 9, 9, 32, 32, 32, 114, 111, 111, 116, 32, 61, 32, 84, 77, 80, 46, 114, 111, 111, 116, 32, 125, 10, 32, 32, 32, 45, 45, 32, 65, 67, 75, 91, 110, 97, 109, 101, 93, 32, 97, 108, 114, 101, 97, 100, 121, 32, 104, 111, 108, 100, 115, 32, 97, 110, 32, 111, 98, 106, 101, 99, 116, 10, 32, 32, 32, 45, 45, 32, 110, 111, 116, 32, 97, 32, 116, 97, 98, 108, 101, 63, 10, 32, 32, 32, 45, 45, 32, 105, 102, 32, 110, 111, 116, 32, 40, 100, 115, 116, 116, 121, 112, 101, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 41, 32, 116, 104, 101, 110, 32, 45, 45, 32, 99, 111, 110, 118, 101, 114, 116, 32, 115, 105, 110, 103, 108, 101, 32, 111, 98, 106, 101, 99, 116, 32, 116, 111, 32, 97, 114, 114, 97, 121, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 65, 67, 75, 91, 110, 97, 109, 101, 93, 32, 61, 32, 123, 32, 65, 67, 75, 91, 110, 97, 109, 101, 93, 32, 125, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 91, 110, 97, 109, 101, 93, 44, 32, 111, 112, 101, 114, 97, 116, 101, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 84, 77, 80, 41, 41, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 103, 111, 116, 111, 32, 100, 111, 110, 101, 10, 32, 32, 32, 45, 45, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 45, 45, 32, 105, 116, 32, 105, 115, 32, 97, 32, 116, 97, 98, 108, 101, 32, 97, 108, 114, 101, 97, 100, 121, 10, 32, 32, 32, 45, 45, 32, 105, 102, 32, 105, 115, 97, 114, 114, 97, 121, 40, 65, 67, 75, 91, 110, 97, 109, 101, 93, 41, 32, 116, 104, 101, 110, 32, 45, 45, 32, 112, 108, 97, 105, 110, 32, 97, 114, 114, 97, 121, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 91, 110, 97, 109, 101, 93, 44, 32, 111, 112, 101, 114, 97, 116, 101, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 84, 77, 80, 41, 41, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 103, 111, 116, 111, 32, 100, 111, 110, 101, 10, 32, 32, 32, 45, 45, 32, 101, 108, 115, 101, 32, 45, 45, 32, 97, 115, 115, 111, 99, 105, 97, 116, 105, 118, 101, 32, 109, 97, 112, 32, 40, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 41, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 91, 110, 97, 109, 101, 93, 44, 32, 111, 112, 101, 114, 97, 116, 101, 95, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 40, 84, 77, 80, 41, 41, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 97, 115, 115, 111, 99, 105, 97, 116, 105, 118, 101, 32, 109, 97, 112, 32, 105, 110, 115, 101, 114, 116, 105, 111, 110, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 103, 111, 116, 111, 32, 100, 111, 110, 101, 10, 32, 32, 32, 45, 45, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 58, 58, 100, 111, 110, 101, 58, 58, 10, 32, 32, 32, 45, 45, 32, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 79, 75, 41, 10, 101, 110, 100, 10, 10, 71, 105, 118, 101, 110, 40, 34, 110, 111, 116, 104, 105, 110, 103, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 68, 65, 84, 65, 32, 97, 110, 100, 32, 110, 111, 116, 32, 75, 69, 89, 83, 44, 32, 34, 85, 110, 100, 101, 115, 105, 114, 101, 100, 32, 100, 97, 116, 97, 32, 112, 97, 115, 115, 101, 100, 32, 97, 115, 32, 105, 110, 112, 117, 116, 34, 41, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 109, 97, 121, 98, 101, 32, 84, 79, 68, 79, 58, 32, 71, 105, 118, 101, 110, 32, 97, 108, 108, 32, 118, 97, 108, 105, 100, 32, 100, 97, 116, 97, 10, 45, 45, 32, 99, 111, 110, 118, 101, 114, 116, 32, 97, 110, 100, 32, 105, 109, 112, 111, 114, 116, 32, 100, 97, 116, 97, 32, 111, 110, 108, 121, 32, 119, 104, 101, 110, 32, 105, 115, 32, 107, 110, 111, 119, 110, 32, 98, 121, 32, 115, 99, 104, 101, 109, 97, 32, 97, 110, 100, 32, 112, 97, 115, 115, 101, 115, 32, 118, 97, 108, 105, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 105, 103, 110, 111, 114, 101, 32, 97, 108, 108, 32, 111, 116, 104, 101, 114, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 115, 32, 116, 104, 97, 116, 32, 97, 114, 101, 32, 110, 111, 116, 32, 107, 110, 111, 119, 110, 32, 98, 121, 32, 115, 99, 104, 101, 109, 97, 32, 111, 114, 32, 100, 111, 110, 39, 116, 32, 112, 97, 115, 115, 32, 118, 97, 108, 105, 100, 97, 116, 105, 111, 110, 10, 10, 71, 105, 118, 101, 110, 40, 34, 97, 109, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 97, 109, 101, 41, 32, 73, 97, 109, 40, 110, 97, 109, 101, 41, 32, 101, 110, 100, 41, 10, 10, 45, 45, 32, 118, 97, 114, 105, 97, 98, 108, 101, 32, 110, 97, 109, 101, 115, 58, 10, 45, 45, 32, 115, 32, 61, 32, 115, 99, 104, 101, 109, 97, 32, 111, 102, 32, 118, 97, 114, 105, 97, 98, 108, 101, 32, 40, 111, 114, 32, 101, 110, 99, 111, 100, 105, 110, 103, 41, 10, 45, 45, 32, 110, 32, 61, 32, 110, 97, 109, 101, 32, 111, 102, 32, 118, 97, 114, 105, 97, 98, 108, 101, 10, 45, 45, 32, 116, 32, 61, 32, 116, 97, 98, 108, 101, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 116, 104, 101, 32, 118, 97, 114, 105, 97, 98, 108, 101, 10, 10, 45, 45, 32, 84, 79, 68, 79, 58, 32, 73, 32, 104, 97, 118, 101, 32, 97, 32, 39, 39, 32, 97, 115, 32, 39, 39, 10, 71, 105, 118, 101, 110, 40, 34, 104, 97, 118, 101, 32, 97, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 41, 10, 9, 9, 32, 112, 105, 99, 107, 40, 110, 41, 10, 9, 9, 32, 97, 99, 107, 40, 110, 41, 10, 9, 9, 32, 103, 99, 40, 41, 10, 101, 110, 100, 41, 10, 10, 71, 105, 118, 101, 110, 40, 34, 104, 97, 118, 101, 32, 97, 32, 39, 39, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 44, 32, 116, 41, 10, 9, 9, 32, 112, 105, 99, 107, 105, 110, 40, 116, 44, 32, 115, 41, 10, 9, 9, 32, 97, 99, 107, 40, 115, 41, 32, 45, 45, 32, 115, 97, 118, 101, 32, 105, 116, 32, 105, 110, 32, 65, 67, 75, 46, 111, 98, 106, 10, 9, 9, 32, 103, 99, 40, 41, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 112, 117, 98, 108, 105, 99, 32, 107, 101, 121, 115, 32, 102, 111, 114, 32, 107, 101, 121, 114, 105, 110, 103, 32, 97, 114, 114, 97, 121, 115, 32, 40, 115, 99, 101, 110, 97, 114, 105, 111, 32, 101, 99, 100, 104, 41, 10, 45, 45, 32, 115, 117, 112, 112, 111, 114, 116, 115, 32, 98, 111, 116, 32, 119, 97, 121, 115, 32, 105, 110, 32, 102, 114, 111, 109, 32, 103, 105, 118, 101, 110, 10, 45, 45, 32, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 32, 58, 32, 123, 32, 110, 97, 109, 101, 32, 58, 32, 118, 97, 108, 117, 101, 32, 125, 10, 45, 45, 32, 111, 114, 10, 45, 45, 32, 110, 97, 109, 101, 32, 58, 32, 123, 32, 112, 117, 98, 108, 105, 99, 95, 107, 101, 121, 32, 58, 32, 118, 97, 108, 117, 101, 32, 125, 10, 71, 105, 118, 101, 110, 40, 34, 104, 97, 118, 101, 32, 97, 32, 39, 39, 32, 102, 114, 111, 109, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 44, 32, 116, 41, 10, 9, 9, 32, 45, 45, 32, 105, 102, 32, 110, 111, 116, 32, 112, 105, 99, 107, 105, 110, 40, 116, 44, 32, 115, 44, 32, 110, 105, 108, 44, 32, 102, 97, 108, 115, 101, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 45, 45, 32, 9, 112, 105, 99, 107, 105, 110, 40, 115, 44, 32, 116, 41, 10, 9, 9, 32, 45, 45, 32, 101, 110, 100, 10, 9, 9, 32, 112, 105, 99, 107, 105, 110, 40, 116, 44, 32, 115, 44, 32, 110, 105, 108, 44, 32, 102, 97, 108, 115, 101, 41, 10, 9, 9, 32, 97, 99, 107, 95, 116, 97, 98, 108, 101, 40, 115, 44, 32, 116, 41, 10, 9, 9, 32, 103, 99, 40, 41, 10, 101, 110, 100, 41, 10, 10, 71, 105, 118, 101, 110, 40, 34, 104, 97, 118, 101, 32, 97, 32, 39, 39, 32, 110, 97, 109, 101, 100, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 44, 32, 110, 41, 10, 9, 9, 32, 45, 45, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 101, 110, 99, 111, 100, 101, 114, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 105, 110, 112, 117, 116, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 102, 111, 114, 32, 39, 34, 46, 46, 110, 46, 46, 34, 39, 58, 32, 34, 46, 46, 115, 41, 10, 9, 9, 32, 112, 105, 99, 107, 40, 110, 44, 32, 115, 41, 10, 9, 9, 32, 97, 99, 107, 40, 110, 41, 10, 9, 9, 32, 103, 99, 40, 41, 10, 101, 110, 100, 41, 10, 10, 71, 105, 118, 101, 110, 40, 34, 104, 97, 118, 101, 32, 97, 32, 39, 39, 32, 110, 97, 109, 101, 100, 32, 39, 39, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 44, 110, 44, 116, 41, 10, 9, 9, 32, 112, 105, 99, 107, 105, 110, 40, 116, 44, 32, 110, 44, 32, 115, 41, 10, 9, 9, 32, 97, 99, 107, 40, 110, 41, 32, 45, 45, 32, 115, 97, 118, 101, 32, 105, 116, 32, 105, 110, 32, 65, 67, 75, 46, 110, 97, 109, 101, 10, 9, 9, 32, 103, 99, 40, 41, 10, 101, 110, 100, 41, 10, 10, 71, 105, 118, 101, 110, 40, 34, 104, 97, 118, 101, 32, 109, 121, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 41, 10, 9, 9, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 87, 72, 79, 44, 32, 34, 78, 111, 32, 105, 100, 101, 110, 116, 105, 116, 121, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 44, 32, 117, 115, 101, 58, 32, 71, 105, 118, 101, 110, 32, 73, 32, 97, 109, 32, 46, 46, 46, 34, 41, 10, 9, 9, 32, 112, 105, 99, 107, 105, 110, 40, 87, 72, 79, 44, 32, 110, 41, 10, 9, 9, 32, 97, 99, 107, 40, 110, 41, 10, 9, 9, 32, 103, 99, 40, 41, 10, 101, 110, 100, 41, 10, 71, 105, 118, 101, 110, 40, 34, 104, 97, 118, 101, 32, 109, 121, 32, 39, 39, 32, 110, 97, 109, 101, 100, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 44, 32, 110, 41, 10, 9, 9, 32, 45, 45, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 101, 110, 99, 111, 100, 101, 114, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 105, 110, 112, 117, 116, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 102, 111, 114, 32, 39, 34, 46, 46, 110, 46, 46, 34, 39, 58, 32, 34, 46, 46, 115, 41, 10, 9, 9, 32, 112, 105, 99, 107, 105, 110, 40, 87, 72, 79, 44, 32, 110, 44, 32, 115, 41, 10, 9, 9, 32, 97, 99, 107, 40, 110, 41, 10, 9, 9, 32, 103, 99, 40, 41, 10, 101, 110, 100, 41, 10, 71, 105, 118, 101, 110, 40, 34, 116, 104, 101, 32, 39, 39, 32, 105, 115, 32, 118, 97, 108, 105, 100, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 41, 10, 9, 9, 32, 112, 105, 99, 107, 40, 110, 41, 10, 9, 9, 32, 103, 99, 40, 41, 10, 101, 110, 100, 41, 10, 71, 105, 118, 101, 110, 40, 34, 109, 121, 32, 39, 39, 32, 105, 115, 32, 118, 97, 108, 105, 100, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 41, 10, 9, 9, 32, 112, 105, 99, 107, 105, 110, 40, 87, 72, 79, 44, 32, 110, 41, 10, 9, 9, 32, 103, 99, 40, 41, 10, 101, 110, 100, 41, 10]);
Module['FS_createDataFile']('/', 'zencode_given.lua', fileData15, true, true, false);
var fileData16 = [];
fileData16.push.apply(fileData16, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 108, 111, 99, 97, 108, 32, 101, 99, 100, 104, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 39, 101, 99, 100, 104, 39, 10, 10, 114, 101, 116, 117, 114, 110, 32, 101, 99, 100, 104, 10]);
Module['FS_createDataFile']('/', 'zenroom_ecdh.lua', fileData16, true, true, false);
var fileData17 = [];
fileData17.push.apply(fileData17, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 32, 105, 110, 105, 116, 32, 115, 99, 114, 105, 112, 116, 32, 101, 109, 98, 101, 100, 100, 101, 100, 32, 97, 116, 32, 99, 111, 109, 112, 105, 108, 101, 32, 116, 105, 109, 101, 46, 32, 32, 101, 120, 101, 99, 117, 116, 101, 100, 32, 105, 110, 10, 45, 45, 32, 122, 101, 110, 95, 108, 111, 97, 100, 95, 101, 120, 116, 101, 110, 115, 105, 111, 110, 115, 40, 76, 41, 32, 117, 115, 117, 97, 108, 108, 121, 32, 97, 102, 116, 101, 114, 32, 122, 101, 110, 95, 105, 110, 105, 116, 40, 41, 10, 10, 45, 45, 32, 45, 45, 32, 114, 101, 109, 97, 112, 32, 102, 97, 116, 97, 108, 32, 97, 110, 100, 32, 101, 114, 114, 111, 114, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 102, 97, 116, 97, 108, 40, 109, 115, 103, 41, 10, 9, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 109, 115, 103, 41, 32, 61, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 32, 116, 104, 101, 110, 32, 119, 97, 114, 110, 40, 116, 114, 105, 109, 40, 109, 115, 103, 41, 44, 50, 41, 32, 101, 110, 100, 10, 9, 32, 32, 100, 101, 98, 117, 103, 46, 116, 114, 97, 99, 101, 98, 97, 99, 107, 40, 41, 10, 45, 45, 9, 32, 32, 105, 102, 32, 90, 69, 78, 95, 116, 114, 97, 99, 101, 98, 97, 99, 107, 32, 126, 61, 32, 34, 34, 32, 116, 104, 101, 110, 32, 90, 69, 78, 58, 100, 101, 98, 117, 103, 40, 41, 32, 101, 110, 100, 10, 9, 32, 32, 105, 102, 32, 68, 69, 66, 85, 71, 32, 62, 32, 49, 32, 116, 104, 101, 110, 10, 9, 9, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 90, 69, 78, 58, 98, 97, 99, 107, 116, 114, 97, 99, 101, 40, 41, 32, 97, 110, 100, 32, 116, 114, 97, 99, 101, 98, 97, 99, 107, 32, 97, 115, 32, 115, 111, 114, 116, 101, 100, 32, 97, 114, 114, 97, 121, 10, 9, 9, 32, 119, 97, 114, 110, 40, 90, 69, 78, 95, 116, 114, 97, 99, 101, 98, 97, 99, 107, 41, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 105, 102, 32, 68, 69, 66, 85, 71, 32, 62, 32, 50, 32, 116, 104, 101, 110, 10, 9, 9, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 90, 69, 78, 58, 100, 117, 109, 112, 40, 41, 10, 9, 9, 32, 73, 46, 119, 97, 114, 110, 40, 123, 32, 72, 69, 65, 80, 32, 61, 32, 123, 32, 73, 78, 32, 61, 32, 73, 78, 44, 10, 9, 9, 9, 9, 9, 9, 32, 32, 32, 84, 77, 80, 32, 61, 32, 84, 77, 80, 44, 10, 9, 9, 9, 9, 9, 9, 32, 32, 32, 65, 67, 75, 32, 61, 32, 65, 67, 75, 44, 10, 9, 9, 9, 9, 9, 9, 32, 32, 32, 79, 85, 84, 32, 61, 32, 79, 85, 84, 32, 125, 125, 41, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 90, 69, 78, 58, 100, 101, 98, 117, 103, 40, 41, 10, 9, 32, 32, 109, 115, 103, 32, 61, 32, 109, 115, 103, 32, 111, 114, 32, 34, 102, 97, 116, 97, 108, 32, 101, 114, 114, 111, 114, 34, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 109, 115, 103, 44, 50, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 103, 108, 111, 98, 97, 108, 10, 95, 71, 91, 34, 82, 69, 81, 85, 73, 82, 69, 68, 34, 93, 32, 61, 32, 123, 32, 125, 10, 45, 45, 32, 97, 118, 111, 105, 100, 32, 100, 117, 112, 108, 105, 99, 97, 116, 105, 110, 103, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 40, 105, 110, 116, 101, 114, 110, 97, 108, 32, 105, 110, 99, 108, 117, 100, 101, 115, 41, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 101, 113, 117, 105, 114, 101, 95, 111, 110, 99, 101, 40, 110, 105, 110, 99, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 108, 97, 115, 115, 32, 61, 32, 82, 69, 81, 85, 73, 82, 69, 68, 91, 110, 105, 110, 99, 93, 10, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 99, 108, 97, 115, 115, 41, 32, 61, 61, 32, 34, 116, 97, 98, 108, 101, 34, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 99, 108, 97, 115, 115, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 110, 101, 119, 32, 114, 101, 113, 117, 105, 114, 101, 10, 99, 108, 97, 115, 115, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 110, 105, 110, 99, 41, 10, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 99, 108, 97, 115, 115, 41, 32, 61, 61, 32, 34, 116, 97, 98, 108, 101, 34, 32, 116, 104, 101, 110, 32, 82, 69, 81, 85, 73, 82, 69, 68, 91, 110, 105, 110, 99, 93, 32, 61, 32, 99, 108, 97, 115, 115, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 99, 108, 97, 115, 115, 10, 101, 110, 100, 10, 10, 45, 45, 32, 101, 114, 114, 111, 114, 32, 61, 32, 122, 101, 110, 95, 101, 114, 114, 111, 114, 32, 45, 45, 32, 102, 114, 111, 109, 32, 122, 101, 110, 95, 105, 111, 10, 10, 45, 45, 32, 90, 69, 78, 32, 61, 32, 123, 32, 97, 115, 115, 101, 114, 116, 32, 61, 32, 97, 115, 115, 101, 114, 116, 32, 125, 32, 45, 45, 32, 122, 101, 110, 99, 111, 100, 101, 32, 115, 104, 105, 109, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 108, 111, 97, 100, 101, 100, 10, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 99, 111, 109, 109, 111, 110, 39, 41, 10, 73, 78, 83, 80, 69, 67, 84, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 105, 110, 115, 112, 101, 99, 116, 39, 41, 10, 67, 66, 79, 82, 32, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 99, 98, 111, 114, 39, 41, 10, 74, 83, 79, 78, 32, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 106, 115, 111, 110, 39, 41, 10, 79, 67, 84, 69, 84, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 111, 99, 116, 101, 116, 39, 41, 10, 69, 67, 68, 72, 32, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 101, 99, 100, 104, 39, 41, 10, 65, 69, 83, 32, 32, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 97, 101, 115, 39, 41, 10, 66, 73, 71, 32, 32, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 98, 105, 103, 39, 41, 10, 69, 67, 80, 32, 32, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 101, 99, 112, 39, 41, 10, 69, 67, 80, 50, 32, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 101, 99, 112, 50, 39, 41, 10, 72, 65, 83, 72, 32, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 104, 97, 115, 104, 39, 41, 10, 66, 69, 78, 67, 72, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 98, 101, 110, 99, 104, 39, 41, 10, 77, 65, 67, 72, 73, 78, 69, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 115, 116, 97, 116, 101, 109, 97, 99, 104, 105, 110, 101, 39, 41, 10, 10, 79, 32, 32, 32, 61, 32, 79, 67, 84, 69, 84, 32, 32, 45, 45, 32, 97, 108, 105, 97, 115, 10, 73, 78, 84, 32, 61, 32, 66, 73, 71, 32, 32, 32, 32, 45, 45, 32, 97, 108, 105, 97, 115, 10, 72, 32, 32, 32, 61, 32, 72, 65, 83, 72, 32, 32, 32, 45, 45, 32, 97, 108, 105, 97, 115, 10, 73, 32, 32, 32, 61, 32, 73, 78, 83, 80, 69, 67, 84, 32, 45, 45, 32, 97, 108, 105, 97, 115, 10, 80, 65, 73, 82, 32, 61, 32, 69, 67, 80, 50, 32, 32, 45, 45, 32, 97, 108, 105, 97, 115, 10, 80, 65, 73, 82, 46, 97, 116, 101, 32, 61, 32, 69, 67, 80, 50, 46, 109, 105, 108, 108, 101, 114, 32, 45, 45, 97, 108, 105, 97, 115, 10, 86, 32, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 115, 101, 109, 118, 101, 114, 39, 41, 10, 86, 69, 82, 83, 73, 79, 78, 32, 61, 32, 86, 40, 86, 69, 82, 83, 73, 79, 78, 41, 10, 10, 90, 69, 78, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 99, 111, 100, 101, 39, 41, 10, 45, 45, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 122, 101, 110, 99, 111, 100, 101, 95, 97, 115, 116, 32, 105, 110, 116, 101, 114, 110, 97, 108, 108, 121, 32, 97, 102, 116, 101, 114, 32, 104, 97, 118, 105, 110, 103, 32, 99, 114, 101, 97, 116, 101, 100, 10, 45, 45, 32, 116, 104, 101, 32, 103, 108, 111, 98, 97, 108, 32, 90, 69, 78, 32, 99, 111, 110, 116, 101, 120, 116, 10, 10, 45, 45, 32, 98, 97, 115, 101, 32, 122, 101, 110, 99, 111, 100, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 97, 110, 100, 32, 115, 99, 104, 101, 109, 97, 115, 10, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 99, 111, 100, 101, 95, 100, 97, 116, 97, 39, 41, 32, 45, 45, 32, 112, 105, 99, 107, 47, 105, 110, 44, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 115, 32, 101, 116, 99, 46, 10, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 99, 111, 100, 101, 95, 103, 105, 118, 101, 110, 39, 41, 10, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 99, 111, 100, 101, 95, 119, 104, 101, 110, 39, 41, 10, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 99, 111, 100, 101, 95, 104, 97, 115, 104, 39, 41, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 119, 104, 101, 110, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 10, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 99, 111, 100, 101, 95, 97, 114, 114, 97, 121, 39, 41, 32, 32, 32, 32, 32, 32, 45, 45, 32, 119, 104, 101, 110, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 10, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 99, 111, 100, 101, 95, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 39, 41, 32, 45, 45, 32, 119, 104, 101, 110, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 10, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 99, 111, 100, 101, 95, 116, 104, 101, 110, 39, 41, 10, 45, 45, 32, 116, 104, 105, 115, 32, 105, 115, 32, 116, 111, 32, 101, 118, 97, 108, 117, 97, 116, 101, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 115, 32, 111, 114, 32, 100, 101, 114, 105, 118, 97, 116, 101, 32, 97, 32, 99, 111, 108, 117, 109, 110, 10, 45, 45, 32, 105, 116, 32, 119, 111, 117, 108, 100, 32, 101, 120, 101, 99, 117, 116, 101, 32, 108, 117, 97, 32, 99, 111, 100, 101, 32, 105, 110, 115, 105, 100, 101, 32, 116, 104, 101, 32, 122, 101, 110, 99, 111, 100, 101, 32, 97, 110, 100, 32, 105, 115, 10, 45, 45, 32, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 100, 97, 110, 103, 101, 114, 111, 117, 115, 44, 32, 115, 119, 105, 116, 99, 104, 101, 100, 32, 111, 102, 102, 32, 98, 121, 32, 100, 101, 102, 97, 117, 108, 116, 32, 10, 45, 45, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 99, 111, 100, 101, 95, 101, 118, 97, 108, 39, 41, 10, 105, 102, 32, 68, 69, 66, 85, 71, 32, 62, 32, 48, 32, 116, 104, 101, 110, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 99, 111, 100, 101, 95, 100, 101, 98, 117, 103, 39, 41, 32, 101, 110, 100, 10, 10, 45, 45, 32, 115, 99, 101, 110, 97, 114, 105, 111, 32, 97, 114, 101, 32, 108, 111, 97, 100, 101, 100, 32, 111, 110, 45, 100, 101, 109, 97, 110, 100, 10, 45, 45, 32, 115, 99, 101, 110, 97, 114, 105, 111, 115, 32, 99, 97, 110, 32, 111, 110, 108, 121, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 32, 34, 87, 104, 101, 110, 32, 46, 46, 46, 34, 32, 115, 116, 101, 112, 115, 10, 95, 71, 91, 34, 71, 105, 118, 101, 110, 34, 93, 32, 61, 32, 110, 105, 108, 10, 95, 71, 91, 34, 84, 104, 101, 110, 34, 93, 32, 32, 61, 32, 110, 105, 108, 10, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 45, 45, 32, 100, 101, 102, 97, 117, 108, 116, 115, 10, 95, 71, 91, 34, 67, 79, 78, 70, 34, 93, 32, 61, 32, 123, 10, 32, 32, 32, 45, 45, 32, 103, 111, 108, 100, 105, 108, 111, 99, 107, 115, 32, 105, 115, 32, 111, 117, 114, 32, 102, 97, 118, 111, 114, 105, 116, 101, 32, 69, 67, 68, 72, 47, 68, 83, 65, 32, 99, 117, 114, 118, 101, 10, 32, 32, 32, 45, 45, 32, 111, 116, 104, 101, 114, 32, 99, 104, 111, 105, 99, 101, 115, 32, 104, 101, 114, 101, 32, 105, 110, 99, 108, 117, 100, 101, 32, 115, 101, 99, 112, 50, 53, 54, 107, 49, 32, 111, 114, 32, 101, 100, 50, 53, 53, 49, 57, 32, 111, 114, 32, 98, 108, 115, 51, 56, 51, 10, 32, 32, 32, 45, 45, 32, 98, 101, 119, 97, 114, 101, 32, 116, 104, 105, 115, 32, 99, 104, 111, 105, 99, 101, 32, 97, 102, 102, 101, 99, 116, 115, 32, 111, 110, 108, 121, 32, 116, 104, 101, 32, 69, 67, 68, 72, 32, 111, 98, 106, 101, 99, 116, 10, 32, 32, 32, 45, 45, 32, 97, 110, 100, 32, 69, 67, 68, 72, 32, 112, 117, 98, 108, 105, 99, 32, 107, 101, 121, 115, 32, 99, 97, 110, 110, 111, 116, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 115, 32, 69, 67, 80, 10, 32, 32, 32, 45, 45, 32, 98, 101, 99, 97, 117, 115, 101, 32, 111, 102, 32, 73, 65, 78, 65, 32, 55, 51, 48, 51, 10, 32, 32, 32, 118, 101, 114, 98, 111, 115, 105, 116, 121, 32, 61, 32, 49, 44, 10, 32, 32, 32, 105, 110, 112, 117, 116, 32, 61, 32, 123, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 105, 110, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 39, 98, 97, 115, 101, 54, 52, 39, 41, 44, 10, 9, 9, 9, 32, 102, 111, 114, 109, 97, 116, 32, 61, 32, 103, 101, 116, 95, 102, 111, 114, 109, 97, 116, 40, 39, 106, 115, 111, 110, 39, 41, 44, 10, 9, 9, 9, 32, 116, 97, 103, 103, 101, 100, 32, 61, 32, 102, 97, 108, 115, 101, 32, 125, 44, 10, 32, 32, 32, 111, 117, 116, 112, 117, 116, 32, 61, 32, 123, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 111, 117, 116, 112, 117, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 39, 98, 97, 115, 101, 54, 52, 39, 41, 44, 10, 9, 9, 9, 32, 32, 102, 111, 114, 109, 97, 116, 32, 61, 32, 103, 101, 116, 95, 102, 111, 114, 109, 97, 116, 40, 39, 106, 115, 111, 110, 39, 41, 44, 10, 9, 9, 9, 32, 32, 118, 101, 114, 115, 105, 111, 110, 105, 110, 103, 32, 61, 32, 102, 97, 108, 115, 101, 32, 125, 44, 10, 32, 32, 32, 112, 97, 114, 115, 101, 114, 32, 61, 32, 123, 32, 115, 116, 114, 105, 99, 116, 95, 109, 97, 116, 99, 104, 32, 61, 32, 116, 114, 117, 101, 32, 125, 44, 10, 32, 32, 32, 104, 97, 115, 104, 32, 61, 32, 39, 115, 104, 97, 50, 53, 54, 39, 44, 10, 32, 32, 32, 104, 101, 97, 112, 103, 117, 97, 114, 100, 32, 61, 32, 116, 114, 117, 101, 10, 125, 10, 10, 45, 45, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 98, 97, 115, 101, 54, 52, 117, 114, 108, 32, 40, 82, 70, 67, 52, 54, 52, 56, 41, 32, 105, 115, 32, 116, 104, 101, 32, 102, 97, 115, 116, 101, 115, 116, 32, 97, 110, 100, 32, 109, 111, 115, 116, 32, 112, 111, 114, 116, 97, 98, 108, 101, 32, 105, 110, 32, 122, 101, 110, 114, 111, 111, 109, 10, 45, 45, 32, 115, 101, 116, 95, 101, 110, 99, 111, 100, 105, 110, 103, 40, 39, 117, 114, 108, 54, 52, 39, 41, 10, 45, 45, 32, 115, 101, 116, 95, 102, 111, 114, 109, 97, 116, 40, 39, 106, 115, 111, 110, 39, 41, 10, 10, 99, 111, 108, 108, 101, 99, 116, 103, 97, 114, 98, 97, 103, 101, 39, 99, 111, 108, 108, 101, 99, 116, 39, 10]);
Module['FS_createDataFile']('/', 'init.lua', fileData17, true, true, false);
var fileData18 = [];
fileData18.push.apply(fileData18, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 45, 32, 84, 72, 69, 78, 10, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 107, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 118, 97, 108, 32, 61, 32, 65, 67, 75, 91, 107, 93, 10, 9, 9, 105, 102, 32, 118, 97, 108, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 32, 99, 104, 101, 99, 107, 95, 99, 111, 100, 101, 99, 40, 107, 41, 32, 41, 10, 9, 9, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 97, 108, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 107, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 118, 97, 108, 41, 10, 9, 9, 32, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 107, 93, 32, 61, 32, 102, 117, 110, 40, 118, 97, 108, 41, 10, 9, 9, 32, 32, 32, 101, 110, 100, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 79, 85, 84, 46, 111, 117, 116, 112, 117, 116, 32, 116, 104, 101, 110, 32, 79, 85, 84, 46, 111, 117, 116, 112, 117, 116, 32, 61, 32, 123, 32, 125, 32, 101, 110, 100, 10, 9, 9, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 79, 85, 84, 46, 111, 117, 116, 112, 117, 116, 44, 107, 41, 32, 45, 45, 32, 114, 97, 119, 32, 115, 116, 114, 105, 110, 103, 32, 118, 97, 108, 117, 101, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 39, 39, 32, 97, 115, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 44, 115, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 115, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 118, 97, 108, 32, 61, 32, 65, 67, 75, 91, 118, 93, 10, 9, 9, 105, 102, 32, 118, 97, 108, 32, 116, 104, 101, 110, 10, 9, 9, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 97, 108, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 79, 85, 84, 91, 118, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 118, 97, 108, 41, 10, 9, 9, 9, 101, 108, 115, 101, 10, 9, 9, 9, 9, 79, 85, 84, 91, 118, 93, 32, 61, 32, 102, 117, 110, 40, 118, 97, 108, 41, 10, 9, 9, 9, 101, 110, 100, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 79, 85, 84, 46, 111, 117, 116, 112, 117, 116, 32, 61, 32, 102, 117, 110, 40, 118, 41, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 39, 39, 32, 97, 115, 32, 39, 39, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 44, 115, 44, 107, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 115, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 118, 97, 108, 32, 61, 32, 65, 67, 75, 91, 118, 93, 10, 9, 9, 105, 102, 32, 118, 97, 108, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 97, 108, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 107, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 118, 97, 108, 41, 10, 9, 9, 32, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 107, 93, 32, 61, 32, 102, 117, 110, 40, 118, 97, 108, 41, 10, 9, 9, 32, 32, 32, 101, 110, 100, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 107, 93, 32, 61, 32, 102, 117, 110, 40, 118, 41, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 100, 97, 116, 97, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 10, 9, 9, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 65, 67, 75, 41, 32, 100, 111, 10, 9, 9, 32, 32, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 32, 99, 104, 101, 99, 107, 95, 99, 111, 100, 101, 99, 40, 107, 41, 32, 41, 10, 9, 9, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 107, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 118, 41, 10, 9, 9, 32, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 107, 93, 32, 61, 32, 102, 117, 110, 40, 118, 41, 10, 9, 9, 32, 32, 32, 101, 110, 100, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 100, 97, 116, 97, 32, 97, 115, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 10, 9, 9, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 65, 67, 75, 41, 32, 100, 111, 10, 9, 9, 32, 32, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 32, 101, 32, 41, 10, 9, 9, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 107, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 118, 41, 10, 9, 9, 32, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 107, 93, 32, 61, 32, 102, 117, 110, 40, 118, 41, 10, 9, 9, 32, 32, 32, 101, 110, 100, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 109, 121, 32, 100, 97, 116, 97, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 73, 97, 109, 40, 41, 32, 45, 45, 32, 115, 97, 110, 105, 116, 121, 32, 99, 104, 101, 99, 107, 115, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 10, 9, 9, 79, 85, 84, 91, 87, 72, 79, 93, 32, 61, 32, 123, 32, 125, 10, 9, 9, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 65, 67, 75, 41, 32, 100, 111, 10, 9, 9, 32, 32, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 32, 99, 104, 101, 99, 107, 95, 99, 111, 100, 101, 99, 40, 107, 41, 32, 41, 10, 9, 9, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 87, 72, 79, 93, 91, 107, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 118, 41, 10, 9, 9, 32, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 87, 72, 79, 93, 91, 107, 93, 32, 61, 32, 102, 117, 110, 40, 118, 41, 10, 9, 9, 32, 32, 32, 101, 110, 100, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 109, 121, 32, 100, 97, 116, 97, 32, 97, 115, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 41, 10, 9, 9, 73, 97, 109, 40, 41, 32, 45, 45, 32, 115, 97, 110, 105, 116, 121, 32, 99, 104, 101, 99, 107, 115, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 10, 9, 9, 79, 85, 84, 91, 87, 72, 79, 93, 32, 61, 32, 123, 32, 125, 10, 9, 9, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 65, 67, 75, 41, 32, 100, 111, 10, 9, 9, 32, 32, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 32, 115, 32, 41, 10, 9, 9, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 87, 72, 79, 93, 91, 107, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 118, 41, 10, 9, 9, 32, 32, 32, 101, 108, 115, 101, 10, 9, 9, 9, 32, 32, 79, 85, 84, 91, 87, 72, 79, 93, 91, 107, 93, 32, 61, 32, 102, 117, 110, 40, 118, 41, 10, 9, 9, 32, 32, 32, 101, 110, 100, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 32, 99, 104, 101, 99, 107, 101, 100, 32, 117, 110, 116, 105, 108, 32, 104, 101, 114, 101, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 109, 121, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 9, 9, 73, 97, 109, 40, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 111, 98, 106, 93, 44, 32, 34, 68, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 111, 98, 106, 41, 10, 9, 9, 105, 102, 32, 110, 111, 116, 32, 79, 85, 84, 91, 87, 72, 79, 93, 32, 116, 104, 101, 110, 32, 79, 85, 84, 91, 87, 72, 79, 93, 32, 61, 32, 123, 32, 125, 32, 101, 110, 100, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 32, 99, 104, 101, 99, 107, 95, 99, 111, 100, 101, 99, 40, 111, 98, 106, 41, 32, 41, 10, 9, 9, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 32, 61, 32, 65, 67, 75, 91, 111, 98, 106, 93, 10, 9, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 32, 61, 32, 102, 117, 110, 40, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 41, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 109, 121, 32, 39, 39, 32, 102, 114, 111, 109, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 44, 32, 115, 101, 99, 116, 105, 111, 110, 41, 10, 9, 9, 73, 97, 109, 40, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 101, 99, 116, 105, 111, 110, 93, 44, 32, 34, 83, 101, 99, 116, 105, 111, 110, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 101, 99, 116, 105, 111, 110, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 103, 111, 116, 10, 9, 9, 103, 111, 116, 32, 61, 32, 65, 67, 75, 91, 115, 101, 99, 116, 105, 111, 110, 93, 91, 111, 98, 106, 93, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 103, 111, 116, 44, 32, 34, 68, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 111, 98, 106, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 32, 99, 104, 101, 99, 107, 95, 99, 111, 100, 101, 99, 40, 111, 98, 106, 41, 32, 41, 10, 9, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 103, 111, 116, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 103, 111, 116, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 103, 111, 116, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 103, 111, 116, 32, 32, 61, 32, 102, 117, 110, 40, 103, 111, 116, 41, 10, 9, 9, 101, 110, 100, 10, 9, 9, 105, 102, 32, 110, 111, 116, 32, 79, 85, 84, 91, 87, 72, 79, 93, 32, 116, 104, 101, 110, 32, 79, 85, 84, 91, 87, 72, 79, 93, 32, 61, 32, 123, 32, 125, 32, 101, 110, 100, 10, 9, 9, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 32, 61, 32, 103, 111, 116, 10, 101, 110, 100, 41, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 109, 121, 32, 39, 39, 32, 97, 115, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 44, 99, 111, 110, 118, 41, 10, 9, 9, 73, 97, 109, 40, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 111, 98, 106, 93, 44, 32, 34, 77, 121, 32, 100, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 111, 98, 106, 41, 10, 9, 9, 105, 102, 32, 110, 111, 116, 32, 79, 85, 84, 91, 87, 72, 79, 93, 32, 116, 104, 101, 110, 32, 79, 85, 84, 91, 87, 72, 79, 93, 32, 61, 32, 123, 32, 125, 32, 101, 110, 100, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 99, 111, 110, 118, 41, 10, 9, 9, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 32, 61, 32, 65, 67, 75, 91, 111, 98, 106, 93, 10, 9, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 32, 61, 32, 102, 117, 110, 40, 79, 85, 84, 91, 87, 72, 79, 93, 91, 111, 98, 106, 93, 41, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 116, 104, 101, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 107, 101, 121, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 107, 101, 121, 93, 44, 32, 34, 68, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 107, 101, 121, 41, 10, 9, 9, 105, 102, 32, 110, 111, 116, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 116, 104, 101, 110, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 123, 32, 125, 32, 101, 110, 100, 10, 9, 9, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 65, 67, 75, 91, 107, 101, 121, 93, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 32, 99, 104, 101, 99, 107, 95, 99, 111, 100, 101, 99, 40, 107, 101, 121, 41, 32, 41, 10, 9, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 79, 85, 84, 91, 107, 101, 121, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 79, 85, 84, 91, 107, 101, 121, 93, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 102, 117, 110, 40, 79, 85, 84, 91, 107, 101, 121, 93, 41, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 116, 104, 101, 32, 39, 39, 32, 97, 115, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 107, 101, 121, 44, 32, 99, 111, 110, 118, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 107, 101, 121, 93, 44, 32, 34, 68, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 107, 101, 121, 41, 10, 9, 9, 105, 102, 32, 110, 111, 116, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 116, 104, 101, 110, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 123, 32, 125, 32, 101, 110, 100, 10, 9, 9, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 65, 67, 75, 91, 107, 101, 121, 93, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 99, 111, 110, 118, 41, 10, 9, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 79, 85, 84, 91, 107, 101, 121, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 79, 85, 84, 91, 107, 101, 121, 93, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 102, 117, 110, 40, 79, 85, 84, 91, 107, 101, 121, 93, 41, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 116, 104, 101, 32, 39, 39, 32, 97, 115, 32, 39, 39, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 107, 101, 121, 44, 32, 99, 111, 110, 118, 44, 32, 115, 101, 99, 116, 105, 111, 110, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 101, 99, 116, 105, 111, 110, 93, 91, 107, 101, 121, 93, 44, 32, 34, 68, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 107, 101, 121, 46, 46, 34, 32, 105, 110, 115, 105, 100, 101, 32, 34, 46, 46, 115, 101, 99, 116, 105, 111, 110, 41, 10, 9, 9, 105, 102, 32, 110, 111, 116, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 116, 104, 101, 110, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 123, 32, 125, 32, 101, 110, 100, 10, 9, 9, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 65, 67, 75, 91, 115, 101, 99, 116, 105, 111, 110, 93, 91, 107, 101, 121, 93, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 99, 111, 110, 118, 41, 10, 9, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 79, 85, 84, 91, 107, 101, 121, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 79, 85, 84, 91, 107, 101, 121, 93, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 102, 117, 110, 40, 79, 85, 84, 91, 107, 101, 121, 93, 41, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 84, 104, 101, 110, 40, 34, 112, 114, 105, 110, 116, 32, 116, 104, 101, 32, 39, 39, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 107, 101, 121, 44, 32, 115, 101, 99, 116, 105, 111, 110, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 115, 101, 99, 116, 105, 111, 110, 93, 91, 107, 101, 121, 93, 44, 32, 34, 68, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 107, 101, 121, 46, 46, 34, 32, 105, 110, 115, 105, 100, 101, 32, 34, 46, 46, 115, 101, 99, 116, 105, 111, 110, 41, 10, 9, 9, 105, 102, 32, 110, 111, 116, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 116, 104, 101, 110, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 123, 32, 125, 32, 101, 110, 100, 10, 9, 9, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 65, 67, 75, 91, 115, 101, 99, 116, 105, 111, 110, 93, 91, 107, 101, 121, 93, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 32, 99, 104, 101, 99, 107, 95, 99, 111, 100, 101, 99, 40, 115, 101, 99, 116, 105, 111, 110, 41, 32, 41, 10, 9, 9, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 79, 85, 84, 91, 107, 101, 121, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 79, 85, 84, 91, 107, 101, 121, 93, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 79, 85, 84, 91, 107, 101, 121, 93, 32, 61, 32, 102, 117, 110, 40, 79, 85, 84, 91, 107, 101, 121, 93, 41, 10, 9, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10]);
Module['FS_createDataFile']('/', 'zencode_then.lua', fileData18, true, true, false);
var fileData19 = [];
fileData19.push.apply(fileData19, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 108, 111, 99, 97, 108, 32, 97, 101, 115, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 39, 97, 101, 115, 39, 10, 114, 101, 116, 117, 114, 110, 32, 97, 101, 115, 10]);
Module['FS_createDataFile']('/', 'zenroom_aes.lua', fileData19, true, true, false);
var fileData20 = [];
fileData20.push.apply(fileData20, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 67, 111, 99, 111, 110, 117, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 98, 121, 32, 65, 108, 98, 101, 114, 116, 111, 32, 83, 111, 110, 110, 105, 110, 111, 32, 97, 110, 100, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 10, 45, 45, 32, 67, 111, 99, 111, 110, 117, 116, 32, 105, 115, 32, 97, 32, 115, 101, 108, 101, 99, 116, 105, 118, 101, 32, 100, 105, 115, 99, 108, 111, 115, 117, 114, 101, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 115, 99, 104, 101, 109, 101, 32, 102, 111, 114, 32, 65, 116, 116, 114, 105, 98, 117, 116, 101, 10, 45, 45, 32, 66, 97, 115, 101, 100, 32, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 32, 40, 65, 66, 67, 41, 32, 115, 117, 112, 112, 111, 114, 116, 105, 110, 103, 32, 112, 117, 98, 108, 105, 99, 32, 97, 110, 100, 32, 112, 114, 105, 118, 97, 116, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 44, 10, 45, 45, 32, 114, 101, 45, 114, 97, 110, 100, 111, 109, 105, 122, 97, 116, 105, 111, 110, 44, 32, 97, 110, 100, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 117, 110, 108, 105, 110, 107, 97, 98, 108, 101, 32, 115, 101, 108, 101, 99, 116, 105, 118, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 10, 45, 45, 32, 114, 101, 118, 101, 108, 97, 116, 105, 111, 110, 115, 46, 32, 70, 111, 114, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 97, 98, 111, 117, 116, 32, 117, 115, 97, 103, 101, 32, 115, 101, 101, 10, 45, 45, 32, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 32, 97, 110, 100, 32, 104, 116, 116, 112, 115, 58, 47, 47, 100, 101, 99, 111, 100, 101, 112, 114, 111, 106, 101, 99, 116, 46, 101, 117, 10, 69, 67, 80, 32, 32, 32, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 95, 111, 110, 99, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 101, 99, 112, 39, 41, 10, 69, 67, 80, 50, 32, 32, 32, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 95, 111, 110, 99, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 101, 99, 112, 50, 39, 41, 10, 10, 108, 111, 99, 97, 108, 32, 99, 111, 99, 111, 32, 61, 32, 123, 10, 32, 32, 32, 95, 86, 69, 82, 83, 73, 79, 78, 32, 61, 32, 39, 99, 114, 121, 112, 116, 111, 95, 99, 111, 99, 111, 110, 117, 116, 46, 108, 117, 97, 32, 49, 46, 49, 39, 44, 10, 32, 32, 32, 95, 85, 82, 76, 32, 61, 32, 39, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 39, 44, 10, 32, 32, 32, 95, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 32, 61, 32, 39, 65, 116, 116, 114, 105, 98, 117, 116, 101, 45, 98, 97, 115, 101, 100, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 115, 121, 115, 116, 101, 109, 32, 115, 117, 112, 112, 111, 114, 116, 105, 110, 103, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 117, 110, 108, 105, 110, 107, 97, 98, 108, 101, 32, 112, 114, 105, 118, 97, 116, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 114, 101, 118, 101, 108, 97, 116, 105, 111, 110, 115, 39, 44, 10, 32, 32, 32, 95, 76, 73, 67, 69, 78, 83, 69, 32, 61, 32, 91, 91, 10, 76, 105, 99, 101, 110, 115, 101, 100, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 10, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 59, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 10, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 32, 32, 85, 110, 108, 101, 115, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 98, 121, 32, 97, 112, 112, 108, 105, 99, 97, 98, 108, 101, 10, 108, 97, 119, 32, 111, 114, 32, 97, 103, 114, 101, 101, 100, 32, 116, 111, 32, 105, 110, 32, 119, 114, 105, 116, 105, 110, 103, 44, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 76, 105, 99, 101, 110, 115, 101, 10, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 111, 110, 32, 97, 110, 32, 34, 65, 83, 32, 73, 83, 34, 32, 66, 65, 83, 73, 83, 44, 32, 87, 73, 84, 72, 79, 85, 84, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 79, 82, 10, 67, 79, 78, 68, 73, 84, 73, 79, 78, 83, 32, 79, 70, 32, 65, 78, 89, 32, 75, 73, 78, 68, 44, 32, 101, 105, 116, 104, 101, 114, 32, 101, 120, 112, 114, 101, 115, 115, 32, 111, 114, 32, 105, 109, 112, 108, 105, 101, 100, 46, 10, 93, 93, 10, 125, 10, 10, 108, 111, 99, 97, 108, 32, 71, 49, 32, 61, 32, 69, 67, 80, 46, 103, 101, 110, 101, 114, 97, 116, 111, 114, 40, 41, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 118, 97, 108, 117, 101, 10, 108, 111, 99, 97, 108, 32, 71, 50, 32, 61, 32, 69, 67, 80, 50, 46, 103, 101, 110, 101, 114, 97, 116, 111, 114, 40, 41, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 118, 97, 108, 117, 101, 10, 108, 111, 99, 97, 108, 32, 79, 32, 32, 61, 32, 69, 67, 80, 46, 111, 114, 100, 101, 114, 40, 41, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 118, 97, 108, 117, 101, 10, 10, 45, 45, 32, 115, 116, 97, 116, 101, 102, 117, 108, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 104, 97, 114, 100, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 10, 108, 111, 99, 97, 108, 32, 104, 115, 32, 61, 32, 69, 67, 80, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 40, 115, 116, 114, 40, 91, 91, 10, 68, 101, 118, 101, 108, 111, 112, 101, 100, 32, 102, 111, 114, 32, 116, 104, 101, 32, 68, 69, 67, 79, 68, 69, 32, 112, 114, 111, 106, 101, 99, 116, 10, 93, 93, 32, 46, 46, 32, 99, 111, 99, 111, 46, 95, 76, 73, 67, 69, 78, 83, 69, 41, 41, 10, 108, 111, 99, 97, 108, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 61, 32, 71, 49, 58, 111, 99, 116, 101, 116, 40, 41, 32, 46, 46, 32, 71, 50, 58, 111, 99, 116, 101, 116, 40, 41, 32, 46, 46, 32, 104, 115, 58, 111, 99, 116, 101, 116, 40, 41, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 108, 105, 115, 116, 41, 10, 32, 32, 32, 45, 45, 32, 97, 115, 115, 101, 114, 116, 40, 99, 111, 99, 111, 46, 99, 104, 97, 108, 108, 101, 110, 103, 101, 44, 32, 34, 67, 79, 67, 79, 78, 85, 84, 32, 115, 101, 99, 114, 101, 116, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 110, 111, 116, 32, 115, 101, 116, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 73, 78, 84, 46, 110, 101, 119, 40, 32, 115, 104, 97, 50, 53, 54, 40, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 46, 46, 32, 79, 67, 84, 69, 84, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 108, 105, 115, 116, 41, 41, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 108, 111, 99, 97, 108, 32, 122, 101, 114, 111, 45, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 112, 114, 111, 111, 102, 32, 118, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 107, 101, 95, 112, 105, 95, 115, 40, 103, 97, 109, 109, 97, 44, 32, 99, 111, 109, 109, 105, 116, 44, 32, 107, 44, 32, 114, 44, 32, 109, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 107, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 109, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 71, 49, 32, 42, 32, 119, 107, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 103, 97, 109, 109, 97, 32, 42, 32, 119, 107, 32, 43, 32, 99, 111, 109, 109, 105, 116, 32, 42, 32, 119, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 71, 49, 32, 42, 32, 119, 114, 32, 43, 32, 104, 115, 32, 42, 32, 119, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 32, 61, 32, 99, 111, 99, 111, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 32, 99, 111, 109, 109, 105, 116, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 32, 125, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 107, 32, 61, 32, 119, 107, 32, 45, 32, 99, 32, 42, 32, 107, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 109, 32, 61, 32, 119, 109, 32, 45, 32, 99, 32, 42, 32, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 114, 32, 61, 32, 119, 114, 32, 45, 32, 99, 32, 42, 32, 114, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 76, 97, 109, 98, 100, 97, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 99, 32, 32, 61, 32, 99, 44, 10, 9, 9, 9, 114, 107, 32, 61, 32, 114, 107, 44, 10, 9, 9, 9, 114, 109, 32, 61, 32, 114, 109, 44, 10, 9, 9, 9, 114, 114, 32, 61, 32, 114, 114, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 118, 101, 114, 105, 102, 121, 95, 112, 105, 95, 115, 40, 108, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 108, 46, 99, 46, 97, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 99, 10, 9, 32, 32, 43, 32, 71, 49, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 114, 107, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 108, 46, 99, 46, 98, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 99, 10, 9, 32, 32, 43, 32, 108, 46, 112, 117, 98, 108, 105, 99, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 114, 107, 10, 9, 32, 32, 43, 32, 108, 46, 99, 111, 109, 109, 105, 116, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 114, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 108, 46, 99, 111, 109, 109, 105, 116, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 99, 10, 9, 32, 32, 43, 32, 71, 49, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 114, 114, 10, 9, 32, 32, 43, 32, 104, 115, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 114, 109, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 97, 32, 98, 111, 111, 108, 32, 102, 111, 114, 32, 97, 115, 115, 101, 114, 116, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 108, 46, 112, 105, 95, 115, 46, 99, 32, 61, 61, 32, 99, 111, 99, 111, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 32, 108, 46, 99, 111, 109, 109, 105, 116, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 32, 125, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 80, 117, 98, 108, 105, 99, 32, 67, 111, 99, 111, 110, 117, 116, 32, 65, 80, 73, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 99, 97, 95, 107, 101, 121, 103, 101, 110, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 120, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 107, 32, 61, 32, 123, 32, 120, 32, 61, 32, 120, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 121, 32, 61, 32, 121, 32, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 118, 107, 32, 61, 32, 123, 32, 97, 108, 112, 104, 97, 32, 61, 32, 71, 50, 32, 42, 32, 120, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 116, 97, 32, 32, 61, 32, 71, 50, 32, 42, 32, 121, 32, 32, 125, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 107, 101, 121, 112, 97, 105, 114, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 107, 44, 32, 118, 107, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 97, 103, 103, 114, 101, 103, 97, 116, 101, 95, 107, 101, 121, 115, 40, 107, 101, 121, 115, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 103, 103, 95, 97, 108, 112, 104, 97, 32, 61, 32, 107, 101, 121, 115, 91, 49, 93, 46, 97, 108, 112, 104, 97, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 103, 103, 95, 98, 101, 116, 97, 32, 32, 61, 32, 107, 101, 121, 115, 91, 49, 93, 46, 98, 101, 116, 97, 10, 32, 32, 32, 105, 102, 32, 35, 107, 101, 121, 115, 32, 62, 32, 49, 32, 116, 104, 101, 110, 10, 9, 32, 32, 102, 111, 114, 32, 105, 32, 61, 32, 50, 44, 32, 35, 107, 101, 121, 115, 32, 100, 111, 10, 9, 9, 32, 97, 103, 103, 95, 97, 108, 112, 104, 97, 32, 61, 32, 97, 103, 103, 95, 97, 108, 112, 104, 97, 32, 43, 32, 107, 101, 121, 115, 91, 105, 93, 46, 97, 108, 112, 104, 97, 10, 9, 9, 32, 97, 103, 103, 95, 98, 101, 116, 97, 32, 32, 61, 32, 97, 103, 103, 95, 98, 101, 116, 97, 32, 32, 43, 32, 107, 101, 121, 115, 91, 105, 93, 46, 98, 101, 116, 97, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 97, 103, 103, 107, 101, 121, 115, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 97, 108, 112, 104, 97, 32, 61, 32, 97, 103, 103, 95, 97, 108, 112, 104, 97, 44, 10, 9, 9, 9, 98, 101, 116, 97, 32, 61, 32, 97, 103, 103, 95, 98, 101, 116, 97, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 112, 114, 101, 112, 97, 114, 101, 95, 98, 108, 105, 110, 100, 95, 115, 105, 103, 110, 40, 103, 97, 109, 109, 97, 44, 32, 115, 101, 99, 114, 101, 116, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 32, 61, 32, 73, 78, 84, 46, 110, 101, 119, 40, 115, 104, 97, 50, 53, 54, 40, 115, 101, 99, 114, 101, 116, 41, 41, 10, 32, 32, 32, 45, 45, 32, 69, 108, 71, 97, 109, 97, 108, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 109, 109, 105, 116, 32, 61, 32, 71, 49, 32, 42, 32, 114, 32, 43, 32, 104, 115, 32, 42, 32, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 32, 61, 32, 123, 32, 97, 32, 61, 32, 71, 49, 32, 42, 32, 107, 44, 10, 9, 9, 9, 32, 32, 32, 98, 32, 61, 32, 103, 97, 109, 109, 97, 32, 42, 32, 107, 32, 43, 32, 99, 111, 109, 109, 105, 116, 32, 42, 32, 109, 32, 125, 10, 32, 32, 32, 45, 45, 32, 99, 97, 108, 99, 117, 108, 97, 116, 101, 32, 122, 101, 114, 111, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 112, 114, 111, 111, 102, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 105, 95, 115, 32, 61, 32, 109, 97, 107, 101, 95, 112, 105, 95, 115, 40, 103, 97, 109, 109, 97, 44, 32, 99, 111, 109, 109, 105, 116, 44, 32, 107, 44, 32, 114, 44, 32, 109, 41, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 76, 97, 109, 98, 100, 97, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 99, 111, 109, 109, 105, 116, 32, 61, 32, 99, 111, 109, 109, 105, 116, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 32, 32, 32, 32, 61, 32, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 105, 95, 115, 32, 61, 32, 112, 105, 95, 115, 44, 10, 9, 9, 9, 112, 117, 98, 108, 105, 99, 32, 61, 32, 103, 97, 109, 109, 97, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 98, 108, 105, 110, 100, 95, 115, 105, 103, 110, 40, 115, 107, 44, 32, 76, 97, 109, 98, 100, 97, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 99, 111, 99, 111, 46, 118, 101, 114, 105, 102, 121, 95, 112, 105, 95, 115, 40, 76, 97, 109, 98, 100, 97, 41, 44, 10, 9, 9, 9, 32, 32, 39, 90, 101, 114, 111, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 112, 114, 111, 111, 102, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 40, 76, 97, 109, 98, 100, 97, 46, 112, 105, 95, 115, 41, 39, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 104, 32, 61, 32, 76, 97, 109, 98, 100, 97, 46, 99, 111, 109, 109, 105, 116, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 95, 116, 105, 108, 100, 101, 32, 61, 32, 76, 97, 109, 98, 100, 97, 46, 99, 46, 97, 32, 42, 32, 115, 107, 46, 121, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 98, 95, 116, 105, 108, 100, 101, 32, 61, 32, 104, 32, 42, 32, 115, 107, 46, 120, 32, 43, 32, 76, 97, 109, 98, 100, 97, 46, 99, 46, 98, 32, 42, 32, 115, 107, 46, 121, 10, 32, 32, 32, 45, 45, 32, 115, 105, 103, 109, 97, 32, 116, 105, 108, 100, 101, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 104, 32, 61, 32, 104, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 95, 116, 105, 108, 100, 101, 32, 61, 32, 97, 95, 116, 105, 108, 100, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 95, 116, 105, 108, 100, 101, 32, 61, 32, 98, 95, 116, 105, 108, 100, 101, 32, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 97, 103, 103, 114, 101, 103, 97, 116, 101, 95, 99, 114, 101, 100, 115, 40, 115, 107, 44, 32, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 103, 103, 95, 115, 32, 61, 10, 9, 32, 32, 45, 45, 32, 69, 108, 71, 97, 109, 97, 108, 32, 118, 101, 114, 105, 102, 121, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 10, 9, 32, 32, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 91, 49, 93, 46, 98, 95, 116, 105, 108, 100, 101, 32, 45, 32, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 91, 49, 93, 46, 97, 95, 116, 105, 108, 100, 101, 32, 42, 32, 115, 107, 10, 10, 32, 32, 32, 105, 102, 32, 35, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 32, 62, 32, 49, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 105, 32, 61, 32, 50, 44, 32, 35, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 103, 103, 95, 115, 32, 61, 32, 97, 103, 103, 95, 115, 32, 43, 10, 9, 9, 9, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 91, 105, 93, 46, 98, 95, 116, 105, 108, 100, 101, 32, 45, 32, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 91, 105, 93, 46, 97, 95, 116, 105, 108, 100, 101, 32, 42, 32, 115, 107, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 100, 32, 115, 105, 103, 109, 97, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 104, 32, 61, 32, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 91, 49, 93, 46, 104, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 32, 61, 32, 97, 103, 103, 95, 115, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 112, 114, 111, 118, 101, 95, 99, 114, 101, 100, 115, 40, 118, 107, 44, 32, 115, 105, 103, 109, 97, 44, 32, 115, 101, 99, 114, 101, 116, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 118, 107, 32, 97, 110, 100, 32, 118, 107, 46, 97, 108, 112, 104, 97, 32, 97, 110, 100, 32, 118, 107, 46, 98, 101, 116, 97, 44, 32, 34, 67, 79, 67, 79, 78, 85, 84, 46, 112, 114, 111, 118, 101, 95, 99, 114, 101, 100, 115, 32, 99, 97, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 101, 109, 112, 116, 121, 32, 118, 101, 114, 105, 102, 105, 101, 114, 34, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 105, 103, 109, 97, 44, 32, 34, 67, 79, 67, 79, 78, 85, 84, 46, 112, 114, 111, 118, 101, 95, 99, 114, 101, 100, 115, 32, 99, 97, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 101, 109, 112, 116, 121, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 34, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 101, 99, 114, 101, 116, 44, 32, 34, 67, 79, 67, 79, 78, 85, 84, 46, 112, 114, 111, 118, 101, 95, 99, 114, 101, 100, 115, 32, 99, 97, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 101, 109, 112, 116, 121, 32, 115, 101, 99, 114, 101, 116, 34, 41, 10, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 32, 61, 32, 73, 78, 84, 46, 110, 101, 119, 40, 115, 104, 97, 50, 53, 54, 40, 115, 101, 99, 114, 101, 116, 41, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 95, 112, 114, 105, 109, 101, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 32, 61, 32, 123, 32, 104, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 46, 104, 32, 42, 32, 114, 95, 112, 114, 105, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 46, 115, 32, 42, 32, 114, 95, 112, 114, 105, 109, 101, 32, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 97, 112, 112, 97, 32, 61, 32, 118, 107, 46, 97, 108, 112, 104, 97, 32, 43, 32, 118, 107, 46, 98, 101, 116, 97, 32, 42, 32, 109, 32, 43, 32, 71, 50, 32, 42, 32, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 117, 32, 61, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 42, 32, 114, 10, 32, 32, 32, 45, 45, 32, 109, 97, 107, 101, 32, 112, 105, 95, 118, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 109, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 118, 107, 46, 97, 108, 112, 104, 97, 32, 43, 32, 71, 50, 32, 42, 32, 119, 114, 32, 43, 32, 118, 107, 46, 98, 101, 116, 97, 32, 42, 32, 119, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 42, 32, 119, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 104, 32, 61, 32, 99, 111, 99, 111, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 32, 118, 107, 46, 97, 108, 112, 104, 97, 44, 32, 118, 107, 46, 98, 101, 116, 97, 44, 32, 65, 119, 44, 32, 66, 119, 32, 125, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 105, 95, 118, 32, 61, 32, 123, 32, 99, 32, 61, 32, 99, 104, 44, 10, 9, 9, 9, 9, 32, 32, 114, 109, 32, 61, 32, 119, 109, 32, 45, 32, 109, 32, 42, 32, 99, 104, 44, 10, 9, 9, 9, 9, 32, 32, 114, 114, 32, 61, 32, 119, 114, 32, 45, 32, 114, 32, 42, 32, 99, 104, 32, 125, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 84, 104, 101, 116, 97, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 84, 104, 101, 116, 97, 32, 61, 32, 123, 10, 32, 32, 32, 32, 32, 32, 107, 97, 112, 112, 97, 32, 61, 32, 107, 97, 112, 112, 97, 44, 32, 45, 45, 32, 69, 67, 80, 50, 10, 32, 32, 32, 32, 32, 32, 110, 117, 32, 61, 32, 110, 117, 44, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 69, 67, 80, 10, 32, 32, 32, 32, 32, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 44, 32, 45, 45, 32, 69, 67, 80, 32, 116, 117, 112, 108, 101, 10, 32, 32, 32, 32, 32, 32, 112, 105, 95, 118, 32, 61, 32, 112, 105, 95, 118, 32, 125, 32, 45, 45, 32, 73, 78, 84, 115, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 84, 104, 101, 116, 97, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 115, 40, 118, 107, 44, 32, 84, 104, 101, 116, 97, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 118, 107, 44, 32, 34, 67, 79, 67, 79, 78, 85, 84, 46, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 115, 32, 99, 97, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 101, 109, 112, 116, 121, 32, 118, 101, 114, 105, 102, 105, 101, 114, 34, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 84, 104, 101, 116, 97, 44, 32, 34, 67, 79, 67, 79, 78, 85, 84, 46, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 115, 32, 118, 97, 108, 108, 101, 100, 32, 119, 105, 116, 104, 32, 101, 109, 112, 116, 121, 32, 112, 114, 111, 111, 102, 34, 41, 10, 32, 32, 32, 105, 102, 32, 35, 118, 107, 32, 61, 61, 32, 49, 32, 116, 104, 101, 110, 32, 118, 107, 32, 61, 32, 118, 107, 91, 49, 93, 32, 101, 110, 100, 32, 45, 45, 32, 115, 105, 110, 103, 108, 101, 32, 101, 108, 101, 109, 101, 110, 116, 32, 105, 110, 32, 97, 114, 114, 97, 121, 10, 32, 32, 32, 45, 45, 32, 118, 101, 114, 105, 102, 121, 32, 112, 105, 95, 118, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 84, 104, 101, 116, 97, 46, 107, 97, 112, 112, 97, 32, 42, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 10, 9, 32, 32, 43, 32, 71, 50, 32, 42, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 114, 10, 9, 32, 32, 43, 32, 118, 107, 46, 97, 108, 112, 104, 97, 32, 42, 32, 40, 73, 78, 84, 46, 110, 101, 119, 40, 49, 41, 32, 45, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 41, 10, 9, 32, 32, 43, 32, 118, 107, 46, 98, 101, 116, 97, 32, 42, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 84, 104, 101, 116, 97, 46, 110, 117, 32, 42, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 10, 9, 32, 32, 43, 32, 84, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 42, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 114, 10, 32, 32, 32, 45, 45, 32, 99, 104, 101, 99, 107, 32, 122, 101, 114, 111, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 112, 114, 111, 111, 102, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 32, 61, 61, 32, 99, 111, 99, 111, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 118, 107, 46, 97, 108, 112, 104, 97, 44, 32, 118, 107, 46, 98, 101, 116, 97, 44, 32, 65, 119, 44, 32, 66, 119, 125, 41, 44, 10, 9, 9, 9, 32, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 111, 111, 102, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 40, 119, 114, 111, 110, 103, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 41, 34, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 84, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 58, 105, 115, 105, 110, 102, 40, 41, 44, 10, 9, 9, 9, 32, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 111, 111, 102, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 40, 115, 105, 103, 109, 97, 46, 104, 32, 105, 115, 32, 105, 110, 102, 105, 110, 105, 116, 101, 41, 34, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 69, 67, 80, 50, 46, 109, 105, 108, 108, 101, 114, 40, 84, 104, 101, 116, 97, 46, 107, 97, 112, 112, 97, 44, 32, 84, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 41, 10, 9, 9, 9, 9, 32, 61, 61, 32, 69, 67, 80, 50, 46, 109, 105, 108, 108, 101, 114, 40, 71, 50, 44, 32, 84, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 115, 95, 112, 114, 105, 109, 101, 32, 43, 32, 84, 104, 101, 116, 97, 46, 110, 117, 41, 44, 10, 9, 9, 9, 32, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 111, 111, 102, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 40, 109, 105, 108, 108, 101, 114, 32, 108, 111, 111, 112, 32, 101, 114, 114, 111, 114, 41, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 101, 110, 100, 10, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 45, 45, 32, 112, 101, 116, 105, 116, 105, 111, 110, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 112, 114, 111, 118, 101, 95, 99, 114, 101, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 118, 107, 44, 32, 115, 105, 103, 109, 97, 44, 32, 115, 101, 99, 114, 101, 116, 44, 32, 117, 105, 100, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 32, 61, 32, 73, 78, 84, 46, 110, 101, 119, 40, 115, 104, 97, 50, 53, 54, 40, 115, 101, 99, 114, 101, 116, 41, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 45, 45, 32, 108, 111, 99, 97, 108, 32, 109, 32, 61, 32, 73, 78, 84, 46, 110, 101, 119, 40, 115, 104, 97, 50, 53, 54, 40, 115, 101, 99, 114, 101, 116, 41, 41, 10, 32, 32, 32, 45, 45, 32, 109, 97, 116, 101, 114, 105, 97, 108, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 95, 112, 114, 105, 109, 101, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 32, 61, 32, 123, 32, 104, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 46, 104, 32, 42, 32, 114, 95, 112, 114, 105, 109, 101, 44, 10, 9, 9, 9, 9, 9, 9, 32, 115, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 46, 115, 32, 42, 32, 114, 95, 112, 114, 105, 109, 101, 32, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 97, 112, 112, 97, 32, 61, 32, 118, 107, 46, 97, 108, 112, 104, 97, 10, 9, 32, 32, 43, 32, 118, 107, 46, 98, 101, 116, 97, 32, 42, 32, 109, 10, 9, 32, 32, 43, 32, 71, 50, 32, 42, 32, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 117, 32, 61, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 42, 32, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 122, 101, 116, 97, 32, 61, 32, 109, 32, 42, 32, 69, 67, 80, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 40, 117, 105, 100, 41, 10, 32, 32, 32, 45, 45, 32, 112, 114, 111, 111, 102, 32, 45, 45, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 119, 105, 116, 110, 101, 115, 115, 101, 115, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 109, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 45, 45, 32, 99, 111, 109, 112, 117, 116, 101, 32, 116, 104, 101, 32, 119, 105, 116, 110, 101, 115, 115, 101, 115, 115, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 71, 50, 32, 42, 32, 119, 114, 10, 9, 32, 32, 43, 32, 118, 107, 46, 97, 108, 112, 104, 97, 10, 9, 32, 32, 43, 32, 118, 107, 46, 98, 101, 116, 97, 32, 42, 32, 119, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 42, 32, 119, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 119, 109, 32, 42, 32, 69, 67, 80, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 40, 117, 105, 100, 41, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 32, 61, 32, 67, 79, 67, 79, 78, 85, 84, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 32, 118, 107, 46, 97, 108, 112, 104, 97, 44, 32, 118, 107, 46, 98, 101, 116, 97, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 32, 125, 41, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 114, 101, 115, 112, 111, 110, 115, 101, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 109, 32, 61, 32, 119, 109, 32, 45, 32, 109, 32, 42, 32, 99, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 114, 32, 61, 32, 119, 114, 32, 45, 32, 114, 32, 42, 32, 99, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 105, 95, 118, 32, 61, 32, 123, 32, 99, 32, 61, 32, 99, 44, 10, 9, 9, 9, 9, 32, 32, 114, 109, 32, 61, 32, 114, 109, 44, 10, 9, 9, 9, 9, 32, 32, 114, 114, 32, 61, 32, 114, 114, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 84, 104, 101, 116, 97, 32, 61, 32, 123, 10, 32, 32, 32, 32, 32, 32, 107, 97, 112, 112, 97, 32, 61, 32, 107, 97, 112, 112, 97, 44, 10, 32, 32, 32, 32, 32, 32, 110, 117, 32, 61, 32, 110, 117, 44, 10, 32, 32, 32, 32, 32, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 112, 105, 95, 118, 32, 61, 32, 112, 105, 95, 118, 32, 125, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 84, 104, 101, 116, 97, 44, 32, 122, 101, 116, 97, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 118, 107, 44, 32, 84, 104, 101, 116, 97, 44, 32, 122, 101, 116, 97, 44, 32, 117, 105, 100, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 97, 112, 112, 97, 32, 61, 32, 84, 104, 101, 116, 97, 46, 107, 97, 112, 112, 97, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 117, 32, 61, 32, 84, 104, 101, 116, 97, 46, 110, 117, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 32, 61, 32, 84, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 32, 61, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 109, 32, 61, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 114, 32, 61, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 114, 10, 32, 32, 32, 45, 45, 32, 118, 101, 114, 105, 102, 121, 32, 112, 114, 111, 111, 102, 32, 45, 45, 10, 32, 32, 32, 45, 45, 32, 114, 101, 99, 111, 109, 112, 117, 116, 101, 32, 119, 105, 116, 110, 101, 115, 115, 101, 115, 115, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 107, 97, 112, 112, 97, 32, 42, 32, 99, 10, 9, 32, 32, 43, 32, 71, 50, 32, 42, 32, 114, 114, 10, 9, 32, 32, 43, 32, 118, 107, 46, 97, 108, 112, 104, 97, 32, 42, 32, 40, 73, 78, 84, 46, 110, 101, 119, 40, 49, 41, 32, 45, 32, 99, 41, 10, 9, 32, 32, 43, 32, 118, 107, 46, 98, 101, 116, 97, 32, 42, 32, 114, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 110, 117, 32, 42, 32, 99, 32, 43, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 42, 32, 114, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 114, 109, 42, 69, 67, 80, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 40, 117, 105, 100, 41, 32, 43, 32, 122, 101, 116, 97, 42, 99, 10, 32, 32, 32, 45, 45, 32, 99, 111, 109, 112, 117, 116, 101, 32, 116, 104, 101, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 112, 114, 105, 109, 101, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 99, 32, 61, 61, 32, 67, 79, 67, 79, 78, 85, 84, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 32, 118, 107, 46, 97, 108, 112, 104, 97, 44, 32, 118, 107, 46, 98, 101, 116, 97, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 32, 125, 41, 44, 10, 9, 9, 9, 32, 32, 34, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 41, 10, 32, 32, 32, 45, 45, 32, 118, 101, 114, 105, 102, 121, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 45, 45, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 58, 105, 115, 105, 110, 102, 40, 41, 44, 10, 9, 9, 9, 32, 32, 34, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 32, 112, 111, 105, 110, 116, 115, 32, 97, 116, 32, 105, 110, 102, 105, 110, 105, 116, 101, 34, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 69, 67, 80, 50, 46, 109, 105, 108, 108, 101, 114, 40, 107, 97, 112, 112, 97, 44, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 41, 10, 9, 9, 9, 9, 32, 61, 61, 32, 69, 67, 80, 50, 46, 109, 105, 108, 108, 101, 114, 40, 71, 50, 44, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 115, 95, 112, 114, 105, 109, 101, 32, 43, 32, 110, 117, 41, 44, 10, 9, 9, 9, 32, 32, 34, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 109, 105, 108, 108, 101, 114, 32, 108, 111, 111, 112, 32, 102, 97, 105, 108, 115, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 101, 110, 100, 10, 10, 45, 45, 32, 116, 97, 107, 101, 115, 32, 97, 110, 32, 97, 114, 114, 97, 121, 32, 111, 102, 32, 98, 105, 103, 115, 32, 97, 110, 100, 32, 97, 32, 99, 117, 114, 118, 101, 32, 111, 114, 100, 101, 114, 32, 40, 109, 111, 100, 117, 108, 111, 41, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 108, 97, 103, 114, 97, 110, 103, 101, 95, 105, 110, 116, 101, 114, 112, 111, 108, 97, 116, 105, 111, 110, 40, 105, 110, 100, 101, 120, 101, 115, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 105, 110, 100, 101, 120, 101, 115, 41, 32, 61, 61, 32, 34, 116, 97, 98, 108, 101, 34, 44, 32, 34, 76, 97, 103, 114, 97, 110, 103, 101, 32, 105, 110, 116, 101, 114, 112, 111, 108, 97, 116, 105, 111, 110, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 34, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 108, 32, 61, 32, 123, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 117, 109, 101, 114, 97, 116, 111, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 101, 110, 111, 109, 105, 110, 97, 116, 111, 114, 10, 32, 32, 32, 102, 111, 114, 32, 105, 32, 105, 110, 32, 105, 110, 100, 101, 120, 101, 115, 32, 100, 111, 10, 9, 32, 32, 110, 117, 109, 101, 114, 97, 116, 111, 114, 32, 61, 32, 66, 73, 71, 46, 110, 101, 119, 40, 49, 41, 10, 9, 32, 32, 100, 101, 110, 111, 109, 105, 110, 97, 116, 111, 114, 32, 61, 32, 66, 73, 71, 46, 110, 101, 119, 40, 49, 41, 10, 9, 32, 32, 102, 111, 114, 32, 106, 32, 105, 110, 32, 105, 110, 100, 101, 120, 101, 115, 32, 100, 111, 10, 9, 9, 32, 105, 102, 32, 40, 106, 32, 126, 61, 32, 105, 41, 10, 9, 9, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 117, 109, 101, 114, 97, 116, 111, 114, 32, 61, 32, 110, 117, 109, 101, 114, 97, 116, 111, 114, 32, 42, 32, 40, 120, 32, 45, 32, 106, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 110, 111, 109, 105, 110, 97, 116, 111, 114, 32, 61, 32, 100, 101, 110, 111, 109, 105, 110, 97, 116, 111, 114, 32, 42, 32, 40, 105, 32, 45, 32, 106, 41, 10, 9, 9, 32, 101, 110, 100, 10, 9, 9, 32, 108, 91, 35, 108, 43, 49, 93, 32, 61, 32, 110, 117, 109, 101, 114, 97, 116, 111, 114, 32, 42, 32, 100, 101, 110, 111, 109, 105, 110, 97, 116, 111, 114, 58, 109, 111, 100, 105, 110, 118, 40, 79, 41, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 108, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 112, 114, 111, 118, 101, 95, 115, 105, 103, 110, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 112, 117, 98, 44, 32, 109, 41, 10, 32, 32, 32, 45, 45, 32, 115, 105, 103, 110, 32, 61, 61, 32, 118, 111, 116, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 45, 45, 32, 118, 111, 116, 101, 32, 101, 110, 99, 114, 121, 112, 116, 105, 111, 110, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 101, 110, 99, 95, 118, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 71, 49, 32, 42, 32, 107, 44, 10, 9, 9, 9, 9, 32, 32, 32, 114, 105, 103, 104, 116, 32, 61, 32, 112, 117, 98, 32, 42, 32, 107, 32, 43, 32, 104, 115, 32, 42, 32, 109, 32, 125, 10, 32, 32, 32, 45, 45, 32, 111, 112, 112, 111, 115, 105, 116, 101, 32, 111, 102, 32, 118, 111, 116, 101, 32, 101, 110, 99, 114, 121, 112, 116, 105, 111, 110, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 101, 110, 99, 95, 118, 95, 110, 101, 103, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 101, 110, 99, 95, 118, 46, 108, 101, 102, 116, 58, 110, 101, 103, 97, 116, 105, 118, 101, 40, 41, 44, 10, 9, 9, 9, 9, 9, 32, 32, 32, 114, 105, 103, 104, 116, 32, 61, 32, 101, 110, 99, 95, 118, 46, 114, 105, 103, 104, 116, 58, 110, 101, 103, 97, 116, 105, 118, 101, 40, 41, 32, 43, 32, 104, 115, 32, 125, 10, 32, 32, 32, 45, 45, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 32, 116, 111, 32, 116, 104, 101, 32, 118, 111, 116, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 49, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 50, 32, 61, 32, 114, 49, 32, 42, 32, 40, 66, 73, 71, 46, 110, 101, 119, 40, 49, 41, 32, 45, 32, 109, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 118, 32, 61, 32, 71, 49, 32, 42, 32, 109, 32, 43, 32, 104, 115, 32, 42, 32, 114, 49, 10, 10, 32, 32, 32, 45, 45, 32, 112, 114, 111, 111, 102, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 119, 105, 116, 110, 101, 115, 101, 115, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 107, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 109, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 114, 49, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 114, 50, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 45, 45, 32, 99, 111, 109, 112, 117, 116, 101, 32, 116, 104, 101, 32, 119, 105, 116, 110, 101, 115, 115, 101, 115, 115, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 71, 49, 42, 119, 107, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 112, 117, 98, 42, 119, 107, 32, 43, 32, 104, 115, 42, 119, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 71, 49, 42, 119, 109, 32, 43, 32, 104]);
fileData20.push.apply(fileData20, [115, 42, 119, 114, 49, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 68, 119, 32, 61, 32, 99, 118, 42, 119, 109, 32, 43, 32, 104, 115, 42, 119, 114, 50, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 32, 61, 32, 67, 79, 67, 79, 78, 85, 84, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 101, 110, 99, 95, 118, 46, 108, 101, 102, 116, 44, 32, 101, 110, 99, 95, 118, 46, 114, 105, 103, 104, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 32, 32, 32, 99, 118, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 44, 32, 68, 119, 125, 41, 32, 37, 32, 79, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 114, 101, 115, 112, 111, 110, 115, 101, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 107, 32, 61, 32, 119, 107, 32, 45, 32, 99, 32, 42, 32, 107, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 109, 32, 61, 32, 119, 109, 32, 45, 32, 99, 32, 42, 32, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 114, 49, 32, 61, 32, 119, 114, 49, 32, 45, 32, 99, 32, 42, 32, 114, 49, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 114, 50, 32, 61, 32, 119, 114, 50, 32, 45, 32, 99, 32, 42, 32, 114, 50, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 105, 95, 118, 111, 116, 101, 32, 61, 32, 123, 32, 99, 32, 61, 32, 99, 44, 10, 9, 9, 9, 9, 9, 32, 114, 107, 32, 61, 32, 114, 107, 44, 10, 9, 9, 9, 9, 9, 32, 114, 109, 32, 61, 32, 114, 109, 44, 10, 9, 9, 9, 9, 9, 32, 114, 114, 49, 32, 61, 32, 114, 114, 49, 44, 10, 9, 9, 9, 9, 9, 32, 114, 114, 50, 32, 61, 32, 114, 114, 50, 32, 125, 10, 10, 32, 32, 32, 45, 45, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 39, 115, 32, 84, 104, 101, 116, 97, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 115, 99, 111, 114, 101, 115, 32, 61, 32, 123, 32, 112, 111, 115, 32, 61, 32, 101, 110, 99, 95, 118, 44, 10, 9, 9, 9, 9, 9, 32, 32, 32, 110, 101, 103, 32, 61, 32, 101, 110, 99, 95, 118, 95, 110, 101, 103, 32, 125, 44, 32, 45, 45, 32, 108, 101, 102, 116, 47, 114, 105, 103, 104, 116, 32, 116, 117, 112, 108, 101, 115, 10, 9, 9, 9, 99, 118, 32, 61, 32, 99, 118, 44, 32, 45, 45, 32, 101, 99, 112, 10, 9, 9, 9, 112, 105, 95, 118, 111, 116, 101, 32, 61, 32, 112, 105, 95, 118, 111, 116, 101, 32, 125, 32, 45, 45, 32, 112, 105, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 118, 101, 114, 105, 102, 121, 95, 115, 105, 103, 110, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 112, 117, 98, 44, 32, 116, 104, 101, 116, 97, 41, 10, 32, 32, 32, 45, 45, 32, 114, 101, 99, 111, 109, 112, 117, 116, 101, 32, 119, 105, 116, 110, 101, 115, 115, 101, 115, 115, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 99, 111, 114, 101, 115, 32, 61, 32, 116, 104, 101, 116, 97, 46, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 32, 45, 45, 32, 111, 110, 108, 121, 32, 112, 111, 115, 105, 116, 105, 118, 101, 44, 32, 110, 111, 116, 32, 110, 101, 103, 97, 116, 105, 118, 101, 63, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 71, 49, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 114, 107, 10, 9, 32, 32, 43, 32, 115, 99, 111, 114, 101, 115, 46, 108, 101, 102, 116, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 99, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 112, 117, 98, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 114, 107, 10, 9, 32, 32, 43, 32, 104, 115, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 114, 109, 10, 9, 32, 32, 43, 32, 115, 99, 111, 114, 101, 115, 46, 114, 105, 103, 104, 116, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 99, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 71, 49, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 114, 109, 10, 9, 32, 32, 43, 32, 104, 115, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 114, 114, 49, 10, 9, 32, 32, 43, 32, 116, 104, 101, 116, 97, 46, 99, 118, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 99, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 68, 119, 32, 61, 32, 116, 104, 101, 116, 97, 46, 99, 118, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 114, 109, 10, 9, 32, 32, 43, 32, 104, 115, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 114, 114, 50, 10, 9, 32, 32, 43, 32, 116, 104, 101, 116, 97, 46, 99, 118, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 99, 10, 32, 32, 32, 45, 45, 32, 118, 101, 114, 105, 102, 121, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 111, 116, 101, 46, 99, 32, 61, 61, 32, 67, 79, 67, 79, 78, 85, 84, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 10, 9, 9, 9, 9, 32, 123, 115, 99, 111, 114, 101, 115, 46, 108, 101, 102, 116, 44, 32, 115, 99, 111, 114, 101, 115, 46, 114, 105, 103, 104, 116, 44, 10, 9, 9, 9, 9, 32, 32, 116, 104, 101, 116, 97, 46, 99, 118, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 44, 32, 68, 119, 32, 125, 41, 44, 10, 9, 9, 9, 32, 32, 34, 118, 101, 114, 105, 102, 121, 95, 115, 105, 103, 110, 95, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 102, 97, 105, 108, 115, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 112, 114, 111, 118, 101, 95, 116, 97, 108, 108, 121, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 115, 107, 44, 32, 115, 99, 111, 114, 101, 115, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 120, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 123, 32, 119, 120, 58, 109, 111, 100, 110, 101, 103, 40, 79, 41, 32, 42, 32, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 108, 101, 102, 116, 44, 10, 9, 9, 9, 9, 119, 120, 58, 109, 111, 100, 110, 101, 103, 40, 79, 41, 32, 42, 32, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 108, 101, 102, 116, 32, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 32, 61, 32, 67, 79, 67, 79, 78, 85, 84, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 65, 119, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 120, 32, 61, 32, 119, 120, 32, 45, 32, 99, 32, 42, 32, 115, 107, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 100, 101, 99, 32, 61, 32, 123, 32, 112, 111, 115, 32, 61, 32, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 108, 101, 102, 116, 32, 42, 32, 115, 107, 58, 109, 111, 100, 110, 101, 103, 40, 79, 41, 44, 10, 9, 9, 9, 9, 32, 110, 101, 103, 32, 61, 32, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 108, 101, 102, 116, 32, 42, 32, 115, 107, 58, 109, 111, 100, 110, 101, 103, 40, 79, 41, 32, 125, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 112, 105, 95, 116, 97, 108, 108, 121, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 100, 101, 99, 32, 61, 32, 100, 101, 99, 44, 10, 9, 9, 9, 114, 120, 32, 61, 32, 114, 120, 44, 10, 9, 9, 9, 99, 32, 61, 32, 99, 32, 32, 32, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 118, 101, 114, 105, 102, 121, 95, 116, 97, 108, 108, 121, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 115, 99, 111, 114, 101, 115, 44, 32, 112, 105, 95, 116, 97, 108, 108, 121, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 120, 110, 101, 103, 32, 61, 32, 112, 105, 95, 116, 97, 108, 108, 121, 46, 114, 120, 58, 109, 111, 100, 110, 101, 103, 40, 79, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 123, 32, 114, 120, 110, 101, 103, 42, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 108, 101, 102, 116, 32, 43, 32, 112, 105, 95, 116, 97, 108, 108, 121, 46, 99, 32, 42, 32, 112, 105, 95, 116, 97, 108, 108, 121, 46, 100, 101, 99, 46, 112, 111, 115, 44, 10, 9, 9, 9, 9, 114, 120, 110, 101, 103, 42, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 108, 101, 102, 116, 32, 43, 32, 112, 105, 95, 116, 97, 108, 108, 121, 46, 99, 32, 42, 32, 112, 105, 95, 116, 97, 108, 108, 121, 46, 100, 101, 99, 46, 110, 101, 103, 32, 32, 125, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 112, 105, 95, 116, 97, 108, 108, 121, 46, 99, 32, 61, 61, 32, 67, 79, 67, 79, 78, 85, 84, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 65, 119, 41, 44, 10, 9, 9, 9, 32, 32, 34, 118, 101, 114, 105, 102, 121, 95, 116, 97, 108, 108, 121, 95, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 102, 97, 105, 108, 115, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 99, 111, 46, 99, 111, 117, 110, 116, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 115, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 115, 99, 111, 114, 101, 115, 44, 32, 112, 105, 95, 116, 97, 108, 108, 121, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 116, 97, 98, 32, 61, 32, 123, 32, 125, 10, 32, 32, 32, 102, 111, 114, 32, 105, 100, 120, 61, 49, 44, 49, 48, 48, 48, 32, 100, 111, 10, 9, 32, 32, 45, 45, 32, 105, 102, 32, 105, 100, 120, 32, 126, 61, 32, 48, 32, 116, 104, 101, 110, 32, 45, 45, 32, 110, 111, 116, 32, 122, 101, 114, 111, 10, 9, 32, 32, 114, 101, 115, 116, 97, 98, 91, 40, 66, 73, 71, 46, 110, 101, 119, 40, 105, 100, 120, 41, 32, 42, 32, 104, 115, 41, 58, 111, 99, 116, 101, 116, 40, 41, 58, 104, 101, 120, 40, 41, 93, 32, 61, 32, 105, 100, 120, 10, 9, 32, 32, 45, 45, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 32, 112, 111, 115, 32, 61, 32, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 114, 105, 103, 104, 116, 32, 43, 32, 112, 105, 95, 116, 97, 108, 108, 121, 46, 100, 101, 99, 46, 112, 111, 115, 44, 10, 9, 9, 9, 9, 32, 110, 101, 103, 32, 61, 32, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 114, 105, 103, 104, 116, 32, 43, 32, 112, 105, 95, 116, 97, 108, 108, 121, 46, 100, 101, 99, 46, 110, 101, 103, 32, 32, 125, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 112, 111, 115, 32, 61, 32, 114, 101, 115, 116, 97, 98, 91, 114, 101, 115, 46, 112, 111, 115, 58, 111, 99, 116, 101, 116, 40, 41, 58, 104, 101, 120, 40, 41, 93, 44, 10, 9, 9, 9, 110, 101, 103, 32, 61, 32, 114, 101, 115, 116, 97, 98, 91, 114, 101, 115, 46, 110, 101, 103, 58, 111, 99, 116, 101, 116, 40, 41, 58, 104, 101, 120, 40, 41, 93, 32, 32, 125, 10, 101, 110, 100, 10, 114, 101, 116, 117, 114, 110, 32, 99, 111, 99, 111, 10]);
Module['FS_createDataFile']('/', 'crypto_coconut.lua', fileData20, true, true, false);
var fileData21 = [];
fileData21.push.apply(fileData21, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 32, 104, 97, 115, 104, 105, 110, 103, 32, 115, 105, 110, 103, 108, 101, 32, 115, 116, 114, 105, 110, 103, 115, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 104, 97, 115, 104, 32, 111, 102, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 41, 10, 32, 32, 32, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 104, 97, 115, 104, 32, 97, 110, 32, 97, 114, 114, 97, 121, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 114, 99, 32, 61, 32, 65, 67, 75, 91, 115, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 114, 99, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 41, 10, 32, 32, 32, 32, 65, 67, 75, 46, 104, 97, 115, 104, 32, 61, 32, 72, 65, 83, 72, 46, 110, 101, 119, 40, 67, 79, 78, 70, 46, 104, 97, 115, 104, 41, 58, 112, 114, 111, 99, 101, 115, 115, 40, 115, 114, 99, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 104, 97, 115, 104, 32, 111, 102, 32, 39, 39, 32, 117, 115, 105, 110, 103, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 44, 104, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 114, 99, 32, 61, 32, 65, 67, 75, 91, 115, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 114, 99, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 41, 10, 32, 32, 32, 32, 105, 102, 32, 115, 116, 114, 99, 97, 115, 101, 99, 109, 112, 40, 104, 44, 39, 115, 104, 97, 50, 53, 54, 39, 41, 32, 116, 104, 101, 110, 9, 9, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 46, 104, 97, 115, 104, 32, 61, 32, 115, 104, 97, 50, 53, 54, 40, 115, 114, 99, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 116, 114, 99, 97, 115, 101, 99, 109, 112, 40, 104, 44, 39, 115, 104, 97, 53, 49, 50, 39, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 46, 104, 97, 115, 104, 32, 61, 32, 115, 104, 97, 53, 49, 50, 40, 115, 114, 99, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 104, 97, 115, 104, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 104, 97, 115, 104, 58, 32, 34, 46, 46, 104, 41, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 114, 97, 110, 100, 111, 109, 32, 97, 110, 100, 32, 104, 97, 115, 104, 105, 110, 103, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 114, 97, 110, 100, 111, 109, 32, 111, 98, 106, 101, 99, 116, 32, 111, 102, 32, 39, 39, 32, 98, 105, 116, 115, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 98, 105, 116, 115, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 110, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 98, 105, 116, 115, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 98, 105, 116, 115, 58, 32, 34, 46, 46, 110, 41, 10, 32, 32, 32, 32, 65, 67, 75, 46, 114, 97, 110, 100, 111, 109, 95, 111, 98, 106, 101, 99, 116, 32, 61, 32, 79, 67, 84, 69, 84, 46, 114, 97, 110, 100, 111, 109, 40, 32, 109, 97, 116, 104, 46, 99, 101, 105, 108, 40, 98, 105, 116, 115, 47, 56, 41, 32, 41, 10, 32, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 104, 97, 115, 104, 32, 116, 111, 32, 112, 111, 105, 110, 116, 32, 39, 39, 32, 111, 102, 32, 101, 97, 99, 104, 32, 111, 98, 106, 101, 99, 116, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 119, 104, 97, 116, 44, 32, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 70, 32, 61, 32, 95, 71, 91, 119, 104, 97, 116, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 70, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 41, 32, 61, 61, 32, 39, 102, 117, 110, 99, 116, 105, 111, 110, 39, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 72, 97, 115, 104, 32, 116, 121, 112, 101, 32, 34, 46, 46, 119, 104, 97, 116, 46, 46, 34, 32, 105, 115, 32, 105, 110, 118, 97, 108, 105, 100, 32, 40, 110, 111, 32, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 41, 34, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 32, 61, 32, 65, 67, 75, 91, 97, 114, 114, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 117, 110, 116, 32, 61, 32, 105, 115, 97, 114, 114, 97, 121, 40, 65, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 32, 99, 111, 117, 110, 116, 32, 62, 32, 48, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 65, 67, 75, 46, 104, 97, 115, 104, 95, 116, 111, 95, 112, 111, 105, 110, 116, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 70, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 44, 32, 65, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 104, 97, 115, 104, 101, 115, 32, 111, 102, 32, 101, 97, 99, 104, 32, 111, 98, 106, 101, 99, 116, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 32, 61, 32, 65, 67, 75, 91, 97, 114, 114, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 117, 110, 116, 32, 61, 32, 105, 115, 97, 114, 114, 97, 121, 40, 65, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 32, 99, 111, 117, 110, 116, 32, 62, 32, 48, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 65, 67, 75, 46, 104, 97, 115, 104, 101, 115, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 115, 104, 97, 50, 53, 54, 44, 32, 65, 41, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 72, 77, 65, 67, 32, 102, 114, 111, 109, 32, 82, 70, 67, 50, 49, 48, 52, 46, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 72, 77, 65, 67, 32, 111, 102, 32, 39, 39, 32, 119, 105, 116, 104, 32, 107, 101, 121, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 44, 32, 107, 101, 121, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 114, 99, 32, 61, 32, 65, 67, 75, 91, 111, 98, 106, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 114, 99, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 111, 98, 106, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 104, 107, 101, 121, 32, 61, 32, 65, 67, 75, 91, 107, 101, 121, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 104, 107, 101, 121, 44, 32, 34, 75, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 107, 101, 121, 41, 10, 32, 32, 32, 32, 65, 67, 75, 46, 72, 77, 65, 67, 32, 61, 32, 72, 65, 83, 72, 46, 110, 101, 119, 40, 67, 79, 78, 70, 46, 104, 97, 115, 104, 41, 58, 104, 109, 97, 99, 40, 104, 107, 101, 121, 44, 32, 111, 98, 106, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 107, 101, 121, 32, 100, 101, 114, 105, 118, 97, 116, 105, 111, 110, 32, 111, 102, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 114, 99, 32, 61, 32, 65, 67, 75, 91, 111, 98, 106, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 114, 99, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 111, 98, 106, 41, 10, 32, 32, 32, 32, 65, 67, 75, 46, 107, 101, 121, 95, 100, 101, 114, 105, 118, 97, 116, 105, 111, 110, 32, 61, 32, 72, 65, 83, 72, 46, 110, 101, 119, 40, 67, 79, 78, 70, 46, 104, 97, 115, 104, 41, 58, 107, 100, 102, 40, 115, 114, 99, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 107, 101, 121, 32, 100, 101, 114, 105, 118, 97, 116, 105, 111, 110, 32, 111, 102, 32, 39, 39, 32, 119, 105, 116, 104, 32, 112, 97, 115, 115, 119, 111, 114, 100, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 44, 32, 115, 97, 108, 116, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 114, 99, 32, 61, 32, 65, 67, 75, 91, 111, 98, 106, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 114, 99, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 111, 98, 106, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 97, 115, 115, 32, 61, 32, 65, 67, 75, 91, 115, 97, 108, 116, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 112, 97, 115, 115, 44, 32, 34, 80, 97, 115, 115, 119, 111, 114, 100, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 115, 97, 108, 116, 41, 10, 32, 32, 32, 32, 65, 67, 75, 46, 107, 101, 121, 95, 100, 101, 114, 105, 118, 97, 116, 105, 111, 110, 32, 61, 32, 72, 65, 83, 72, 46, 110, 101, 119, 40, 67, 79, 78, 70, 46, 104, 97, 115, 104, 41, 58, 112, 98, 107, 100, 102, 50, 40, 115, 114, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 32, 115, 97, 108, 116, 32, 61, 32, 112, 97, 115, 115, 32, 125, 41, 32, 45, 45, 32, 44, 32, 105, 116, 101, 114, 97, 116, 105, 111, 110, 115, 32, 61, 32, 49, 48, 48, 48, 48, 44, 32, 108, 101, 110, 103, 116, 104, 32, 61, 32, 51, 50, 10, 101, 110, 100, 41]);
Module['FS_createDataFile']('/', 'zencode_hash.lua', fileData21, true, true, false);
var fileData22 = [];
fileData22.push.apply(fileData22, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 32, 97, 114, 114, 97, 121, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 97, 114, 114, 97, 121, 32, 111, 102, 32, 39, 39, 32, 114, 97, 110, 100, 111, 109, 32, 111, 98, 106, 101, 99, 116, 115, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 97, 114, 114, 97, 121, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 111, 98, 106, 101, 99, 116, 58, 32, 34, 46, 46, 34, 97, 114, 114, 97, 121, 34, 41, 10, 9, 9, 65, 67, 75, 46, 97, 114, 114, 97, 121, 32, 61, 32, 123, 32, 125, 10, 9, 9, 102, 111, 114, 32, 105, 32, 61, 32, 115, 44, 49, 44, 45, 49, 32, 100, 111, 10, 9, 9, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 46, 97, 114, 114, 97, 121, 44, 79, 67, 84, 69, 84, 46, 114, 97, 110, 100, 111, 109, 40, 54, 52, 41, 41, 10, 9, 9, 101, 110, 100, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 97, 114, 114, 97, 121, 32, 61, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 110, 97, 109, 101, 44, 10, 9, 9, 9, 9, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 97, 114, 114, 97, 121, 39, 32, 125, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 97, 114, 114, 97, 121, 32, 111, 102, 32, 39, 39, 32, 114, 97, 110, 100, 111, 109, 32, 111, 98, 106, 101, 99, 116, 115, 32, 111, 102, 32, 39, 39, 32, 98, 105, 116, 115, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 44, 32, 98, 105, 116, 115, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 97, 114, 114, 97, 121, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 111, 98, 106, 101, 99, 116, 58, 32, 34, 46, 46, 34, 97, 114, 114, 97, 121, 34, 41, 10, 9, 9, 65, 67, 75, 46, 97, 114, 114, 97, 121, 32, 61, 32, 123, 32, 125, 10, 9, 9, 108, 111, 99, 97, 108, 32, 98, 121, 116, 101, 115, 32, 61, 32, 109, 97, 116, 104, 46, 99, 101, 105, 108, 40, 98, 105, 116, 115, 47, 56, 41, 10, 9, 9, 102, 111, 114, 32, 105, 32, 61, 32, 115, 44, 49, 44, 45, 49, 32, 100, 111, 10, 9, 9, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 46, 97, 114, 114, 97, 121, 44, 79, 67, 84, 69, 84, 46, 114, 97, 110, 100, 111, 109, 40, 98, 121, 116, 101, 115, 41, 41, 10, 9, 9, 101, 110, 100, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 97, 114, 114, 97, 121, 32, 61, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 110, 97, 109, 101, 44, 10, 9, 9, 9, 9, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 97, 114, 114, 97, 121, 39, 32, 125, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 97, 114, 114, 97, 121, 32, 111, 102, 32, 39, 39, 32, 114, 97, 110, 100, 111, 109, 32, 110, 117, 109, 98, 101, 114, 115, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 97, 114, 114, 97, 121, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 111, 98, 106, 101, 99, 116, 58, 32, 34, 46, 46, 34, 97, 114, 114, 97, 121, 34, 41, 10, 9, 9, 65, 67, 75, 46, 97, 114, 114, 97, 121, 32, 61, 32, 123, 32, 125, 10, 9, 9, 102, 111, 114, 32, 105, 32, 61, 32, 115, 44, 49, 44, 45, 49, 32, 100, 111, 10, 9, 9, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 46, 97, 114, 114, 97, 121, 44, 116, 111, 110, 117, 109, 98, 101, 114, 40, 114, 97, 110, 100, 111, 109, 95, 105, 110, 116, 49, 54, 40, 41, 41, 41, 10, 9, 9, 101, 110, 100, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 97, 114, 114, 97, 121, 32, 61, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 97, 114, 114, 97, 121, 39, 32, 125, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 97, 114, 114, 97, 121, 32, 111, 102, 32, 39, 39, 32, 114, 97, 110, 100, 111, 109, 32, 110, 117, 109, 98, 101, 114, 115, 32, 109, 111, 100, 117, 108, 111, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 44, 109, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 97, 114, 114, 97, 121, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 111, 98, 106, 101, 99, 116, 58, 32, 34, 46, 46, 34, 97, 114, 114, 97, 121, 34, 41, 10, 9, 9, 65, 67, 75, 46, 97, 114, 114, 97, 121, 32, 61, 32, 123, 32, 125, 10, 9, 9, 102, 111, 114, 32, 105, 32, 61, 32, 115, 44, 49, 44, 45, 49, 32, 100, 111, 10, 9, 9, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 46, 97, 114, 114, 97, 121, 44, 109, 97, 116, 104, 46, 102, 108, 111, 111, 114, 40, 114, 97, 110, 100, 111, 109, 95, 105, 110, 116, 49, 54, 40, 41, 32, 37, 32, 109, 41, 41, 10, 9, 9, 101, 110, 100, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 97, 114, 114, 97, 121, 32, 61, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 9, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 10, 9, 9, 9, 9, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 97, 114, 114, 97, 121, 39, 32, 125, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 111, 102, 32, 97, 114, 114, 97, 121, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 97, 114, 114, 41, 10, 9, 9, 45, 45, 32, 84, 79, 68, 79, 58, 32, 115, 119, 105, 116, 99, 104, 32, 116, 121, 112, 111, 108, 111, 103, 105, 101, 115, 44, 32, 115, 117, 109, 32, 110, 117, 109, 98, 101, 114, 115, 32, 97, 110, 100, 32, 98, 105, 103, 115, 44, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 32, 104, 97, 115, 104, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 44, 32, 34, 67, 97, 110, 110, 111, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 111, 98, 106, 101, 99, 116, 58, 32, 34, 46, 46, 34, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 34, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 65, 32, 61, 32, 65, 67, 75, 91, 97, 114, 114, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 97, 114, 114, 93, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 97, 114, 114, 97, 121, 39, 44, 10, 9, 9, 9, 32, 32, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 117, 110, 116, 32, 61, 32, 105, 115, 97, 114, 114, 97, 121, 40, 65, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 32, 99, 111, 117, 110, 116, 32, 62, 32, 48, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 65, 91, 49, 93, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 32, 48, 10, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 110, 101, 120, 116, 44, 65, 44, 110, 105, 108, 32, 100, 111, 10, 9, 9, 32, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 43, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 118, 41, 10, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 9, 32, 32, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 10, 9, 9, 32, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 10, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 10, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 32, 125, 10, 9, 101, 108, 115, 101, 105, 102, 32, 116, 121, 112, 101, 40, 65, 91, 49, 93, 41, 32, 61, 61, 32, 39, 122, 101, 110, 114, 111, 111, 109, 46, 98, 105, 103, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 32, 66, 73, 71, 46, 110, 101, 119, 40, 48, 41, 10, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 110, 101, 120, 116, 44, 65, 44, 110, 105, 108, 32, 100, 111, 10, 9, 9, 32, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 43, 32, 118, 10, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 9, 32, 32, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 10, 9, 9, 32, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 110, 97, 109, 101, 44, 10, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 44, 10, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 32, 125, 10, 9, 101, 108, 115, 101, 105, 102, 32, 116, 121, 112, 101, 40, 65, 91, 49, 93, 41, 32, 61, 61, 32, 39, 122, 101, 110, 114, 111, 111, 109, 46, 101, 99, 112, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 32, 69, 67, 80, 46, 103, 101, 110, 101, 114, 97, 116, 111, 114, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 110, 101, 120, 116, 44, 65, 44, 110, 105, 108, 32, 100, 111, 10, 9, 9, 32, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 43, 32, 118, 10, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 9, 32, 32, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 10, 9, 9, 32, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 110, 97, 109, 101, 44, 10, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 44, 10, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 32, 125, 10, 9, 101, 108, 115, 101, 105, 102, 32, 116, 121, 112, 101, 40, 65, 91, 49, 93, 41, 32, 61, 61, 32, 39, 122, 101, 110, 114, 111, 111, 109, 46, 101, 99, 112, 50, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 32, 69, 67, 80, 50, 46, 103, 101, 110, 101, 114, 97, 116, 111, 114, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 110, 101, 120, 116, 44, 65, 44, 110, 105, 108, 32, 100, 111, 10, 9, 9, 32, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 32, 65, 67, 75, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 43, 32, 118, 10, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 9, 32, 32, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 61, 10, 9, 9, 32, 32, 123, 32, 110, 97, 109, 101, 32, 61, 32, 100, 101, 115, 116, 44, 10, 9, 9, 9, 101, 110, 99, 111, 100, 105, 110, 103, 32, 61, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 110, 97, 109, 101, 44, 10, 9, 9, 9, 108, 117, 97, 116, 121, 112, 101, 32, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 44, 10, 9, 9, 9, 122, 101, 110, 116, 121, 112, 101, 32, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 32, 125, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 101, 114, 114, 111, 114, 40, 34, 85, 110, 107, 110, 111, 119, 110, 32, 97, 103, 103, 114, 101, 103, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 116, 121, 112, 101, 58, 32, 34, 46, 46, 116, 121, 112, 101, 40, 65, 91, 49, 93, 41, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 112, 105, 99, 107, 32, 116, 104, 101, 32, 114, 97, 110, 100, 111, 109, 32, 111, 98, 106, 101, 99, 116, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 32, 61, 32, 65, 67, 75, 91, 97, 114, 114, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 97, 114, 114, 93, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 97, 114, 114, 97, 121, 39, 44, 10, 9, 9, 9, 32, 32, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 117, 110, 116, 32, 61, 32, 105, 115, 97, 114, 114, 97, 121, 40, 65, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 32, 99, 111, 117, 110, 116, 32, 62, 32, 48, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 40, 114, 97, 110, 100, 111, 109, 95, 105, 110, 116, 49, 54, 40, 41, 32, 37, 32, 99, 111, 117, 110, 116, 41, 32, 43, 49, 10, 32, 32, 32, 32, 65, 67, 75, 46, 114, 97, 110, 100, 111, 109, 95, 111, 98, 106, 101, 99, 116, 32, 61, 32, 65, 91, 114, 93, 10, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 114, 97, 110, 100, 111, 109, 95, 111, 98, 106, 101, 99, 116, 32, 61, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 97, 114, 114, 93, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 114, 97, 110, 100, 111, 109, 105, 122, 101, 32, 116, 104, 101, 32, 39, 39, 32, 97, 114, 114, 97, 121, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 32, 61, 32, 65, 67, 75, 91, 97, 114, 114, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 97, 114, 114, 93, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 97, 114, 114, 97, 121, 39, 44, 10, 9, 9, 9, 32, 32, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 117, 110, 116, 32, 61, 32, 105, 115, 97, 114, 114, 97, 121, 40, 65, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 32, 99, 111, 117, 110, 116, 32, 62, 32, 48, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 32, 125, 10, 32, 32, 32, 32, 102, 111, 114, 32, 105, 32, 61, 32, 99, 111, 117, 110, 116, 44, 50, 44, 45, 49, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 40, 114, 97, 110, 100, 111, 109, 95, 105, 110, 116, 49, 54, 40, 41, 32, 37, 32, 40, 105, 45, 49, 41, 41, 43, 49, 10, 32, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 114, 101, 115, 44, 65, 91, 114, 93, 41, 32, 45, 45, 32, 108, 105, 109, 105, 116, 32, 49, 54, 98, 105, 116, 32, 108, 101, 110, 103, 104, 116, 32, 102, 111, 114, 32, 97, 114, 114, 97, 121, 115, 10, 32, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 46, 114, 101, 109, 111, 118, 101, 40, 65, 44, 32, 114, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 114, 101, 115, 44, 65, 91, 49, 93, 41, 10, 32, 32, 32, 32, 65, 67, 75, 91, 97, 114, 114, 93, 32, 61, 32, 114, 101, 115, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 114, 101, 109, 111, 118, 101, 32, 116, 104, 101, 32, 39, 39, 32, 102, 114, 111, 109, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 108, 101, 44, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 69, 32, 61, 32, 65, 67, 75, 91, 101, 108, 101, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 69, 44, 32, 34, 69, 108, 101, 109, 101, 110, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 101, 108, 101, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 32, 61, 32, 65, 67, 75, 91, 97, 114, 114, 93, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 44, 32, 34, 65, 114, 114, 97, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 97, 114, 114, 93, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 97, 114, 114, 97, 121, 39, 44, 10, 9, 9, 9, 32, 32, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 79, 32, 61, 32, 123, 32, 125, 10, 9, 108, 111, 99, 97, 108, 32, 102, 111, 117, 110, 100, 32, 61, 32, 102, 97, 108, 115, 101, 10, 32, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 110, 101, 120, 116, 44, 65, 44, 110, 105, 108, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 40, 118, 32, 61, 61, 32, 69, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 79, 44, 118, 41, 10, 9, 32, 32, 32, 101, 108, 115, 101, 10, 9, 9, 32, 32, 102, 111, 117, 110, 100, 32, 61, 32, 116, 114, 117, 101, 10, 9, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 101, 110, 100, 10, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 102, 111, 117, 110, 100, 44, 32, 34, 69, 108, 101, 109, 101, 110, 116, 32, 116, 111, 32, 98, 101, 32, 114, 101, 109, 111, 118, 101, 100, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 97, 114, 114, 97, 121, 34, 41, 10, 32, 32, 32, 32, 65, 67, 75, 91, 97, 114, 114, 93, 32, 61, 32, 79, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 105, 110, 115, 101, 114, 116, 32, 116, 104, 101, 32, 39, 39, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 108, 101, 44, 97, 114, 114, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 101, 108, 101, 93, 44, 32, 34, 69, 108, 101, 109, 101, 110, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 101, 108, 101, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 97, 114, 114, 93, 44, 32, 34, 65, 114, 114, 97, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 97, 114, 114, 93, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 97, 114, 114, 97, 121, 39, 44, 10, 9, 9, 9, 32, 32, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 91, 97, 114, 114, 93, 44, 32, 65, 67, 75, 91, 101, 108, 101, 93, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 116, 104, 101, 32, 39, 39, 32, 105, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 108, 101, 44, 32, 97, 114, 114, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 101, 108, 101, 93, 44, 32, 34, 69, 108, 101, 109, 101, 110, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 101, 108, 101, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 97, 114, 114, 93, 44, 32, 34, 65, 114, 114, 97, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 97, 114, 114, 93, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 97, 114, 114, 97, 121, 39, 44, 10, 9, 9, 9, 32, 32, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 110, 101, 120, 116, 44, 65, 67, 75, 91, 97, 114, 114, 93, 44, 110, 105, 108, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 118, 32, 126, 61, 32, 65, 67, 75, 91, 101, 108, 101, 93, 44, 32, 34, 69, 108, 101, 109, 101, 110, 116, 32, 39, 34, 46, 46, 101, 108, 101, 46, 46, 34, 39, 32, 105, 115, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 105, 110, 115, 105, 100, 101, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 116, 104, 101, 32, 39, 39, 32, 105, 115, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 108, 101, 44, 32, 97, 114, 114, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 101, 108, 101, 93, 44, 32, 34, 69, 108, 101, 109, 101, 110, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 101, 108, 101, 41, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 97, 114, 114, 93, 44, 32, 34, 65, 114, 114, 97, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 97, 114, 114, 93, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 97, 114, 114, 97, 121, 39, 44, 10, 9, 9, 9, 32, 32, 32, 34, 79, 98, 106, 101, 99, 116, 32, 105, 115, 32, 110, 111, 116, 32, 97, 110, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 111, 117, 110, 100, 32, 61, 32, 102, 97, 108, 115, 101, 10, 32, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 110, 101, 120, 116, 44, 65, 67, 75, 91, 97, 114, 114, 93, 44, 110, 105, 108, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 118, 32, 61, 61, 32, 65, 67, 75, 91, 101, 108, 101, 93, 32, 116, 104, 101, 110, 32, 102, 111, 117, 110, 100, 32, 61, 32, 116, 114, 117, 101, 32, 101, 110, 100, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 102, 111, 117, 110, 100, 44, 32, 34, 69, 108, 101, 109, 101, 110, 116, 32, 39, 34, 46, 46, 101, 108, 101, 46, 46, 34, 39, 32, 105, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 115, 105, 100, 101, 32, 97, 114, 114, 97, 121, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 101, 110, 100, 41, 10]);
Module['FS_createDataFile']('/', 'zencode_array.lua', fileData22, true, true, false);
var fileData23 = [];
fileData23.push.apply(fileData23, [45, 45, 45, 32, 60, 104, 49, 62, 68, 101, 98, 117, 103, 32, 105, 110, 115, 112, 101, 99, 116, 105, 111, 110, 32, 102, 97, 99, 105, 108, 105, 116, 121, 60, 47, 104, 49, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 101, 32, 73, 78, 83, 80, 69, 67, 84, 32, 99, 108, 97, 115, 115, 32, 112, 114, 111, 118, 105, 100, 101, 115, 32, 97, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 116, 111, 32, 101, 97, 115, 101, 10, 45, 45, 32, 100, 101, 118, 101, 108, 111, 112, 109, 101, 110, 116, 32, 97, 110, 100, 32, 100, 101, 98, 117, 103, 103, 105, 110, 103, 46, 32, 73, 116, 32, 109, 97, 105, 110, 108, 121, 32, 99, 111, 110, 115, 105, 115, 116, 115, 32, 111, 102, 32, 97, 110, 32, 97, 100, 118, 97, 110, 99, 101, 100, 10, 45, 45, 32, 64, 123, 112, 114, 105, 110, 116, 125, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 104, 97, 116, 32, 99, 97, 110, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 32, 99, 111, 109, 112, 108, 101, 120, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 115, 32, 40, 76, 117, 97, 10, 45, 45, 32, 116, 97, 98, 108, 101, 115, 41, 32, 97, 110, 100, 32, 116, 97, 103, 32, 116, 104, 101, 105, 114, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 102, 111, 114, 109, 97, 116, 115, 32, 97, 110, 100, 32, 115, 105, 122, 101, 46, 32, 32, 65, 110, 111, 116, 104, 101, 114, 32, 64, 123, 115, 112, 121, 125, 10, 45, 45, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 114, 105, 110, 116, 115, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 97, 115, 32, 112, 97, 115, 115, 45, 116, 104, 114, 111, 117, 103, 104, 46, 10, 45, 45, 10, 45, 45, 32, 64, 109, 111, 100, 117, 108, 101, 32, 73, 78, 83, 80, 69, 67, 84, 10, 45, 45, 32, 64, 118, 101, 114, 115, 105, 111, 110, 32, 105, 110, 115, 112, 101, 99, 116, 46, 108, 117, 97, 32, 51, 46, 49, 46, 48, 10, 45, 45, 32, 64, 97, 117, 116, 104, 111, 114, 32, 75, 105, 107, 105, 116, 111, 32, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 107, 105, 107, 105, 116, 111, 47, 105, 110, 115, 112, 101, 99, 116, 46, 108, 117, 97, 34, 62, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 107, 105, 107, 105, 116, 111, 47, 105, 110, 115, 112, 101, 99, 116, 46, 108, 117, 97, 60, 47, 97, 62, 10, 45, 45, 32, 64, 108, 105, 99, 101, 110, 115, 101, 32, 77, 73, 84, 10, 10, 108, 111, 99, 97, 108, 32, 105, 110, 115, 112, 101, 99, 116, 32, 61, 123, 10, 32, 32, 95, 86, 69, 82, 83, 73, 79, 78, 32, 61, 32, 39, 105, 110, 115, 112, 101, 99, 116, 46, 108, 117, 97, 32, 51, 46, 49, 46, 48, 39, 44, 10, 32, 32, 95, 85, 82, 76, 32, 32, 32, 32, 32, 61, 32, 39, 104, 116, 116, 112, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 107, 105, 107, 105, 116, 111, 47, 105, 110, 115, 112, 101, 99, 116, 46, 108, 117, 97, 39, 44, 10, 32, 32, 95, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 32, 61, 32, 39, 104, 117, 109, 97, 110, 45, 114, 101, 97, 100, 97, 98, 108, 101, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 115, 32, 111, 102, 32, 116, 97, 98, 108, 101, 115, 39, 10, 32, 32, 45, 45, 32, 95, 76, 73, 67, 69, 78, 83, 69, 32, 61, 32, 91, 91, 10, 32, 32, 45, 45, 32, 32, 32, 77, 73, 84, 32, 76, 73, 67, 69, 78, 83, 69, 10, 10, 32, 32, 45, 45, 32, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 99, 41, 32, 50, 48, 49, 51, 32, 69, 110, 114, 105, 113, 117, 101, 32, 71, 97, 114, 99, 195, 173, 97, 32, 67, 111, 116, 97, 10, 10, 32, 32, 45, 45, 32, 32, 32, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 105, 115, 32, 104, 101, 114, 101, 98, 121, 32, 103, 114, 97, 110, 116, 101, 100, 44, 32, 102, 114, 101, 101, 32, 111, 102, 32, 99, 104, 97, 114, 103, 101, 44, 32, 116, 111, 32, 97, 110, 121, 32, 112, 101, 114, 115, 111, 110, 32, 111, 98, 116, 97, 105, 110, 105, 110, 103, 32, 97, 10, 32, 32, 45, 45, 32, 32, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 105, 115, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 97, 110, 100, 32, 97, 115, 115, 111, 99, 105, 97, 116, 101, 100, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 105, 108, 101, 115, 32, 40, 116, 104, 101, 10, 32, 32, 45, 45, 32, 32, 32, 34, 83, 111, 102, 116, 119, 97, 114, 101, 34, 41, 44, 32, 116, 111, 32, 100, 101, 97, 108, 32, 105, 110, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 10, 32, 32, 45, 45, 32, 32, 32, 119, 105, 116, 104, 111, 117, 116, 32, 108, 105, 109, 105, 116, 97, 116, 105, 111, 110, 32, 116, 104, 101, 32, 114, 105, 103, 104, 116, 115, 32, 116, 111, 32, 117, 115, 101, 44, 32, 99, 111, 112, 121, 44, 32, 109, 111, 100, 105, 102, 121, 44, 32, 109, 101, 114, 103, 101, 44, 32, 112, 117, 98, 108, 105, 115, 104, 44, 10, 32, 32, 45, 45, 32, 32, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 44, 32, 115, 117, 98, 108, 105, 99, 101, 110, 115, 101, 44, 32, 97, 110, 100, 47, 111, 114, 32, 115, 101, 108, 108, 32, 99, 111, 112, 105, 101, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 44, 32, 97, 110, 100, 32, 116, 111, 10, 32, 32, 45, 45, 32, 32, 32, 112, 101, 114, 109, 105, 116, 32, 112, 101, 114, 115, 111, 110, 115, 32, 116, 111, 32, 119, 104, 111, 109, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 105, 115, 32, 102, 117, 114, 110, 105, 115, 104, 101, 100, 32, 116, 111, 32, 100, 111, 32, 115, 111, 44, 32, 115, 117, 98, 106, 101, 99, 116, 32, 116, 111, 10, 32, 32, 45, 45, 32, 32, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 58, 10, 10, 32, 32, 45, 45, 32, 32, 32, 84, 104, 101, 32, 97, 98, 111, 118, 101, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 110, 111, 116, 105, 99, 101, 32, 97, 110, 100, 32, 116, 104, 105, 115, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 110, 111, 116, 105, 99, 101, 32, 115, 104, 97, 108, 108, 32, 98, 101, 32, 105, 110, 99, 108, 117, 100, 101, 100, 10, 32, 32, 45, 45, 32, 32, 32, 105, 110, 32, 97, 108, 108, 32, 99, 111, 112, 105, 101, 115, 32, 111, 114, 32, 115, 117, 98, 115, 116, 97, 110, 116, 105, 97, 108, 32, 112, 111, 114, 116, 105, 111, 110, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 46, 10, 10, 32, 32, 45, 45, 32, 32, 32, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 73, 83, 32, 80, 82, 79, 86, 73, 68, 69, 68, 32, 34, 65, 83, 32, 73, 83, 34, 44, 32, 87, 73, 84, 72, 79, 85, 84, 32, 87, 65, 82, 82, 65, 78, 84, 89, 32, 79, 70, 32, 65, 78, 89, 32, 75, 73, 78, 68, 44, 32, 69, 88, 80, 82, 69, 83, 83, 10, 32, 32, 45, 45, 32, 32, 32, 79, 82, 32, 73, 77, 80, 76, 73, 69, 68, 44, 32, 73, 78, 67, 76, 85, 68, 73, 78, 71, 32, 66, 85, 84, 32, 78, 79, 84, 32, 76, 73, 77, 73, 84, 69, 68, 32, 84, 79, 32, 84, 72, 69, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 79, 70, 10, 32, 32, 45, 45, 32, 32, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 44, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 32, 65, 78, 68, 32, 78, 79, 78, 73, 78, 70, 82, 73, 78, 71, 69, 77, 69, 78, 84, 46, 10, 32, 32, 45, 45, 32, 32, 32, 73, 78, 32, 78, 79, 32, 69, 86, 69, 78, 84, 32, 83, 72, 65, 76, 76, 32, 84, 72, 69, 32, 65, 85, 84, 72, 79, 82, 83, 32, 79, 82, 32, 67, 79, 80, 89, 82, 73, 71, 72, 84, 32, 72, 79, 76, 68, 69, 82, 83, 32, 66, 69, 32, 76, 73, 65, 66, 76, 69, 32, 70, 79, 82, 32, 65, 78, 89, 10, 32, 32, 45, 45, 32, 32, 32, 67, 76, 65, 73, 77, 44, 32, 68, 65, 77, 65, 71, 69, 83, 32, 79, 82, 32, 79, 84, 72, 69, 82, 32, 76, 73, 65, 66, 73, 76, 73, 84, 89, 44, 32, 87, 72, 69, 84, 72, 69, 82, 32, 73, 78, 32, 65, 78, 32, 65, 67, 84, 73, 79, 78, 32, 79, 70, 32, 67, 79, 78, 84, 82, 65, 67, 84, 44, 10, 32, 32, 45, 45, 32, 32, 32, 84, 79, 82, 84, 32, 79, 82, 32, 79, 84, 72, 69, 82, 87, 73, 83, 69, 44, 32, 65, 82, 73, 83, 73, 78, 71, 32, 70, 82, 79, 77, 44, 32, 79, 85, 84, 32, 79, 70, 32, 79, 82, 32, 73, 78, 32, 67, 79, 78, 78, 69, 67, 84, 73, 79, 78, 32, 87, 73, 84, 72, 32, 84, 72, 69, 10, 32, 32, 45, 45, 32, 32, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 79, 82, 32, 84, 72, 69, 32, 85, 83, 69, 32, 79, 82, 32, 79, 84, 72, 69, 82, 32, 68, 69, 65, 76, 73, 78, 71, 83, 32, 73, 78, 32, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 46, 10, 32, 32, 45, 45, 32, 93, 93, 10, 125, 10, 10, 108, 111, 99, 97, 108, 32, 116, 111, 115, 116, 114, 105, 110, 103, 32, 61, 32, 116, 111, 115, 116, 114, 105, 110, 103, 10, 10, 105, 110, 115, 112, 101, 99, 116, 46, 75, 69, 89, 32, 32, 32, 32, 32, 32, 32, 61, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 123, 125, 44, 32, 123, 95, 95, 116, 111, 115, 116, 114, 105, 110, 103, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 39, 105, 110, 115, 112, 101, 99, 116, 46, 75, 69, 89, 39, 32, 101, 110, 100, 125, 41, 10, 105, 110, 115, 112, 101, 99, 116, 46, 77, 69, 84, 65, 84, 65, 66, 76, 69, 32, 61, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 123, 125, 44, 32, 123, 95, 95, 116, 111, 115, 116, 114, 105, 110, 103, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 114, 101, 116, 117, 114, 110, 32, 39, 105, 110, 115, 112, 101, 99, 116, 46, 77, 69, 84, 65, 84, 65, 66, 76, 69, 39, 32, 101, 110, 100, 125, 41, 10, 10, 45, 45, 32, 65, 112, 111, 115, 116, 114, 111, 112, 104, 105, 122, 101, 115, 32, 116, 104, 101, 32, 115, 116, 114, 105, 110, 103, 32, 105, 102, 32, 105, 116, 32, 104, 97, 115, 32, 113, 117, 111, 116, 101, 115, 44, 32, 98, 117, 116, 32, 110, 111, 116, 32, 97, 112, 104, 111, 115, 116, 114, 111, 112, 104, 101, 115, 10, 45, 45, 32, 79, 116, 104, 101, 114, 119, 105, 115, 101, 44, 32, 105, 116, 32, 114, 101, 116, 117, 114, 110, 115, 32, 97, 32, 114, 101, 103, 117, 108, 97, 114, 32, 113, 117, 111, 116, 101, 100, 32, 115, 116, 114, 105, 110, 103, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 109, 97, 114, 116, 81, 117, 111, 116, 101, 40, 115, 116, 114, 41, 10, 32, 32, 105, 102, 32, 115, 116, 114, 58, 109, 97, 116, 99, 104, 40, 39, 34, 39, 41, 32, 97, 110, 100, 32, 110, 111, 116, 32, 115, 116, 114, 58, 109, 97, 116, 99, 104, 40, 34, 39, 34, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 34, 39, 34, 32, 46, 46, 32, 115, 116, 114, 32, 46, 46, 32, 34, 39, 34, 10, 32, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 39, 34, 39, 32, 46, 46, 32, 115, 116, 114, 58, 103, 115, 117, 98, 40, 39, 34, 39, 44, 32, 39, 92, 92, 34, 39, 41, 32, 46, 46, 32, 39, 34, 39, 10, 101, 110, 100, 10, 10, 45, 45, 32, 92, 97, 32, 61, 62, 32, 39, 92, 92, 97, 39, 44, 32, 92, 48, 32, 61, 62, 32, 39, 92, 92, 48, 39, 44, 32, 51, 49, 32, 61, 62, 32, 39, 92, 51, 49, 39, 10, 108, 111, 99, 97, 108, 32, 115, 104, 111, 114, 116, 67, 111, 110, 116, 114, 111, 108, 67, 104, 97, 114, 69, 115, 99, 97, 112, 101, 115, 32, 61, 32, 123, 10, 32, 32, 91, 34, 92, 97, 34, 93, 32, 61, 32, 34, 92, 92, 97, 34, 44, 32, 32, 91, 34, 92, 98, 34, 93, 32, 61, 32, 34, 92, 92, 98, 34, 44, 32, 91, 34, 92, 102, 34, 93, 32, 61, 32, 34, 92, 92, 102, 34, 44, 32, 91, 34, 92, 110, 34, 93, 32, 61, 32, 34, 92, 92, 110, 34, 44, 10, 32, 32, 91, 34, 92, 114, 34, 93, 32, 61, 32, 34, 92, 92, 114, 34, 44, 32, 32, 91, 34, 92, 116, 34, 93, 32, 61, 32, 34, 92, 92, 116, 34, 44, 32, 91, 34, 92, 118, 34, 93, 32, 61, 32, 34, 92, 92, 118, 34, 10, 125, 10, 108, 111, 99, 97, 108, 32, 108, 111, 110, 103, 67, 111, 110, 116, 114, 111, 108, 67, 104, 97, 114, 69, 115, 99, 97, 112, 101, 115, 32, 61, 32, 123, 125, 32, 45, 45, 32, 92, 97, 32, 61, 62, 32, 110, 105, 108, 44, 32, 92, 48, 32, 61, 62, 32, 92, 48, 48, 48, 44, 32, 51, 49, 32, 61, 62, 32, 92, 48, 51, 49, 10, 102, 111, 114, 32, 105, 61, 48, 44, 32, 51, 49, 32, 100, 111, 10, 32, 32, 108, 111, 99, 97, 108, 32, 99, 104, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 99, 104, 97, 114, 40, 105, 41, 10, 32, 32, 105, 102, 32, 110, 111, 116, 32, 115, 104, 111, 114, 116, 67, 111, 110, 116, 114, 111, 108, 67, 104, 97, 114, 69, 115, 99, 97, 112, 101, 115, 91, 99, 104, 93, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 115, 104, 111, 114, 116, 67, 111, 110, 116, 114, 111, 108, 67, 104, 97, 114, 69, 115, 99, 97, 112, 101, 115, 91, 99, 104, 93, 32, 61, 32, 34, 92, 92, 34, 46, 46, 105, 10, 32, 32, 32, 32, 108, 111, 110, 103, 67, 111, 110, 116, 114, 111, 108, 67, 104, 97, 114, 69, 115, 99, 97, 112, 101, 115, 91, 99, 104, 93, 32, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 102, 111, 114, 109, 97, 116, 40, 34, 92, 92, 37, 48, 51, 100, 34, 44, 32, 105, 41, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 115, 99, 97, 112, 101, 40, 115, 116, 114, 41, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 115, 116, 114, 58, 103, 115, 117, 98, 40, 34, 92, 92, 34, 44, 32, 34, 92, 92, 92, 92, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 58, 103, 115, 117, 98, 40, 34, 40, 37, 99, 41, 37, 102, 91, 48, 45, 57, 93, 34, 44, 32, 108, 111, 110, 103, 67, 111, 110, 116, 114, 111, 108, 67, 104, 97, 114, 69, 115, 99, 97, 112, 101, 115, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 58, 103, 115, 117, 98, 40, 34, 37, 99, 34, 44, 32, 115, 104, 111, 114, 116, 67, 111, 110, 116, 114, 111, 108, 67, 104, 97, 114, 69, 115, 99, 97, 112, 101, 115, 41, 41, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 40, 115, 116, 114, 41, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 121, 112, 101, 40, 115, 116, 114, 41, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 97, 110, 100, 32, 115, 116, 114, 58, 109, 97, 116, 99, 104, 40, 32, 34, 94, 91, 95, 37, 97, 93, 91, 95, 37, 97, 37, 100, 93, 42, 36, 34, 32, 41, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 83, 101, 113, 117, 101, 110, 99, 101, 75, 101, 121, 40, 107, 44, 32, 115, 101, 113, 117, 101, 110, 99, 101, 76, 101, 110, 103, 116, 104, 41, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 121, 112, 101, 40, 107, 41, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 10, 32, 32, 32, 32, 32, 97, 110, 100, 32, 49, 32, 60, 61, 32, 107, 10, 32, 32, 32, 32, 32, 97, 110, 100, 32, 107, 32, 60, 61, 32, 115, 101, 113, 117, 101, 110, 99, 101, 76, 101, 110, 103, 116, 104, 10, 32, 32, 32, 32, 32, 97, 110, 100, 32, 109, 97, 116, 104, 46, 102, 108, 111, 111, 114, 40, 107, 41, 32, 61, 61, 32, 107, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 100, 101, 102, 97, 117, 108, 116, 84, 121, 112, 101, 79, 114, 100, 101, 114, 115, 32, 61, 32, 123, 10, 32, 32, 91, 39, 110, 117, 109, 98, 101, 114, 39, 93, 32, 32, 32, 61, 32, 49, 44, 32, 91, 39, 98, 111, 111, 108, 101, 97, 110, 39, 93, 32, 32, 61, 32, 50, 44, 32, 91, 39, 115, 116, 114, 105, 110, 103, 39, 93, 32, 61, 32, 51, 44, 32, 91, 39, 116, 97, 98, 108, 101, 39, 93, 32, 61, 32, 52, 44, 10, 32, 32, 91, 39, 102, 117, 110, 99, 116, 105, 111, 110, 39, 93, 32, 61, 32, 53, 44, 32, 91, 39, 117, 115, 101, 114, 100, 97, 116, 97, 39, 93, 32, 61, 32, 54, 44, 32, 91, 39, 116, 104, 114, 101, 97, 100, 39, 93, 32, 61, 32, 55, 10, 125, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 111, 114, 116, 75, 101, 121, 115, 40, 97, 44, 32, 98, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 116, 97, 44, 32, 116, 98, 32, 61, 32, 116, 121, 112, 101, 40, 97, 41, 44, 32, 116, 121, 112, 101, 40, 98, 41, 10, 10, 32, 32, 45, 45, 32, 115, 116, 114, 105, 110, 103, 115, 32, 97, 110, 100, 32, 110, 117, 109, 98, 101, 114, 115, 32, 97, 114, 101, 32, 115, 111, 114, 116, 101, 100, 32, 110, 117, 109, 101, 114, 105, 99, 97, 108, 108, 121, 47, 97, 108, 112, 104, 97, 98, 101, 116, 105, 99, 97, 108, 108, 121, 10, 32, 32, 105, 102, 32, 116, 97, 32, 61, 61, 32, 116, 98, 32, 97, 110, 100, 32, 40, 116, 97, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 111, 114, 32, 116, 97, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 97, 32, 60, 32, 98, 32, 101, 110, 100, 10, 10, 32, 32, 108, 111, 99, 97, 108, 32, 100, 116, 97, 44, 32, 100, 116, 98, 32, 61, 32, 100, 101, 102, 97, 117, 108, 116, 84, 121, 112, 101, 79, 114, 100, 101, 114, 115, 91, 116, 97, 93, 44, 32, 100, 101, 102, 97, 117, 108, 116, 84, 121, 112, 101, 79, 114, 100, 101, 114, 115, 91, 116, 98, 93, 10, 32, 32, 45, 45, 32, 84, 119, 111, 32, 100, 101, 102, 97, 117, 108, 116, 32, 116, 121, 112, 101, 115, 32, 97, 114, 101, 32, 99, 111, 109, 112, 97, 114, 101, 100, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 32, 116, 111, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 84, 121, 112, 101, 79, 114, 100, 101, 114, 115, 32, 116, 97, 98, 108, 101, 10, 32, 32, 105, 102, 32, 100, 116, 97, 32, 97, 110, 100, 32, 100, 116, 98, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 101, 102, 97, 117, 108, 116, 84, 121, 112, 101, 79, 114, 100, 101, 114, 115, 91, 116, 97, 93, 32, 60, 32, 100, 101, 102, 97, 117, 108, 116, 84, 121, 112, 101, 79, 114, 100, 101, 114, 115, 91, 116, 98, 93, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 100, 116, 97, 32, 32, 32, 32, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 32, 32, 45, 45, 32, 100, 101, 102, 97, 117, 108, 116, 32, 116, 121, 112, 101, 115, 32, 98, 101, 102, 111, 114, 101, 32, 99, 117, 115, 116, 111, 109, 32, 111, 110, 101, 115, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 100, 116, 98, 32, 32, 32, 32, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 32, 45, 45, 32, 99, 117, 115, 116, 111, 109, 32, 116, 121, 112, 101, 115, 32, 97, 102, 116, 101, 114, 32, 100, 101, 102, 97, 117, 108, 116, 32, 111, 110, 101, 115, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 45, 45, 32, 99, 117, 115, 116, 111, 109, 32, 116, 121, 112, 101, 115, 32, 97, 114, 101, 32, 115, 111, 114, 116, 101, 100, 32, 111, 117, 116, 32, 97, 108, 112, 104, 97, 98, 101, 116, 105, 99, 97, 108, 108, 121, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 97, 32, 60, 32, 116, 98, 10, 101, 110, 100, 10, 10, 45, 45, 32, 70, 111, 114, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 114, 101, 97, 115, 111, 110, 115, 44, 32, 116, 104, 101, 32, 98, 101, 104, 97, 118, 105, 111, 114, 32, 111, 102, 32, 114, 97, 119, 108, 101, 110, 32, 38, 32, 35, 32, 105, 115, 32, 34, 117, 110, 100, 101, 102, 105, 110, 101, 100, 34, 32, 119, 104, 101, 110, 10, 45, 45, 32, 116, 97, 98, 108, 101, 115, 32, 97, 114, 101, 110, 39, 116, 32, 112, 117, 114, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 115, 46, 32, 83, 111, 32, 119, 101, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 32, 111, 117, 114, 32, 111, 119, 110, 32, 35, 32, 111, 112, 101, 114, 97, 116, 111, 114, 46, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 83, 101, 113, 117, 101, 110, 99, 101, 76, 101, 110, 103, 116, 104, 40, 116, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 108, 101, 110, 32, 61, 32, 49, 10, 32, 32, 108, 111, 99, 97, 108, 32, 118, 32, 61, 32, 114, 97, 119, 103, 101, 116, 40, 116, 44, 108, 101, 110, 41, 10, 32, 32, 119, 104, 105, 108, 101, 32, 118, 32, 126, 61, 32, 110, 105, 108, 32, 100, 111, 10, 32, 32, 32, 32, 108, 101, 110, 32, 61, 32, 108, 101, 110, 32, 43, 32, 49, 10, 32, 32, 32, 32, 118, 32, 61, 32, 114, 97, 119, 103, 101, 116, 40, 116, 44, 108, 101, 110, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 108, 101, 110, 32, 45, 32, 49, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 78, 111, 110, 83, 101, 113, 117, 101, 110, 116, 105, 97, 108, 75, 101, 121, 115, 40, 116, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 107, 101, 121, 115, 32, 61, 32, 123, 125, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 101, 113, 117, 101, 110, 99, 101, 76, 101, 110, 103, 116, 104, 32, 61, 32, 103, 101, 116, 83, 101, 113, 117, 101, 110, 99, 101, 76, 101, 110, 103, 116, 104, 40, 116, 41, 10, 32, 32, 102, 111, 114, 32, 107, 44, 95, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 116, 41, 32, 100, 111, 10, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 105, 115, 83, 101, 113, 117, 101, 110, 99, 101, 75, 101, 121, 40, 107, 44, 32, 115, 101, 113, 117, 101, 110, 99, 101, 76, 101, 110, 103, 116, 104, 41, 32, 116, 104, 101, 110, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 107, 101, 121, 115, 44, 32, 107, 41, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 116, 97, 98, 108, 101, 46, 115, 111, 114, 116, 40, 107, 101, 121, 115, 44, 32, 115, 111, 114, 116, 75, 101, 121, 115, 41, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 107, 101, 121, 115, 44, 32, 115, 101, 113, 117, 101, 110, 99, 101, 76, 101, 110, 103, 116, 104, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 84, 111, 83, 116, 114, 105, 110, 103, 82, 101, 115, 117, 108, 116, 83, 97, 102, 101, 108, 121, 40, 116, 44, 32, 109, 116, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 95, 95, 116, 111, 115, 116, 114, 105, 110, 103, 32, 61, 32, 116, 121, 112, 101, 40, 109, 116, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 97, 110, 100, 32, 114, 97, 119, 103, 101, 116, 40, 109, 116, 44, 32, 39, 95, 95, 116, 111, 115, 116, 114, 105, 110, 103, 39, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 116, 114, 44, 32, 111, 107, 10, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 95, 95, 116, 111, 115, 116, 114, 105, 110, 103, 41, 32, 61, 61, 32, 39, 102, 117, 110, 99, 116, 105, 111, 110, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 111, 107, 44, 32, 115, 116, 114, 32, 61, 32, 112, 99, 97, 108, 108, 40, 95, 95, 116, 111, 115, 116, 114, 105, 110, 103, 44, 32, 116, 41, 10, 32, 32, 32, 32, 115, 116, 114, 32, 61, 32, 111, 107, 32, 97, 110, 100, 32, 115, 116, 114, 32, 111, 114, 32, 39, 101, 114, 114, 111, 114, 58, 32, 39, 32, 46, 46, 32, 116, 111, 115, 116, 114, 105, 110, 103, 40, 115, 116, 114, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 115, 116, 114, 41, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 97, 110, 100, 32, 35, 115, 116, 114, 32, 62, 32, 48, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 115, 116, 114, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 117, 110, 116, 84, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 40, 116, 44, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 41, 10, 32, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 32, 61, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 32, 111, 114, 32, 123, 125, 10, 10, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 116, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 91, 116, 93, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 91, 116, 93, 32, 61, 32, 49, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 116, 41, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 117, 110, 116, 84, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 40, 107, 44, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 117, 110, 116, 84, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 40, 118, 44, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 99, 111, 117, 110, 116, 84, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 40, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 116, 41, 44, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 91, 116, 93, 32, 61, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 91, 116, 93, 32, 43, 32, 49, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 99, 111, 112, 121, 83, 101, 113, 117, 101, 110, 99, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 112, 121, 44, 32, 108, 101, 110, 32, 61, 32, 123, 125, 44, 32, 35, 115, 10, 32, 32, 102, 111, 114, 32, 105, 61, 49, 44, 32, 108, 101, 110, 32, 100, 111, 32, 99, 111, 112, 121, 91, 105, 93, 32, 61, 32, 115, 91, 105, 93, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 99, 111, 112, 121, 44, 32, 108, 101, 110, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 107, 101, 80, 97, 116, 104, 40, 112, 97, 116, 104, 44, 32, 46, 46, 46, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 107, 101, 121, 115, 32, 61, 32, 123, 46, 46, 46, 125, 10, 32, 32, 108, 111, 99, 97, 108, 32, 110, 101, 119, 80, 97, 116, 104, 44, 32, 108, 101, 110, 32, 61, 32, 99, 111, 112, 121, 83, 101, 113, 117, 101, 110, 99, 101, 40, 112, 97, 116, 104, 41, 10, 32, 32, 102, 111, 114, 32, 105, 61, 49, 44, 32, 35, 107, 101, 121, 115, 32, 100, 111, 10, 32, 32, 32, 32, 110, 101, 119, 80, 97, 116, 104, 91, 108, 101, 110, 32, 43, 32, 105, 93, 32, 61, 32, 107, 101, 121, 115, 91, 105, 93, 10, 32, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 101, 119, 80, 97, 116, 104, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 114, 111, 99, 101, 115, 115, 82, 101, 99, 117, 114, 115, 105, 118, 101, 40, 112, 114, 111, 99, 101, 115, 115, 44, 32, 105, 116, 101, 109, 44, 32, 112, 97, 116, 104, 44, 32, 118, 105, 115, 105, 116, 101, 100, 41, 10, 32, 32, 32, 32, 105, 102, 32, 105, 116, 101, 109, 32, 61, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 118, 105, 115, 105, 116, 101, 100, 91, 105, 116, 101, 109, 93, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 118, 105, 115, 105, 116, 101, 100, 91, 105, 116, 101, 109, 93, 32, 101, 110, 100, 10, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 32, 61, 32, 112, 114, 111, 99, 101, 115, 115, 40, 105, 116, 101, 109, 44, 32, 112, 97, 116, 104, 41, 10, 10, 32, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 112, 114, 111, 99, 101, 115, 115, 101, 100, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 67, 111, 112, 121, 32, 61, 32, 123, 125, 10, 32, 32, 32, 32, 32, 32, 118, 105, 115, 105, 116, 101, 100, 91, 105, 116, 101, 109, 93, 32, 61, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 67, 111, 112, 121, 10, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 75, 101, 121, 10, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 112, 114, 111, 99, 101, 115, 115, 101, 100, 41, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 75, 101, 121, 32, 61, 32, 112, 114, 111, 99, 101, 115, 115, 82, 101, 99, 117, 114, 115, 105, 118, 101, 40, 112, 114, 111, 99, 101, 115, 115, 44, 32, 107, 44, 32, 109, 97, 107, 101, 80, 97, 116, 104, 40, 112, 97, 116, 104, 44, 32, 107, 44, 32, 105, 110, 115, 112, 101, 99, 116, 46, 75, 69, 89, 41, 44, 32, 118, 105, 115, 105, 116, 101, 100, 41, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 75, 101, 121, 32, 126, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 67, 111, 112, 121, 91, 112, 114, 111, 99, 101, 115, 115, 101, 100, 75, 101, 121, 93, 32, 61, 32, 112, 114, 111, 99, 101, 115, 115, 82, 101, 99, 117, 114, 115, 105, 118, 101, 40, 112, 114, 111, 99, 101, 115, 115, 44, 32, 118, 44, 32, 109, 97, 107, 101, 80, 97, 116, 104, 40, 112, 97, 116, 104, 44, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 75, 101, 121, 41, 44, 32, 118, 105, 115, 105, 116, 101, 100, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 116, 32, 32, 61, 32, 112, 114, 111, 99, 101, 115, 115, 82, 101, 99, 117, 114, 115, 105, 118, 101, 40, 112, 114, 111, 99, 101, 115, 115, 44, 32, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 112, 114, 111, 99, 101, 115, 115, 101, 100, 41, 44, 32, 109, 97, 107, 101, 80, 97, 116, 104, 40, 112, 97, 116, 104, 44, 32, 105, 110, 115, 112, 101, 99, 116, 46, 77, 69, 84, 65, 84, 65, 66, 76, 69, 41, 44, 32, 118, 105, 115, 105, 116, 101, 100, 41, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 109, 116, 41, 32, 126, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 32, 109, 116, 32, 61, 32, 110, 105, 108, 32, 101, 110, 100, 32, 45, 45, 32, 105, 103, 110, 111, 114, 101, 32, 110, 111, 116, 32, 110, 105, 108, 47, 116, 97, 98, 108, 101, 32, 95, 95, 109, 101, 116, 97, 116, 97, 98, 108, 101, 32, 102, 105, 101, 108, 100, 10, 32, 32, 32, 32, 32, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 112, 114, 111, 99, 101, 115, 115, 101, 100, 67, 111, 112, 121, 44, 32, 109, 116, 41, 10, 32, 32, 32, 32, 32, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 32, 61, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 67, 111, 112, 121, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 112, 114, 111, 99, 101, 115, 115, 101, 100, 10, 101, 110, 100, 10, 10, 10, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 10, 108, 111, 99, 97, 108, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 32, 61, 32, 123, 125, 10, 108, 111, 99, 97, 108, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 95, 109, 116, 32, 61, 32, 123, 95, 95, 105, 110, 100, 101, 120, 32, 61, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 125, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 58, 112, 117, 116, 115, 40, 46, 46, 46, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 97, 114, 103, 115, 32, 32, 32, 61, 32, 123, 46, 46, 46, 125, 10, 32, 32, 108, 111, 99, 97, 108, 32, 98, 117, 102, 102, 101, 114, 32, 61, 32, 115, 101, 108, 102, 46, 98, 117, 102, 102, 101, 114, 10, 32, 32, 108, 111, 99, 97, 108, 32, 108, 101, 110, 32, 32, 32, 32, 61, 32, 35, 98, 117, 102, 102, 101, 114, 10, 32, 32, 102, 111, 114, 32, 105, 61, 49, 44, 32, 35, 97, 114, 103, 115, 32, 100, 111, 10, 32, 32, 32, 32, 108, 101, 110, 32, 61, 32, 108, 101, 110, 32, 43, 32, 49, 10, 32, 32, 32, 32, 98, 117, 102, 102, 101, 114, 91, 108, 101, 110, 93, 32, 61, 32, 97, 114, 103, 115, 91, 105, 93, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 58, 100, 111, 119, 110, 40, 102, 41, 10, 32, 32, 115, 101, 108, 102, 46, 108, 101, 118, 101, 108, 32, 61, 32, 115, 101, 108, 102, 46, 108, 101, 118, 101, 108, 32, 43, 32, 49, 10, 32, 32, 102, 40, 41, 10, 32, 32, 115, 101, 108, 102, 46, 108, 101, 118, 101, 108, 32, 61, 32, 115, 101, 108, 102, 46, 108, 101, 118, 101, 108, 32, 45, 32, 49, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 58, 116, 97, 98, 105, 102, 121, 40, 41, 10, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 115, 101, 108, 102, 46, 110, 101, 119, 108, 105, 110, 101, 44, 32, 115, 116, 114, 105, 110, 103, 46, 114, 101, 112, 40, 115, 101, 108, 102, 46, 105, 110, 100, 101, 110, 116, 44, 32, 115, 101, 108, 102, 46, 108, 101, 118, 101, 108, 41, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 58, 97, 108, 114, 101, 97, 100, 121, 86, 105, 115, 105, 116, 101, 100, 40, 118, 41, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 46, 105, 100, 115, 91, 118, 93, 32, 126, 61, 32, 110, 105, 108, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 58, 103, 101, 116, 73, 100, 40, 118, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 105, 100, 32, 61, 32, 115, 101, 108, 102, 46, 105, 100, 115, 91, 118, 93, 10, 32, 32, 105, 102, 32, 110, 111, 116, 32, 105, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 118, 32, 61, 32, 116, 121, 112, 101, 40, 118, 41, 10, 32, 32, 32, 32, 105, 100, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 40, 115, 101, 108, 102, 46, 109, 97, 120, 73, 100, 115, 91, 116, 118, 93, 32, 111, 114, 32, 48, 41, 32, 43, 32, 49, 10, 32, 32, 32, 32, 115, 101, 108, 102, 46, 109, 97, 120, 73, 100, 115, 91, 116, 118, 93, 32, 61, 32, 105, 100, 10, 32, 32, 32, 32, 115, 101, 108, 102, 46, 105, 100, 115, 91, 118, 93, 32, 32, 32, 32, 32, 61, 32, 105, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 111, 115, 116, 114, 105, 110, 103, 40, 105, 100, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 58, 112, 117, 116, 75, 101, 121, 40, 107, 41, 10, 32, 32, 105, 102, 32, 105, 115, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 40, 107, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 107, 41, 32, 101, 110, 100, 10, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 91, 34, 41, 10, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 86, 97, 108, 117, 101, 40, 107, 41, 10, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 93, 34, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 58, 112, 117, 116, 84, 97, 98, 108, 101, 40, 116, 44, 32, 101, 120, 112, 41, 10, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 105, 110, 115, 112, 101, 99, 116, 46, 75, 69, 89, 32, 111, 114, 32, 116, 32, 61, 61, 32, 105, 110, 115, 112, 101, 99, 116, 46, 77, 69, 84, 65, 84, 65, 66, 76, 69, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 116, 111, 115, 116, 114, 105, 110, 103, 40, 116, 41, 41, 10, 9, 45, 45, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 91, 34, 46, 46, 35, 116, 46, 46, 34, 93, 34, 41, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 101, 108, 102, 58, 97, 108, 114, 101, 97, 100, 121, 86, 105, 115, 105, 116, 101, 100, 40, 116, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 60, 116, 97, 98, 108, 101, 32, 39, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 73, 100, 40, 116, 41, 44, 32, 39, 62, 39, 41, 10, 9, 45, 45, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 91, 34, 46, 46, 35, 116, 46, 46, 34, 93, 34, 41, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 101, 108, 102, 46, 108, 101, 118, 101, 108, 32, 62, 61, 32, 115, 101, 108, 102, 46, 100, 101, 112, 116, 104, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 123, 46, 46, 46, 125, 39, 41, 10, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 105, 102, 32, 115, 101, 108, 102, 46, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 91, 116, 93, 32, 62, 32, 49, 32, 116, 104, 101, 110, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 60, 39, 44, 32, 115, 101, 108, 102, 58, 103, 101, 116, 73, 100, 40, 116, 41, 44, 32, 39, 62, 39, 41, 32, 101, 110, 100, 10, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 111, 110, 83, 101, 113, 117, 101, 110, 116, 105, 97, 108, 75, 101, 121, 115, 44, 32, 115, 101, 113, 117, 101, 110, 99, 101, 76, 101, 110, 103, 116, 104, 32, 61, 32, 103, 101, 116, 78, 111, 110, 83, 101, 113, 117, 101, 110, 116, 105, 97, 108, 75, 101, 121, 115, 40, 116, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 103, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 116, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 111, 83, 116, 114, 105, 110, 103, 82, 101, 115, 117, 108, 116, 32, 32, 32, 32, 61, 32, 103, 101, 116, 84, 111, 83, 116, 114, 105, 110, 103, 82, 101, 115, 117, 108, 116, 83, 97, 102, 101, 108, 121, 40, 116, 44, 32, 109, 116, 41, 10, 10, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 123, 39, 41, 10, 32, 32, 32, 32, 115, 101, 108, 102, 58, 100, 111, 119, 110, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 116, 111, 83, 116, 114, 105, 110, 103, 82, 101, 115, 117, 108, 116, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 32, 45, 45, 32, 39, 44, 32, 101, 115, 99, 97, 112, 101, 40, 116, 111, 83, 116, 114, 105, 110, 103, 82, 101, 115, 117, 108, 116, 41, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 115, 101, 113, 117, 101, 110, 99, 101, 76, 101, 110, 103, 116, 104, 32, 62, 61, 32, 49, 32, 116, 104, 101, 110, 32, 115, 101, 108, 102, 58, 116, 97, 98, 105, 102, 121, 40, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 117, 110, 116, 32, 61, 32, 48, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 105, 61, 49, 44, 32, 115, 101, 113, 117, 101, 110, 99, 101, 76, 101, 110, 103, 116, 104, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 99, 111, 117, 110, 116, 32, 62, 32, 48, 32, 116, 104, 101, 110, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 44, 39, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 32, 39, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 86, 97, 108, 117, 101, 40, 116, 91, 105, 93, 44, 32, 101, 120, 112, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 117, 110, 116, 32, 61, 32, 99, 111, 117, 110, 116, 32, 43, 32, 49, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 95, 44, 107, 32, 105, 110, 32, 105, 112, 97, 105, 114, 115, 40, 110, 111, 110, 83, 101, 113, 117, 101, 110, 116, 105, 97, 108, 75, 101, 121, 115, 41, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 99, 111, 117, 110, 116, 32, 62, 32, 48, 32, 116, 104, 101, 110, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 44, 39, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 116, 97, 98, 105, 102, 121, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 75, 101, 121, 40, 107, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 32, 61, 32, 39, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 86, 97, 108, 117, 101, 40, 116, 91, 107, 93, 44, 32, 101, 120, 112, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 117, 110, 116, 32, 61, 32, 99, 111, 117, 110, 116, 32, 43, 32, 49, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 109, 116, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 99, 111, 117, 110, 116, 32, 62, 32, 48, 32, 116, 104, 101, 110, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 44, 39, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 116, 97, 98, 105, 102, 121, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 60, 109, 101, 116, 97, 116, 97, 98, 108, 101, 62, 32, 61, 32, 39, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 86, 97, 108, 117, 101, 40, 109, 116, 44, 32, 101, 120, 112, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 101, 110, 100, 41, 10, 10, 32, 32, 32, 32, 105, 102, 32, 35, 110, 111, 110, 83, 101, 113, 117, 101, 110, 116, 105, 97, 108, 75, 101, 121, 115, 32, 62, 32, 48, 32, 111, 114, 32, 116, 121, 112, 101, 40, 109, 116, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 32, 45, 45, 32, 114, 101, 115, 117, 108, 116, 32, 105, 115, 32, 109, 117, 108, 116, 105, 45, 108, 105, 110, 101, 100, 46, 32, 74, 117, 115, 116, 105, 102, 121, 32, 99, 108, 111, 115, 105, 110, 103, 32, 125, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 116, 97, 98, 105, 102, 121, 40, 41, 10, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 101, 113, 117, 101, 110, 99, 101, 76, 101, 110, 103, 116, 104, 32, 62, 32, 48, 32, 116, 104, 101, 110, 32, 45, 45, 32, 97, 114, 114, 97, 121, 32, 116, 97, 98, 108, 101, 115, 32, 104, 97, 118, 101, 32, 111, 110, 101, 32, 101, 120, 116, 114, 97, 32, 115, 112, 97, 99, 101, 32, 98, 101, 102, 111, 114, 101, 32, 99, 108, 111, 115, 105, 110, 103, 32, 125, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 32, 39, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 125, 39, 41, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 58, 112, 117, 116, 86, 97, 108, 117, 101, 40, 118, 44, 32, 101, 120, 112, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 116, 118, 32, 61, 32, 116, 121, 112, 101, 40, 118, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 101, 120, 112, 111, 114, 116, 101, 114, 32, 61, 32, 101, 120, 112, 32, 111, 114, 32, 101, 120, 112, 111, 114, 116, 95, 111, 98, 106, 10, 32, 32, 105, 102, 32, 116, 118, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 115, 109, 97, 114, 116, 81, 117, 111, 116, 101, 40, 101, 115, 99, 97, 112, 101, 40, 118, 41, 41, 41, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 116, 118, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 111, 114, 32, 116, 118, 32, 61, 61, 32, 39, 98, 111, 111, 108, 101, 97, 110, 39, 32, 111, 114, 32, 116, 118, 32, 61, 61, 32, 39, 110, 105, 108, 39, 32, 111, 114, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 118, 32, 61, 61, 32, 39, 99, 100, 97, 116, 97, 39, 32, 111, 114, 32, 116, 118, 32, 61, 61, 32, 39, 99, 116, 121, 112, 101, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 116, 111, 115, 116, 114, 105, 110, 103, 40, 118, 41, 41, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 116, 118, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 105, 102, 32, 35, 118, 32, 62, 32, 48, 32, 116, 104, 101, 110, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 91, 34, 46, 46, 35, 118, 46, 46, 34, 93, 32, 34, 41, 32, 101, 110, 100, 10, 9, 32, 115, 101, 108, 102, 58, 112, 117, 116, 84, 97, 98, 108, 101, 40, 118, 44, 32, 101, 120, 112, 111, 114, 116, 101, 114, 41, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 118, 41, 32, 116, 104, 101, 110, 10, 9, 32, 105, 102, 32, 116, 118, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 34, 32, 116, 104, 101, 110, 10, 9, 9, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 111, 99, 116, 101, 116, 91, 34, 32, 46, 46, 32, 35, 118, 32, 46, 46, 32, 34, 93, 32, 34, 32, 46, 46, 32, 101, 120, 112, 111, 114, 116, 101, 114, 40, 118, 41, 41, 10, 9, 32, 101, 108, 115, 101, 105, 102, 32, 116, 118, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 98, 105, 103, 34, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 118, 58, 111, 99, 116, 101, 116, 40, 41, 10, 9, 9, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 105, 110, 116, 91, 34, 32, 46, 46, 32, 35, 105, 46, 46, 32, 34, 93, 32, 34, 32, 46, 46, 32, 101, 120, 112, 111, 114, 116, 101, 114, 40, 105, 41, 41, 10, 9, 32, 101, 108, 115, 101, 105, 102, 32, 116, 118, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 101, 99, 112, 34, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 118, 58, 111, 99, 116, 101, 116, 40, 41, 10, 9, 9, 105, 102, 32, 118, 32, 61, 61, 32, 34, 73, 110, 102, 105, 110, 105, 116, 121, 34, 32, 111, 114, 32, 118, 32, 61, 61, 32, 69, 67, 80, 46, 105, 110, 102, 105, 110, 105, 116, 121, 40, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 101, 99, 112, 91, 46, 46, 46, 93, 32, 40, 73, 110, 102, 105, 110, 105, 116, 121, 41, 34, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 101, 99, 112, 91, 34, 32, 46, 46, 32, 35, 105, 46, 46, 32, 34, 93, 32, 34, 32, 46, 46, 32, 101, 120, 112, 111, 114, 116, 101, 114, 40, 105, 41, 41, 10, 9, 9, 101, 110, 100, 10, 9, 32, 101, 108, 115, 101, 105, 102, 32, 116, 118, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 101, 99, 112, 50, 34, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 118, 58, 111, 99, 116, 101, 116, 40, 41, 10, 9, 9, 105, 102, 32, 118, 32, 61, 61, 32, 34, 73, 110, 102, 105, 110, 105, 116, 121, 34, 32, 111, 114, 32, 118, 32, 61, 61, 32, 69]);
fileData23.push.apply(fileData23, [67, 80, 50, 46, 105, 110, 102, 105, 110, 105, 116, 121, 40, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 101, 99, 112, 91, 46, 46, 46, 93, 32, 40, 73, 110, 102, 105, 110, 105, 116, 121, 41, 34, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 101, 99, 112, 50, 91, 34, 32, 46, 46, 35, 105, 46, 46, 32, 34, 93, 32, 34, 46, 46, 32, 101, 120, 112, 111, 114, 116, 101, 114, 40, 105, 41, 41, 10, 9, 9, 101, 110, 100, 10, 9, 32, 101, 108, 115, 101, 105, 102, 32, 116, 118, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 102, 112, 49, 50, 34, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 118, 58, 111, 99, 116, 101, 116, 40, 41, 10, 9, 9, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 102, 112, 49, 50, 91, 34, 32, 46, 46, 35, 105, 46, 46, 32, 34, 93, 32, 34, 46, 46, 32, 101, 120, 112, 111, 114, 116, 101, 114, 40, 105, 41, 41, 10, 9, 32, 101, 108, 115, 101, 105, 102, 32, 116, 118, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 101, 99, 100, 104, 34, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 112, 107, 32, 61, 32, 118, 58, 112, 117, 98, 108, 105, 99, 40, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 115, 107, 32, 61, 32, 118, 58, 112, 114, 105, 118, 97, 116, 101, 40, 41, 10, 9, 9, 105, 102, 32, 110, 111, 116, 32, 112, 107, 32, 97, 110, 100, 32, 110, 111, 116, 32, 115, 107, 32, 116, 104, 101, 110, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 101, 99, 100, 104, 32, 107, 101, 121, 114, 105, 110, 103, 32, 105, 115, 32, 101, 109, 112, 116, 121, 92, 110, 34, 41, 10, 9, 9, 101, 108, 115, 101, 10, 9, 9, 32, 32, 32, 105, 102, 32, 112, 107, 32, 116, 104, 101, 110, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 101, 99, 100, 104, 46, 112, 117, 98, 108, 105, 99, 91, 34, 46, 46, 35, 112, 107, 46, 46, 34, 93, 32, 34, 46, 46, 32, 101, 120, 112, 111, 114, 116, 101, 114, 40, 112, 107, 41, 46, 46, 34, 92, 110, 34, 41, 32, 101, 110, 100, 10, 9, 9, 32, 32, 32, 105, 102, 32, 115, 107, 32, 116, 104, 101, 110, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 34, 101, 99, 100, 104, 46, 112, 114, 105, 118, 97, 116, 101, 91, 34, 46, 46, 35, 115, 107, 46, 46, 34, 93, 32, 34, 46, 46, 32, 101, 120, 112, 111, 114, 116, 101, 114, 40, 115, 107, 41, 46, 46, 34, 92, 110, 34, 41, 32, 101, 110, 100, 10, 9, 9, 101, 110, 100, 10, 9, 32, 101, 108, 115, 101, 10, 9, 9, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 101, 120, 112, 111, 114, 116, 101, 114, 40, 118, 58, 111, 99, 116, 101, 116, 40, 41, 41, 41, 10, 9, 32, 101, 110, 100, 10, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 115, 101, 108, 102, 58, 112, 117, 116, 115, 40, 39, 60, 39, 44, 116, 118, 44, 39, 32, 39, 44, 115, 101, 108, 102, 58, 103, 101, 116, 73, 100, 40, 118, 41, 44, 39, 62, 39, 41, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 115, 112, 101, 99, 116, 46, 105, 110, 115, 112, 101, 99, 116, 40, 114, 111, 111, 116, 44, 32, 111, 112, 116, 105, 111, 110, 115, 41, 10, 32, 32, 111, 112, 116, 105, 111, 110, 115, 32, 32, 32, 32, 32, 32, 32, 61, 32, 111, 112, 116, 105, 111, 110, 115, 32, 111, 114, 32, 123, 125, 10, 10, 32, 32, 108, 111, 99, 97, 108, 32, 100, 101, 112, 116, 104, 32, 32, 32, 61, 32, 111, 112, 116, 105, 111, 110, 115, 46, 100, 101, 112, 116, 104, 32, 32, 32, 111, 114, 32, 109, 97, 116, 104, 46, 104, 117, 103, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 110, 101, 119, 108, 105, 110, 101, 32, 61, 32, 111, 112, 116, 105, 111, 110, 115, 46, 110, 101, 119, 108, 105, 110, 101, 32, 111, 114, 32, 39, 92, 110, 39, 10, 32, 32, 108, 111, 99, 97, 108, 32, 105, 110, 100, 101, 110, 116, 32, 32, 61, 32, 111, 112, 116, 105, 111, 110, 115, 46, 105, 110, 100, 101, 110, 116, 32, 32, 111, 114, 32, 39, 32, 32, 32, 32, 39, 10, 32, 32, 108, 111, 99, 97, 108, 32, 112, 114, 111, 99, 101, 115, 115, 32, 61, 32, 111, 112, 116, 105, 111, 110, 115, 46, 112, 114, 111, 99, 101, 115, 115, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 99, 104, 101, 109, 97, 32, 32, 61, 32, 111, 112, 116, 105, 111, 110, 115, 46, 115, 99, 104, 101, 109, 97, 32, 111, 114, 32, 102, 97, 108, 115, 101, 10, 32, 32, 105, 102, 32, 112, 114, 111, 99, 101, 115, 115, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 114, 111, 111, 116, 32, 61, 32, 112, 114, 111, 99, 101, 115, 115, 82, 101, 99, 117, 114, 115, 105, 118, 101, 40, 112, 114, 111, 99, 101, 115, 115, 44, 32, 114, 111, 111, 116, 44, 32, 123, 125, 44, 32, 123, 125, 41, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 108, 111, 99, 97, 108, 32, 105, 110, 115, 112, 101, 99, 116, 111, 114, 32, 61, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 123, 10, 32, 32, 32, 32, 100, 101, 112, 116, 104, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 100, 101, 112, 116, 104, 44, 10, 32, 32, 32, 32, 108, 101, 118, 101, 108, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 48, 44, 10, 32, 32, 32, 32, 98, 117, 102, 102, 101, 114, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 123, 125, 44, 10, 32, 32, 32, 32, 105, 100, 115, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 123, 125, 44, 10, 32, 32, 32, 32, 109, 97, 120, 73, 100, 115, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 123, 125, 44, 10, 32, 32, 32, 32, 110, 101, 119, 108, 105, 110, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 110, 101, 119, 108, 105, 110, 101, 44, 10, 32, 32, 32, 32, 105, 110, 100, 101, 110, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 105, 110, 100, 101, 110, 116, 44, 10, 32, 32, 32, 32, 116, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 32, 61, 32, 99, 111, 117, 110, 116, 84, 97, 98, 108, 101, 65, 112, 112, 101, 97, 114, 97, 110, 99, 101, 115, 40, 114, 111, 111, 116, 41, 10, 32, 32, 125, 44, 32, 73, 110, 115, 112, 101, 99, 116, 111, 114, 95, 109, 116, 41, 10, 10, 32, 32, 45, 45, 32, 111, 112, 116, 105, 111, 110, 32, 115, 99, 104, 101, 109, 97, 32, 111, 110, 108, 121, 32, 40, 100, 111, 110, 39, 116, 32, 112, 114, 105, 110, 116, 32, 99, 111, 110, 116, 101, 110, 116, 115, 41, 10, 32, 32, 105, 102, 32, 115, 99, 104, 101, 109, 97, 32, 116, 104, 101, 110, 10, 9, 32, 108, 111, 99, 97, 108, 32, 95, 102, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 95, 41, 9, 114, 101, 116, 117, 114, 110, 40, 34, 34, 41, 32, 101, 110, 100, 10, 9, 32, 105, 110, 115, 112, 101, 99, 116, 111, 114, 58, 112, 117, 116, 86, 97, 108, 117, 101, 40, 114, 111, 111, 116, 44, 32, 95, 102, 41, 10, 32, 32, 101, 108, 115, 101, 10, 9, 32, 105, 110, 115, 112, 101, 99, 116, 111, 114, 58, 112, 117, 116, 86, 97, 108, 117, 101, 40, 114, 111, 111, 116, 41, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 97, 98, 108, 101, 46, 99, 111, 110, 99, 97, 116, 40, 105, 110, 115, 112, 101, 99, 116, 111, 114, 46, 98, 117, 102, 102, 101, 114, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 119, 114, 97, 112, 112, 101, 114, 115, 32, 102, 111, 114, 32, 122, 101, 110, 114, 111, 111, 109, 32, 116, 121, 112, 101, 115, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 115, 112, 101, 99, 116, 46, 101, 110, 99, 111, 100, 101, 40, 105, 116, 101, 109, 41, 10, 32, 32, 32, 116, 32, 61, 32, 116, 121, 112, 101, 40, 105, 116, 101, 109, 41, 10, 32, 32, 32, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 41, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 101, 120, 112, 111, 114, 116, 95, 111, 98, 106, 40, 105, 116, 101, 109, 41, 10, 32, 32, 32, 45, 45, 32, 101, 108, 115, 101, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 101, 99, 112, 34, 32, 97, 110, 100, 32, 69, 67, 80, 46, 105, 115, 105, 110, 102, 40, 105, 116, 101, 109, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 9, 32, 114, 101, 116, 117, 114, 110, 32, 34, 73, 110, 102, 105, 110, 105, 116, 121, 34, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 9, 32, 114, 101, 116, 117, 114, 110, 32, 90, 69, 78, 58, 101, 120, 112, 111, 114, 116, 40, 105, 116, 101, 109, 41, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 105, 116, 101, 109, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 45, 45, 32, 97, 112, 112, 108, 121, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 119, 114, 97, 112, 112, 101, 114, 32, 116, 111, 32, 97, 108, 108, 32, 118, 97, 108, 117, 101, 115, 32, 111, 102, 32, 97, 32, 116, 97, 98, 108, 101, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 115, 112, 101, 99, 116, 46, 112, 114, 111, 99, 101, 115, 115, 40, 105, 116, 101, 109, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 112, 114, 111, 99, 101, 115, 115, 82, 101, 99, 117, 114, 115, 105, 118, 101, 40, 105, 110, 115, 112, 101, 99, 116, 46, 101, 110, 99, 111, 100, 101, 44, 32, 105, 116, 101, 109, 44, 32, 123, 125, 44, 32, 123, 125, 41, 10, 101, 110, 100, 10, 10, 45, 45, 45, 32, 80, 114, 105, 110, 116, 32, 97, 108, 108, 32, 99, 111, 110, 116, 101, 110, 116, 115, 32, 111, 102, 32, 97, 32, 116, 97, 98, 108, 101, 32, 105, 110, 32, 97, 32, 116, 114, 101, 101, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 44, 32, 119, 111, 114, 107, 115, 32, 119, 105, 116, 104, 10, 45, 45, 32, 99, 111, 109, 112, 108, 101, 120, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 115, 32, 97, 110, 100, 32, 112, 114, 105, 110, 116, 115, 32, 116, 111, 32, 83, 84, 68, 79, 85, 84, 46, 10, 45, 45, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 78, 83, 80, 69, 67, 84, 46, 112, 114, 105, 110, 116, 40, 111, 98, 106, 101, 99, 116, 41, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 111, 98, 106, 101, 99, 116, 32, 99, 111, 109, 112, 108, 101, 120, 32, 116, 97, 98, 108, 101, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 115, 112, 101, 99, 116, 46, 112, 114, 105, 110, 116, 40, 114, 111, 111, 116, 44, 32, 111, 112, 116, 105, 111, 110, 115, 41, 10, 32, 32, 32, 112, 114, 105, 110, 116, 40, 105, 110, 115, 112, 101, 99, 116, 46, 105, 110, 115, 112, 101, 99, 116, 40, 114, 111, 111, 116, 44, 32, 111, 112, 116, 105, 111, 110, 115, 41, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 111, 111, 116, 10, 101, 110, 100, 10, 10, 45, 45, 45, 32, 80, 114, 105, 110, 116, 32, 116, 104, 101, 32, 112, 114, 111, 116, 111, 116, 121, 112, 101, 32, 40, 110, 111, 32, 99, 111, 110, 116, 101, 110, 116, 115, 32, 111, 110, 108, 121, 32, 115, 99, 104, 101, 109, 97, 41, 32, 111, 102, 32, 97, 32, 116, 97, 98, 108, 101, 32, 105, 110, 32, 97, 32, 116, 114, 101, 101, 10, 45, 45, 45, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 111, 110, 44, 32, 119, 111, 114, 107, 115, 32, 119, 105, 116, 104, 32, 99, 111, 109, 112, 108, 101, 120, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 115, 32, 97, 110, 100, 32, 112, 114, 105, 110, 116, 115, 32, 116, 111, 10, 45, 45, 45, 32, 83, 84, 68, 79, 85, 84, 46, 10, 45, 45, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 78, 83, 80, 69, 67, 84, 46, 115, 99, 104, 101, 109, 97, 40, 111, 98, 106, 101, 99, 116, 41, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 111, 98, 106, 101, 99, 116, 32, 99, 111, 109, 112, 108, 101, 120, 32, 116, 97, 98, 108, 101, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 115, 112, 101, 99, 116, 46, 115, 99, 104, 101, 109, 97, 40, 114, 111, 111, 116, 44, 32, 111, 112, 116, 105, 111, 110, 115, 41, 10, 32, 32, 32, 119, 97, 114, 110, 40, 105, 110, 115, 112, 101, 99, 116, 46, 105, 110, 115, 112, 101, 99, 116, 40, 114, 111, 111, 116, 44, 32, 123, 32, 115, 99, 104, 101, 109, 97, 32, 61, 32, 116, 114, 117, 101, 32, 125, 41, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 111, 111, 116, 10, 101, 110, 100, 10, 10, 45, 45, 45, 32, 80, 114, 105, 110, 116, 32, 97, 108, 108, 32, 99, 111, 110, 116, 101, 110, 116, 115, 32, 111, 102, 32, 97, 32, 116, 97, 98, 108, 101, 32, 116, 111, 32, 83, 84, 68, 69, 82, 82, 46, 32, 87, 111, 114, 107, 115, 32, 115, 97, 109, 101, 32, 119, 97, 121, 32, 97, 115, 32, 64, 123, 112, 114, 105, 110, 116, 125, 46, 10, 45, 45, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 78, 83, 80, 69, 67, 84, 46, 119, 97, 114, 110, 40, 111, 98, 106, 101, 99, 116, 41, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 111, 98, 106, 101, 99, 116, 32, 99, 111, 109, 112, 108, 101, 120, 32, 116, 97, 98, 108, 101, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 110, 115, 112, 101, 99, 116, 46, 119, 97, 114, 110, 40, 114, 111, 111, 116, 44, 32, 111, 112, 116, 105, 111, 110, 115, 41, 10, 32, 32, 32, 119, 97, 114, 110, 40, 105, 110, 115, 112, 101, 99, 116, 46, 105, 110, 115, 112, 101, 99, 116, 40, 114, 111, 111, 116, 44, 32, 111, 112, 116, 105, 111, 110, 115, 41, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 111, 111, 116, 10, 101, 110, 100, 10, 10, 45, 45, 45, 32, 80, 114, 105, 110, 116, 32, 97, 108, 108, 32, 99, 111, 110, 116, 101, 110, 116, 115, 32, 111, 102, 32, 97, 32, 116, 97, 98, 108, 101, 32, 116, 111, 32, 83, 84, 68, 69, 82, 82, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 32, 115, 97, 109, 101, 32, 111, 98, 106, 101, 99, 116, 32, 97, 115, 10, 45, 45, 45, 32, 112, 97, 115, 115, 116, 104, 114, 111, 117, 103, 104, 46, 32, 87, 111, 114, 107, 115, 32, 115, 97, 109, 101, 32, 119, 97, 121, 32, 97, 115, 32, 64, 123, 112, 114, 105, 110, 116, 125, 46, 10, 45, 45, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 78, 83, 80, 69, 67, 84, 46, 115, 112, 121, 40, 111, 98, 106, 101, 99, 116, 41, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 111, 98, 106, 101, 99, 116, 32, 99, 111, 109, 112, 108, 101, 120, 32, 116, 97, 98, 108, 101, 32, 100, 97, 116, 97, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 10, 45, 45, 32, 64, 114, 101, 116, 117, 114, 110, 32, 111, 98, 106, 101, 99, 116, 32, 105, 116, 115, 101, 108, 102, 32, 40, 112, 97, 115, 115, 116, 104, 114, 111, 117, 103, 104, 32, 102, 111, 114, 32, 110, 101, 115, 116, 105, 110, 103, 41, 10, 105, 110, 115, 112, 101, 99, 116, 46, 115, 112, 121, 32, 61, 32, 105, 110, 115, 112, 101, 99, 116, 46, 119, 97, 114, 110, 10, 10, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 105, 110, 115, 112, 101, 99, 116, 44, 32, 123, 32, 95, 95, 99, 97, 108, 108, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 95, 44, 32, 46, 46, 46, 41, 32, 114, 101, 116, 117, 114, 110, 32, 105, 110, 115, 112, 101, 99, 116, 46, 112, 114, 105, 110, 116, 40, 46, 46, 46, 41, 32, 101, 110, 100, 32, 125, 41, 10, 10, 114, 101, 116, 117, 114, 110, 32, 105, 110, 115, 112, 101, 99, 116, 10, 10]);
Module['FS_createDataFile']('/', 'inspect.lua', fileData23, true, true, false);
var fileData24 = [];
fileData24.push.apply(fileData24, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 32, 82, 101, 118, 111, 107, 97, 98, 108, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 98, 97, 115, 101, 100, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 105, 110, 32, 90, 101, 110, 99, 111, 100, 101, 10, 10, 45, 45, 32, 67, 79, 67, 79, 78, 85, 84, 32, 99, 114, 121, 112, 116, 111, 32, 115, 99, 104, 101, 109, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 66, 76, 83, 32, 98, 97, 115, 101, 100, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 10, 10, 67, 79, 67, 79, 78, 85, 84, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 95, 111, 110, 99, 101, 40, 39, 99, 114, 121, 112, 116, 111, 95, 99, 111, 99, 111, 110, 117, 116, 39, 41, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 99, 111, 114, 101, 115, 95, 102, 40, 111, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 111, 98, 106, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 102, 117, 110, 44, 32, 111, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 40, 123, 10, 9, 9, 32, 112, 111, 115, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 112, 111, 115, 44, 32, 39, 108, 101, 102, 116, 39, 44, 32, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 32, 114, 105, 103, 104, 116, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 112, 111, 115, 44, 32, 39, 114, 105, 103, 104, 116, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 32, 125, 44, 10, 9, 9, 32, 110, 101, 103, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 110, 101, 103, 44, 32, 39, 108, 101, 102, 116, 39, 44, 32, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 32, 114, 105, 103, 104, 116, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 110, 101, 103, 44, 32, 39, 114, 105, 103, 104, 116, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 32, 125, 32, 125, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 112, 101, 116, 105, 116, 105, 111, 110, 10, 90, 69, 78, 46, 97, 100, 100, 95, 115, 99, 104, 101, 109, 97, 40, 123, 10, 32, 32, 32, 32, 32, 32, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 99, 111, 114, 101, 115, 32, 61, 32, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 99, 111, 114, 101, 115, 95, 102, 44, 10, 32, 32, 32, 32, 32, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 32, 117, 105, 100, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 39, 117, 105, 100, 39, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 111, 119, 110, 101, 114, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 111, 119, 110, 101, 114, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 99, 111, 114, 101, 115, 32, 61, 32, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 99, 111, 114, 101, 115, 95, 102, 40, 111, 98, 106, 46, 115, 99, 111, 114, 101, 115, 41, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 111, 98, 106, 46, 118, 107, 101, 121, 115, 32, 116, 104, 101, 110, 32, 114, 101, 115, 46, 118, 107, 101, 121, 115, 32, 61, 32, 118, 101, 114, 105, 102, 105, 101, 114, 95, 102, 40, 111, 98, 106, 46, 118, 107, 101, 121, 115, 41, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 111, 98, 106, 46, 108, 105, 115, 116, 32, 116, 104, 101, 110, 10, 9, 9, 9, 114, 101, 115, 46, 108, 105, 115, 116, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 41, 32, 114, 101, 116, 117, 114, 110, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 44, 34, 46, 34, 44, 69, 67, 80, 46, 110, 101, 119, 41, 32, 101, 110, 100, 44, 32, 111, 98, 106, 46, 108, 105, 115, 116, 32, 41, 10, 9, 9, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 44, 10, 32, 32, 32, 32, 32, 32, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 112, 114, 111, 111, 102, 32, 61, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 112, 114, 111, 111, 102, 95, 102, 40, 111, 98, 106, 46, 112, 114, 111, 111, 102, 41, 44, 10, 9, 9, 9, 9, 32, 32, 117, 105, 100, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 117, 105, 100, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 32, 32, 117, 105, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 117, 105, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 39, 41, 32, 125, 10, 9, 32, 32, 101, 110, 100, 44, 10, 10, 9, 32, 112, 101, 116, 105, 116, 105, 111, 110, 95, 116, 97, 108, 108, 121, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 100, 101, 99, 32, 61, 32, 123, 32, 125, 10, 9, 9, 100, 101, 99, 46, 110, 101, 103, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 100, 101, 99, 44, 32, 39, 110, 101, 103, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 10, 9, 9, 100, 101, 99, 46, 112, 111, 115, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 100, 101, 99, 44, 32, 39, 112, 111, 115, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 123, 32, 117, 105, 100, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 39, 117, 105, 100, 39, 41, 44, 10, 9, 9, 9, 9, 32, 99, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 99, 39, 44, 32, 73, 78, 84, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 32, 100, 101, 99, 32, 61, 32, 100, 101, 99, 44, 10, 9, 9, 9, 9, 32, 114, 120, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 114, 120, 39, 44, 32, 73, 78, 84, 46, 110, 101, 119, 41, 32, 125, 10, 9, 32, 101, 110, 100, 10, 10, 125, 41, 10, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 117, 105, 100, 41, 10, 9, 9, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 32, 61, 10, 9, 9, 32, 32, 32, 123, 32, 117, 105, 100, 32, 61, 32, 79, 46, 102, 114, 111, 109, 95, 115, 116, 114, 105, 110, 103, 40, 117, 105, 100, 41, 44, 10, 9, 9, 9, 32, 111, 119, 110, 101, 114, 32, 61, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 117, 98, 108, 105, 99, 44, 10, 9, 9, 9, 32, 115, 99, 111, 114, 101, 115, 32, 61, 32, 123, 32, 112, 111, 115, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 69, 67, 80, 46, 105, 110, 102, 105, 110, 105, 116, 121, 40, 41, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 114, 105, 103, 104, 116, 32, 61, 32, 69, 67, 80, 46, 105, 110, 102, 105, 110, 105, 116, 121, 40, 41, 32, 125, 44, 10, 9, 9, 9, 9, 9, 9, 110, 101, 103, 32, 61, 32, 123, 32, 108, 101, 102, 116, 32, 61, 32, 69, 67, 80, 46, 105, 110, 102, 105, 110, 105, 116, 121, 40, 41, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 114, 105, 103, 104, 116, 32, 61, 32, 69, 67, 80, 46, 105, 110, 102, 105, 110, 105, 116, 121, 40, 41, 32, 32, 125, 32, 125, 10, 9, 9, 32, 32, 32, 125, 10, 9, 9, 45, 45, 32, 103, 101, 110, 101, 114, 97, 116, 101, 32, 97, 110, 32, 69, 67, 68, 72, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 111, 102, 32, 116, 104, 101, 32, 40, 101, 110, 99, 111, 100, 101, 100, 41, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 117, 115, 105, 110, 103, 32, 116, 104, 101, 10, 9, 9, 45, 45, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 107, 101, 121, 115, 10, 9, 9, 45, 45, 32, 101, 99, 100, 104, 32, 61, 32, 69, 67, 68, 72, 46, 110, 101, 119, 40, 41, 10, 9, 9, 45, 45, 32, 101, 99, 100, 104, 58, 112, 114, 105, 118, 97, 116, 101, 40, 65, 67, 75, 46, 99, 114, 101, 100, 95, 107, 112, 46, 112, 114, 105, 118, 97, 116, 101, 41, 10, 9, 9, 45, 45, 32, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 101, 99, 100, 104, 95, 115, 105, 103, 110, 32, 61, 32, 123, 32, 101, 99, 100, 104, 58, 115, 105, 103, 110, 40, 77, 83, 71, 46, 112, 97, 99, 107, 40, 79, 85, 84, 46, 112, 101, 116, 105, 116, 105, 111, 110, 41, 41, 32, 125, 10, 9, 9, 45, 45, 32, 79, 85, 84, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 101, 99, 100, 104, 95, 115, 105, 103, 110, 32, 61, 32, 109, 97, 112, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 101, 99, 100, 104, 95, 115, 105, 103, 110, 44, 32, 104, 101, 120, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 118, 101, 114, 105, 102, 121, 32, 116, 104, 101, 32, 110, 101, 119, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 116, 111, 32, 98, 101, 32, 101, 109, 112, 116, 121, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 69, 67, 80, 46, 105, 115, 105, 110, 102, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 108, 101, 102, 116, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 101, 119, 32, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 112, 111, 115, 105, 116, 105, 118, 101, 32, 108, 101, 102, 116, 32, 115, 99, 111, 114, 101, 32, 105, 115, 32, 110, 111, 116, 32, 122, 101, 114, 111, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 69, 67, 80, 46, 105, 115, 105, 110, 102, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 114, 105, 103, 104, 116, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 101, 119, 32, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 112, 111, 115, 105, 116, 105, 118, 101, 32, 114, 105, 103, 104, 116, 32, 115, 99, 111, 114, 101, 32, 105, 115, 32, 110, 111, 116, 32, 122, 101, 114, 111, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 69, 67, 80, 46, 105, 115, 105, 110, 102, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 108, 101, 102, 116, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 101, 119, 32, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 110, 101, 103, 97, 116, 105, 118, 101, 32, 108, 101, 102, 116, 32, 115, 99, 111, 114, 101, 32, 105, 115, 32, 110, 111, 116, 32, 122, 101, 114, 111, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 69, 67, 80, 46, 105, 115, 105, 110, 102, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 114, 105, 103, 104, 116, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 110, 101, 119, 32, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 110, 101, 103, 97, 116, 105, 118, 101, 32, 114, 105, 103, 104, 116, 32, 115, 99, 111, 114, 101, 32, 105, 115, 32, 110, 111, 116, 32, 122, 101, 114, 111, 34, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 117, 105, 100, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 115, 44, 32, 34, 86, 101, 114, 105, 102, 105, 101, 114, 32, 111, 102, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 100, 32, 105, 115, 115, 117, 101, 114, 32, 107, 101, 121, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 105, 118, 97, 116, 101, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 44, 32, 34, 83, 105, 103, 110, 101, 100, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 84, 104, 101, 116, 97, 10, 9, 9, 108, 111, 99, 97, 108, 32, 122, 101, 116, 97, 10, 9, 9, 108, 111, 99, 97, 108, 32, 97, 99, 107, 95, 117, 105, 100, 32, 61, 32, 79, 46, 102, 114, 111, 109, 95, 115, 116, 114, 105, 110, 103, 40, 117, 105, 100, 41, 10, 9, 9, 84, 104, 101, 116, 97, 44, 32, 122, 101, 116, 97, 32, 61, 32, 67, 79, 67, 79, 78, 85, 84, 46, 112, 114, 111, 118, 101, 95, 99, 114, 101, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 10, 9, 9, 32, 32, 32, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 115, 44, 10, 9, 9, 32, 32, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 44, 10, 9, 9, 32, 32, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 44, 32, 97, 99, 107, 95, 117, 105, 100, 41, 10, 9, 9, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 61, 10, 9, 9, 9, 9, 32, 123, 32, 112, 114, 111, 111, 102, 32, 61, 32, 84, 104, 101, 116, 97, 44, 10, 9, 9, 9, 9, 32, 32, 32, 117, 105, 100, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 61, 32, 122, 101, 116, 97, 44, 32, 45, 45, 32, 69, 67, 80, 10, 9, 9, 9, 9, 32, 32, 32, 117, 105, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 32, 61, 32, 97, 99, 107, 95, 117, 105, 100, 32, 125, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 118, 101, 114, 105, 102, 121, 32, 116, 104, 101, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 112, 114, 111, 111, 102, 32, 105, 115, 32, 99, 111, 114, 114, 101, 99, 116, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 10, 9, 9, 32, 32, 32, 67, 79, 67, 79, 78, 85, 84, 46, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 115, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 46, 112, 114, 111, 111, 102, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 46, 117, 105, 100, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 46, 117, 105, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 41, 44, 10, 9, 9, 32, 32, 32, 34, 80, 101, 116, 105, 116, 105, 111, 110, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 105, 115, 32, 105, 110, 118, 97, 108, 105, 100, 34, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 116, 104, 101, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 108, 105, 115, 116, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 10, 9, 9, 9, 32, 32, 40, 110, 111, 116, 32, 97, 114, 114, 97, 121, 95, 99, 111, 110, 116, 97, 105, 110, 115, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 108, 105, 115, 116, 44, 32, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 46, 117, 105, 100, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 100, 101, 116, 101, 99, 116, 101, 100, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 108, 105, 115, 116, 32, 61, 32, 123, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 108, 105, 115, 116, 44, 32, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 46, 117, 105, 100, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 116, 104, 101, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 105, 115, 32, 106, 117, 115, 116, 32, 111, 110, 101, 32, 109, 111, 114, 101, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 45, 45, 32, 118, 101, 114, 105, 102, 121, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 105, 115, 32, 43, 49, 32, 40, 110, 111, 32, 111, 116, 104, 101, 114, 32, 118, 97, 108, 117, 101, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 41, 10, 9, 9, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 46, 111, 110, 101, 32, 61, 10, 9, 9, 32, 32, 32, 67, 79, 67, 79, 78, 85, 84, 46, 112, 114, 111, 118, 101, 95, 115, 105, 103, 110, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 111, 119, 110, 101, 114, 44, 32, 66, 73, 71, 46, 110, 101, 119, 40, 49, 41, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 67, 79, 67, 79, 78, 85, 84, 46, 118, 101, 114, 105, 102, 121, 95, 115, 105, 103, 110, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 111, 119, 110, 101, 114, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 46, 111, 110, 101, 41, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 67, 111, 99, 111, 110, 117, 116, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 97, 100, 100, 115, 32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 111, 110, 101, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 34, 41, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 97, 100, 100, 32, 116, 104, 101, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 116, 111, 32, 116, 104, 101, 32, 112, 101, 116, 105, 116, 105, 111, 110, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 45, 45, 32, 97, 100, 100, 32, 116, 104, 101, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 116, 111, 32, 116, 104, 101, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 99, 111, 117, 110, 116, 10, 9, 9, 108, 111, 99, 97, 108, 32, 115, 99, 111, 114, 101, 115, 32, 61, 32, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 115, 99, 111, 114, 101, 115, 10, 9, 9, 108, 111, 99, 97, 108, 32, 112, 115, 105, 103, 110, 32, 32, 61, 32, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 46, 111, 110, 101, 10, 9, 9, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 108, 101, 102, 116, 32, 61, 32, 32, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 108, 101, 102, 116, 32, 32, 43, 32, 112, 115, 105, 103, 110, 46, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 108, 101, 102, 116, 10, 9, 9, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 114, 105, 103, 104, 116, 32, 61, 32, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 114, 105, 103, 104, 116, 32, 43, 32, 112, 115, 105, 103, 110, 46, 115, 99, 111, 114, 101, 115, 46, 112, 111, 115, 46, 114, 105, 103, 104, 116, 10, 9, 9, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 108, 101, 102, 116, 32, 61, 32, 32, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 108, 101, 102, 116, 32, 32, 43, 32, 112, 115, 105, 103, 110, 46, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 108, 101, 102, 116, 10, 9, 9, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 114, 105, 103, 104, 116, 32, 61, 32, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 114, 105, 103, 104, 116, 32, 43, 32, 112, 115, 105, 103, 110, 46, 115, 99, 111, 114, 101, 115, 46, 110, 101, 103, 46, 114, 105, 103, 104, 116, 10, 9, 9, 45, 45, 32, 84, 79, 68, 79, 58, 32, 90, 69, 78, 58, 112, 117, 115, 104, 40, 123, 39, 112, 101, 116, 105, 116, 105, 111, 110, 39, 32, 44, 39, 115, 99, 111, 114, 101, 115, 39, 125, 10, 9, 9, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 115, 99, 111, 114, 101, 115, 32, 61, 32, 115, 99, 111, 114, 101, 115, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 97, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 116, 97, 108, 108, 121, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 80, 114, 105, 118, 97, 116, 101, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 107, 101, 121, 112, 97, 105, 114, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 44, 32, 34, 80, 101, 116, 105, 116, 105, 111, 110, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 116, 97, 108, 108, 121, 32, 61, 32, 67, 79, 67, 79, 78, 85, 84, 46, 112, 114, 111, 118, 101, 95, 116, 97, 108, 108, 121, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 10, 9, 9, 32, 32, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 44, 32, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 115, 99, 111, 114, 101, 115, 41, 10, 9, 9, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 116, 97, 108, 108, 121, 46, 117, 105, 100, 32, 61, 32, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 117, 105, 100, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 111, 117, 110, 116, 32, 116, 104, 101, 32, 112, 101, 116, 105, 116, 105, 111, 110, 32, 114, 101, 115, 117, 108, 116, 115, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 44, 32, 34, 80, 101, 116, 105, 116, 105, 111, 110, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 116, 97, 108, 108, 121, 44, 32, 34, 84, 97, 108, 108, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 116, 97, 108, 108, 121, 46, 117, 105, 100, 32, 61, 61, 32, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 117, 105, 100, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 84, 97, 108, 108, 121, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 99, 111, 114, 114, 101, 115, 112, 111, 110, 100, 32, 116, 111, 32, 112, 101, 116, 105, 116, 105, 111, 110, 34, 41, 10, 9, 9, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 114, 101, 115, 117, 108, 116, 115, 32, 61, 32, 67, 79, 67, 79, 78, 85, 84, 46, 99, 111, 117, 110, 116, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 115, 95, 112, 101, 116, 105, 116, 105, 111, 110, 40, 10, 9, 9, 32, 32, 32, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 46, 115, 99, 111, 114, 101, 115, 44, 32, 65, 67, 75, 46, 112, 101, 116, 105, 116, 105, 111, 110, 95, 116, 97, 108, 108, 121, 41, 46, 112, 111, 115, 10, 101, 110, 100, 41, 10]);
Module['FS_createDataFile']('/', 'zencode_petition.lua', fileData24, true, true, false);
var fileData25 = [];
fileData25.push.apply(fileData25, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 108, 111, 99, 97, 108, 32, 74, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 106, 115, 111, 110, 39, 41, 10, 10, 10, 74, 46, 100, 101, 99, 111, 100, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 100, 97, 116, 97, 32, 116, 104, 101, 110, 32, 101, 114, 114, 111, 114, 40, 34, 74, 83, 79, 78, 46, 100, 101, 99, 111, 100, 101, 32, 101, 114, 114, 111, 114, 32, 100, 101, 99, 111, 100, 105, 110, 103, 32, 110, 105, 108, 32, 115, 116, 114, 105, 110, 103, 34, 44, 32, 50, 41, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 97, 115, 115, 101, 114, 116, 40, 115, 116, 114, 32, 126, 61, 32, 34, 34, 44, 34, 74, 83, 79, 78, 46, 100, 101, 99, 111, 100, 101, 32, 101, 114, 114, 111, 114, 32, 100, 101, 99, 111, 100, 105, 110, 103, 32, 101, 109, 112, 116, 121, 32, 115, 116, 114, 105, 110, 103, 34, 41, 10, 32, 32, 32, 45, 45, 32, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 115, 116, 114, 41, 32, 61, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 44, 32, 34, 74, 83, 79, 78, 46, 100, 101, 99, 111, 100, 101, 32, 101, 114, 114, 111, 114, 32, 117, 110, 115, 111, 112, 112, 111, 114, 116, 101, 100, 32, 116, 121, 112, 101, 58, 32, 34, 46, 46, 116, 121, 112, 101, 40, 115, 116, 114, 41, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 74, 83, 79, 78, 46, 114, 97, 119, 95, 100, 101, 99, 111, 100, 101, 40, 32, 115, 116, 114, 40, 100, 97, 116, 97, 41, 32, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 114, 101, 115, 32, 116, 104, 101, 110, 32, 101, 114, 114, 111, 114, 40, 34, 74, 83, 79, 78, 46, 100, 101, 99, 111, 100, 101, 32, 101, 114, 114, 111, 114, 32, 100, 101, 99, 111, 100, 105, 110, 103, 32, 116, 121, 112, 101, 58, 32, 34, 46, 46, 116, 44, 32, 50, 41, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 10, 101, 110, 100, 10, 10, 74, 46, 101, 110, 99, 111, 100, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 116, 97, 98, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 10, 9, 32, 32, 74, 83, 79, 78, 46, 114, 97, 119, 95, 101, 110, 99, 111, 100, 101, 40, 10, 9, 9, 32, 45, 45, 32, 112, 114, 111, 99, 101, 115, 115, 32, 101, 110, 99, 111, 100, 101, 115, 32, 122, 101, 110, 99, 111, 100, 101, 32, 116, 121, 112, 101, 115, 10, 9, 9, 32, 45, 45, 32, 105, 116, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 105, 110, 115, 112, 101, 99, 116, 46, 108, 117, 97, 10, 9, 9, 32, 73, 78, 83, 80, 69, 67, 84, 46, 112, 114, 111, 99, 101, 115, 115, 40, 116, 97, 98, 41, 10, 9, 32, 32, 41, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 74, 83, 79, 78, 46, 114, 97, 119, 95, 101, 110, 99, 111, 100, 101, 40, 116, 97, 98, 41, 10, 101, 110, 100, 10, 10, 74, 46, 97, 117, 116, 111, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 116, 121, 112, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 45, 45, 32, 101, 120, 112, 111, 114, 116, 32, 116, 97, 98, 108, 101, 32, 116, 111, 32, 74, 83, 79, 78, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 74, 83, 79, 78, 46, 101, 110, 99, 111, 100, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 116, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 45, 45, 32, 105, 109, 112, 111, 114, 116, 32, 74, 83, 79, 78, 32, 115, 116, 114, 105, 110, 103, 32, 116, 111, 32, 116, 97, 98, 108, 101, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 74, 83, 79, 78, 46, 100, 101, 99, 111, 100, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 74, 83, 79, 78, 46, 97, 117, 116, 111, 32, 117, 110, 114, 101, 99, 111, 103, 110, 105, 115, 101, 100, 32, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 58, 32, 34, 46, 46, 116, 44, 32, 51, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 114, 101, 116, 117, 114, 110, 32, 74, 10]);
Module['FS_createDataFile']('/', 'zenroom_json.lua', fileData25, true, true, false);
var fileData26 = [];
fileData26.push.apply(fileData26, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 108, 111, 99, 97, 108, 32, 114, 110, 103, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 39, 114, 110, 103, 39, 10, 10, 45, 45, 32, 103, 108, 111, 98, 97, 108, 32, 102, 97, 99, 105, 108, 105, 116, 121, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 114, 97, 110, 100, 111, 109, 40, 108, 101, 110, 41, 32, 114, 101, 116, 117, 114, 110, 32, 82, 78, 71, 46, 110, 101, 119, 40, 41, 58, 111, 99, 116, 101, 116, 40, 108, 101, 110, 41, 32, 101, 110, 100, 10, 10, 114, 101, 116, 117, 114, 110, 32, 114, 110, 103, 10]);
Module['FS_createDataFile']('/', 'zenroom_rng.lua', fileData26, true, true, false);
var fileData27 = [];
fileData27.push.apply(fileData27, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 45, 32, 60, 104, 49, 62, 90, 101, 110, 99, 111, 100, 101, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 112, 97, 114, 115, 101, 114, 60, 47, 104, 49, 62, 10, 45, 45, 10, 45, 45, 32, 60, 97, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 115, 58, 47, 47, 100, 101, 118, 46, 122, 101, 110, 114, 111, 111, 109, 46, 111, 114, 103, 47, 122, 101, 110, 99, 111, 100, 101, 47, 34, 62, 90, 101, 110, 99, 111, 100, 101, 60, 47, 97, 62, 32, 105, 115, 32, 97, 32, 68, 111, 109, 97, 105, 110, 10, 45, 45, 32, 83, 112, 101, 99, 105, 102, 105, 99, 32, 76, 97, 110, 103, 117, 97, 103, 101, 32, 40, 68, 83, 76, 41, 32, 109, 97, 100, 101, 32, 116, 111, 32, 98, 101, 32, 117, 110, 100, 101, 114, 115, 116, 111, 111, 100, 32, 98, 121, 32, 104, 117, 109, 97, 110, 115, 46, 32, 73, 116, 115, 10, 45, 45, 32, 112, 117, 114, 112, 111, 115, 101, 32, 105, 115, 32, 100, 101, 116, 97, 105, 108, 101, 100, 32, 105, 110, 32, 60, 97, 10, 45, 45, 32, 104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 115, 58, 47, 47, 102, 105, 108, 101, 115, 46, 100, 121, 110, 101, 46, 111, 114, 103, 47, 122, 101, 110, 114, 111, 111, 109, 47, 90, 101, 110, 99, 111, 100, 101, 95, 87, 104, 105, 116, 101, 112, 97, 112, 101, 114, 46, 112, 100, 102, 34, 62, 116, 104, 101, 10, 45, 45, 32, 90, 101, 110, 99, 111, 100, 101, 32, 87, 104, 105, 116, 101, 112, 97, 112, 101, 114, 60, 47, 97, 62, 32, 97, 110, 100, 32, 68, 69, 67, 79, 68, 69, 32, 69, 85, 32, 112, 114, 111, 106, 101, 99, 116, 46, 10, 45, 45, 10, 45, 45, 32, 64, 109, 111, 100, 117, 108, 101, 32, 90, 69, 78, 10, 45, 45, 10, 45, 45, 32, 64, 97, 117, 116, 104, 111, 114, 32, 68, 101, 110, 105, 115, 32, 34, 74, 97, 114, 111, 109, 105, 108, 34, 32, 82, 111, 105, 111, 10, 45, 45, 32, 64, 108, 105, 99, 101, 110, 115, 101, 32, 65, 71, 80, 76, 118, 51, 10, 45, 45, 32, 64, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 32, 50, 48, 49, 56, 45, 50, 48, 50, 48, 10, 45, 45, 10, 45, 45, 32, 84, 104, 101, 32, 90, 101, 110, 114, 111, 111, 109, 32, 86, 77, 32, 105, 115, 32, 99, 97, 112, 97, 98, 108, 101, 32, 111, 102, 32, 112, 97, 114, 115, 105, 110, 103, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32, 115, 99, 101, 110, 97, 114, 105, 111, 115, 32, 119, 114, 105, 116, 116, 101, 110, 32, 105, 110, 10, 45, 45, 32, 90, 101, 110, 99, 111, 100, 101, 32, 97, 110, 100, 32, 101, 120, 101, 99, 117, 116, 101, 32, 104, 105, 103, 104, 45, 108, 101, 118, 101, 108, 32, 99, 114, 121, 112, 116, 111, 103, 114, 97, 112, 104, 105, 99, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 32, 100, 101, 115, 99, 114, 105, 98, 101, 100, 10, 45, 45, 32, 105, 110, 32, 116, 104, 101, 109, 59, 32, 116, 104, 105, 115, 32, 105, 115, 32, 116, 111, 32, 102, 97, 99, 105, 108, 105, 116, 97, 116, 101, 32, 116, 104, 101, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 32, 111, 102, 32, 99, 111, 109, 112, 108, 101, 120, 10, 45, 45, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 32, 105, 110, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 97, 110, 100, 32, 116, 104, 101, 32, 110, 111, 110, 45, 108, 105, 116, 101, 114, 97, 116, 101, 32, 117, 110, 100, 101, 114, 115, 116, 97, 110, 100, 105, 110, 103, 32, 111, 102, 32, 119, 104, 97, 116, 32, 97, 10, 45, 45, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 32, 100, 111, 101, 115, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 115, 101, 99, 116, 105, 111, 110, 32, 100, 111, 101, 115, 110, 39, 116, 32, 112, 114, 111, 118, 105, 100, 101, 32, 116, 104, 101, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 111, 110, 32, 104, 111, 119, 32, 116, 111, 32, 119, 114, 105, 116, 101, 10, 45, 45, 32, 90, 101, 110, 99, 111, 100, 101, 46, 32, 82, 101, 102, 101, 114, 32, 116, 111, 32, 116, 104, 101, 32, 108, 105, 110, 107, 115, 32, 97, 98, 111, 118, 101, 32, 116, 111, 32, 108, 101, 97, 114, 110, 32, 105, 116, 46, 32, 84, 104, 105, 115, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 10, 45, 45, 32, 99, 111, 110, 116, 105, 110, 117, 101, 115, 32, 116, 111, 32, 105, 108, 108, 117, 115, 116, 114, 97, 116, 101, 32, 105, 110, 116, 101, 114, 110, 97, 108, 115, 58, 32, 104, 111, 119, 32, 116, 104, 101, 32, 90, 101, 110, 99, 111, 100, 101, 32, 100, 105, 114, 101, 99, 116, 45, 115, 121, 110, 116, 97, 120, 10, 45, 45, 32, 112, 97, 114, 115, 101, 114, 32, 105, 115, 32, 109, 97, 100, 101, 44, 32, 104, 111, 119, 32, 105, 116, 32, 105, 110, 116, 101, 103, 114, 97, 116, 101, 115, 32, 105, 110, 32, 116, 104, 101, 32, 90, 101, 110, 114, 111, 111, 109, 32, 109, 101, 109, 111, 114, 121, 32, 109, 111, 100, 101, 108, 46, 10, 10, 45, 45, 32, 84, 104, 105, 115, 32, 105, 115, 32, 97, 108, 115, 111, 32, 116, 104, 101, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 116, 111, 32, 108, 101, 97, 114, 110, 32, 104, 111, 119, 32, 116, 111, 32, 99, 111, 100, 101, 10, 45, 45, 32, 90, 101, 110, 99, 111, 100, 101, 32, 115, 105, 109, 112, 108, 101, 32, 115, 99, 101, 110, 97, 114, 105, 111, 32, 117, 115, 105, 110, 103, 32, 90, 101, 114, 111, 111, 109, 39, 115, 32, 76, 117, 97, 46, 10, 45, 45, 10, 45, 45, 32, 64, 109, 111, 100, 117, 108, 101, 32, 90, 69, 78, 10, 10, 10, 108, 111, 99, 97, 108, 32, 122, 101, 110, 99, 111, 100, 101, 32, 61, 32, 123, 10, 32, 32, 32, 103, 105, 118, 101, 110, 95, 115, 116, 101, 112, 115, 32, 61, 32, 123, 125, 44, 10, 32, 32, 32, 119, 104, 101, 110, 95, 115, 116, 101, 112, 115, 32, 61, 32, 123, 125, 44, 10, 32, 32, 32, 116, 104, 101, 110, 95, 115, 116, 101, 112, 115, 32, 61, 32, 123, 125, 44, 10, 32, 32, 32, 115, 99, 104, 101, 109, 97, 115, 32, 61, 32, 123, 32, 125, 44, 10, 32, 32, 32, 105, 100, 32, 61, 32, 48, 44, 10, 32, 32, 32, 65, 83, 84, 32, 61, 32, 123, 125, 44, 10, 32, 32, 32, 116, 114, 97, 99, 101, 98, 97, 99, 107, 32, 61, 32, 123, 32, 125, 44, 32, 45, 45, 32, 101, 120, 101, 99, 117, 116, 105, 111, 110, 32, 98, 97, 99, 107, 116, 114, 97, 99, 101, 10, 32, 32, 32, 101, 118, 97, 108, 95, 99, 97, 99, 104, 101, 32, 61, 32, 123, 32, 125, 44, 32, 45, 45, 32, 122, 101, 110, 99, 111, 100, 101, 95, 101, 118, 97, 108, 32, 105, 102, 46, 46, 46, 116, 104, 101, 110, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 10, 32, 32, 32, 99, 104, 101, 99, 107, 115, 32, 61, 32, 123, 32, 118, 101, 114, 115, 105, 111, 110, 32, 61, 32, 102, 97, 108, 115, 101, 32, 125, 44, 32, 45, 45, 32, 118, 101, 114, 115, 105, 111, 110, 44, 32, 115, 99, 101, 110, 97, 114, 105, 111, 32, 99, 104, 101, 99, 107, 101, 100, 44, 32, 101, 116, 99, 46, 10, 32, 32, 32, 79, 75, 32, 61, 32, 116, 114, 117, 101, 32, 45, 45, 32, 115, 101, 116, 32, 102, 97, 108, 115, 101, 32, 98, 121, 32, 97, 115, 115, 101, 114, 116, 115, 10, 125, 10, 10, 114, 101, 113, 117, 105, 114, 101, 40, 39, 122, 101, 110, 114, 111, 111, 109, 95, 97, 115, 116, 39, 41, 10, 10, 10, 45, 45, 32, 115, 101, 116, 95, 115, 101, 110, 116, 101, 110, 99, 101, 10, 45, 45, 32, 115, 101, 116, 95, 114, 117, 108, 101, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 101, 119, 95, 115, 116, 97, 116, 101, 95, 109, 97, 99, 104, 105, 110, 101, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 97, 99, 104, 105, 110, 101, 32, 61, 32, 77, 65, 67, 72, 73, 78, 69, 46, 99, 114, 101, 97, 116, 101, 40, 123, 10, 9, 9, 32, 105, 110, 105, 116, 105, 97, 108, 32, 61, 32, 39, 105, 110, 105, 116, 39, 44, 10, 9, 9, 32, 101, 118, 101, 110, 116, 115, 32, 61, 32, 123, 10, 9, 9, 9, 123, 32, 110, 97, 109, 101, 32, 61, 32, 39, 101, 110, 116, 101, 114, 95, 114, 117, 108, 101, 39, 44, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 61, 32, 123, 32, 39, 105, 110, 105, 116, 39, 44, 32, 39, 114, 117, 108, 101, 39, 44, 32, 39, 115, 99, 101, 110, 97, 114, 105, 111, 39, 32, 125, 44, 32, 116, 111, 32, 61, 32, 39, 114, 117, 108, 101, 39, 32, 125, 44, 10, 9, 9, 9, 123, 32, 110, 97, 109, 101, 32, 61, 32, 39, 101, 110, 116, 101, 114, 95, 115, 99, 101, 110, 97, 114, 105, 111, 39, 44, 32, 102, 114, 111, 109, 32, 61, 32, 123, 32, 39, 105, 110, 105, 116, 39, 44, 32, 39, 114, 117, 108, 101, 39, 44, 32, 39, 115, 99, 101, 110, 97, 114, 105, 111, 39, 32, 125, 44, 32, 116, 111, 32, 61, 32, 39, 115, 99, 101, 110, 97, 114, 105, 111, 39, 32, 125, 44, 10, 9, 9, 9, 123, 32, 110, 97, 109, 101, 32, 61, 32, 39, 101, 110, 116, 101, 114, 95, 103, 105, 118, 101, 110, 39, 44, 32, 32, 32, 32, 102, 114, 111, 109, 32, 61, 32, 123, 32, 39, 105, 110, 105, 116, 39, 44, 32, 39, 114, 117, 108, 101, 39, 44, 32, 39, 115, 99, 101, 110, 97, 114, 105, 111, 39, 32, 125, 44, 32, 116, 111, 32, 61, 32, 39, 103, 105, 118, 101, 110, 39, 32, 125, 44, 10, 9, 9, 9, 123, 32, 110, 97, 109, 101, 32, 61, 32, 39, 101, 110, 116, 101, 114, 95, 103, 105, 118, 101, 110, 39, 44, 32, 32, 32, 32, 102, 114, 111, 109, 32, 61, 32, 32, 32, 39, 103, 105, 118, 101, 110, 39, 44, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 111, 32, 61, 32, 39, 103, 105, 118, 101, 110, 39, 32, 125, 44, 10, 9, 9, 9, 123, 32, 110, 97, 109, 101, 32, 61, 32, 39, 101, 110, 116, 101, 114, 95, 97, 110, 100, 39, 44, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 61, 32, 32, 32, 39, 103, 105, 118, 101, 110, 39, 44, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 111, 32, 61, 32, 39, 103, 105, 118, 101, 110, 39, 32, 125, 44, 10, 9, 9, 9, 123, 32, 110, 97, 109, 101, 32, 61, 32, 39, 101, 110, 116, 101, 114, 95, 119, 104, 101, 110, 39, 44, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 61, 32, 32, 32, 39, 103, 105, 118, 101, 110, 39, 44, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 111, 32, 61, 32, 39, 119, 104, 101, 110, 39, 32, 125, 44, 10, 9, 9, 9, 123, 32, 110, 97, 109, 101, 32, 61, 32, 39, 101, 110, 116, 101, 114, 95, 119, 104, 101, 110, 39, 44, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 61, 32, 32, 32, 39, 119, 104, 101, 110, 39, 44, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 111, 32, 61, 32, 39, 119, 104, 101, 110, 39, 32, 125, 44, 10, 9, 9, 9, 123, 32, 110, 97, 109, 101, 32, 61, 32, 39, 101, 110, 116, 101, 114, 95, 97, 110, 100, 39, 44, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 61, 32, 32, 32, 39, 119, 104, 101, 110, 39, 44, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 111, 32, 61, 32, 39, 119, 104, 101, 110, 39, 32, 125, 44, 10, 9, 9, 9, 123, 32, 110, 97, 109, 101, 32, 61, 32, 39, 101, 110, 116, 101, 114, 95, 116, 104, 101, 110, 39, 44, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 61, 32, 123, 32, 39, 103, 105, 118, 101, 110, 39, 44, 32, 39, 119, 104, 101, 110, 39, 32, 125, 44, 32, 32, 32, 116, 111, 32, 61, 32, 39, 116, 104, 101, 110, 39, 32, 125, 44, 10, 9, 9, 9, 123, 32, 110, 97, 109, 101, 32, 61, 32, 39, 101, 110, 116, 101, 114, 95, 116, 104, 101, 110, 39, 44, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 61, 32, 32, 32, 39, 116, 104, 101, 110, 39, 44, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 111, 32, 61, 32, 39, 116, 104, 101, 110, 39, 32, 125, 44, 10, 9, 9, 9, 123, 32, 110, 97, 109, 101, 32, 61, 32, 39, 101, 110, 116, 101, 114, 95, 97, 110, 100, 39, 44, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 61, 32, 32, 32, 39, 116, 104, 101, 110, 39, 44, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 111, 32, 61, 32, 39, 116, 104, 101, 110, 39, 32, 125, 10, 9, 9, 32, 125, 44, 10, 9, 9, 32, 99, 97, 108, 108, 98, 97, 99, 107, 115, 32, 61, 32, 123, 10, 9, 9, 9, 45, 45, 32, 109, 115, 103, 32, 105, 115, 32, 97, 32, 116, 97, 98, 108, 101, 58, 32, 123, 32, 109, 115, 103, 32, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 44, 32, 90, 32, 61, 32, 90, 69, 78, 32, 40, 115, 101, 108, 102, 41, 32, 125, 10, 9, 9, 9, 111, 110, 115, 99, 101, 110, 97, 114, 105, 111, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 44, 32, 101, 118, 101, 110, 116, 44, 32, 102, 114, 111, 109, 44, 32, 116, 111, 44, 32, 109, 115, 103, 41, 10, 9, 9, 9, 32, 32, 32, 45, 45, 32, 102, 105, 114, 115, 116, 32, 119, 111, 114, 100, 32, 117, 110, 116, 105, 108, 32, 116, 104, 101, 32, 99, 111, 108, 111, 110, 10, 9, 9, 9, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 99, 101, 110, 97, 114, 105, 111, 115, 32, 61, 32, 115, 116, 114, 116, 111, 107, 40, 115, 116, 114, 105, 110, 103, 46, 109, 97, 116, 99, 104, 40, 116, 114, 105, 109, 40, 109, 115, 103, 46, 109, 115, 103, 41, 58, 108, 111, 119, 101, 114, 40, 41, 44, 32, 34, 91, 94, 58, 93, 43, 34, 41, 41, 10, 9, 9, 9, 32, 32, 32, 102, 111, 114, 32, 107, 44, 115, 99, 101, 110, 32, 105, 110, 32, 105, 112, 97, 105, 114, 115, 40, 115, 99, 101, 110, 97, 114, 105, 111, 115, 41, 32, 100, 111, 10, 9, 9, 9, 9, 32, 32, 105, 102, 32, 107, 32, 126, 61, 32, 49, 32, 116, 104, 101, 110, 32, 45, 45, 32, 115, 107, 105, 112, 32, 102, 105, 114, 115, 116, 32, 40, 112, 114, 101, 102, 105, 120, 41, 10, 9, 9, 9, 9, 9, 32, 114, 101, 113, 117, 105, 114, 101, 95, 111, 110, 99, 101, 40, 34, 122, 101, 110, 99, 111, 100, 101, 95, 34, 46, 46, 116, 114, 105, 109, 113, 40, 115, 99, 101, 110, 41, 41, 10, 9, 9, 9, 9, 9, 32, 90, 69, 78, 58, 116, 114, 97, 99, 101, 40, 34, 83, 99, 101, 110, 97, 114, 105, 111, 32, 34, 46, 46, 115, 99, 101, 110, 41, 10, 9, 9, 9, 9, 9, 32, 114, 101, 116, 117, 114, 110, 10, 9, 9, 9, 9, 32, 32, 101, 110, 100, 10, 9, 9, 9, 32, 32, 32, 101, 110, 100, 10, 9, 9, 9, 101, 110, 100, 44, 10, 9, 9, 9, 111, 110, 114, 117, 108, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 101, 108, 102, 44, 32, 101, 118, 101, 110, 116, 44, 32, 102, 114, 111, 109, 44, 32, 116, 111, 44, 32, 109, 115, 103, 41, 10, 9, 9, 9, 32, 32, 32, 45, 45, 32, 112, 114, 111, 99, 101, 115, 115, 32, 114, 117, 108, 101, 115, 32, 105, 109, 109, 101, 100, 105, 97, 116, 101, 108, 121, 10, 9, 9, 9, 32, 32, 32, 105, 102, 32, 109, 115, 103, 32, 116, 104, 101, 110, 32, 115, 101, 116, 95, 114, 117, 108, 101, 40, 109, 115, 103, 41, 32, 101, 110, 100, 10, 9, 9, 9, 101, 110, 100, 44, 10, 9, 9, 9, 45, 45, 32, 115, 101, 116, 95, 115, 101, 110, 116, 101, 110, 99, 101, 32, 102, 114, 111, 109, 32, 122, 101, 110, 99, 111, 100, 101, 95, 97, 115, 116, 10, 9, 9, 9, 111, 110, 103, 105, 118, 101, 110, 32, 61, 32, 115, 101, 116, 95, 115, 101, 110, 116, 101, 110, 99, 101, 44, 10, 9, 9, 9, 111, 110, 119, 104, 101, 110, 32, 32, 61, 32, 115, 101, 116, 95, 115, 101, 110, 116, 101, 110, 99, 101, 44, 10, 9, 9, 9, 111, 110, 116, 104, 101, 110, 32, 32, 61, 32, 115, 101, 116, 95, 115, 101, 110, 116, 101, 110, 99, 101, 44, 10, 9, 9, 9, 111, 110, 97, 110, 100, 32, 61, 32, 115, 101, 116, 95, 115, 101, 110, 116, 101, 110, 99, 101, 10, 9, 9, 32, 125, 10, 125, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 109, 97, 99, 104, 105, 110, 101, 10, 101, 110, 100, 10, 10, 45, 45, 32, 90, 101, 110, 99, 111, 100, 101, 32, 72, 69, 65, 80, 32, 103, 108, 111, 98, 97, 108, 115, 10, 73, 78, 32, 61, 32, 123, 32, 125, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 71, 105, 118, 101, 110, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 44, 32, 105, 109, 112, 111, 114, 116, 32, 103, 108, 111, 98, 97, 108, 32, 68, 65, 84, 65, 32, 102, 114, 111, 109, 32, 106, 115, 111, 110, 10, 73, 78, 46, 75, 69, 89, 83, 32, 61, 32, 123, 32, 125, 32, 32, 32, 32, 45, 45, 32, 71, 105, 118, 101, 110, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 44, 32, 105, 109, 112, 111, 114, 116, 32, 103, 108, 111, 98, 97, 108, 32, 75, 69, 89, 83, 32, 102, 114, 111, 109, 32, 106, 115, 111, 110, 10, 84, 77, 80, 32, 61, 32, 84, 77, 80, 32, 111, 114, 32, 123, 32, 125, 32, 45, 45, 32, 71, 105, 118, 101, 110, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 44, 32, 116, 101, 109, 112, 32, 98, 117, 102, 102, 101, 114, 32, 102, 111, 114, 32, 97, 99, 107, 42, 45, 62, 118, 97, 108, 105, 100, 97, 116, 101, 45, 62, 112, 117, 115, 104, 42, 10, 65, 67, 75, 32, 61, 32, 65, 67, 75, 32, 111, 114, 32, 123, 32, 125, 32, 45, 45, 32, 87, 104, 101, 110, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 44, 32, 32, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 112, 117, 115, 104, 42, 10, 79, 85, 84, 32, 61, 32, 79, 85, 84, 32, 111, 114, 32, 123, 32, 125, 32, 45, 45, 32, 112, 114, 105, 110, 116, 32, 111, 117, 116, 10, 65, 83, 84, 32, 61, 32, 65, 83, 84, 32, 111, 114, 32, 123, 32, 125, 32, 45, 45, 32, 65, 83, 84, 32, 111, 102, 32, 112, 97, 114, 115, 101, 100, 32, 90, 101, 110, 99, 111, 100, 101, 10, 87, 72, 79, 32, 61, 32, 110, 105, 108, 10, 10, 45, 45, 32, 105, 110, 105, 116, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 71, 105, 118, 101, 110, 40, 116, 101, 120, 116, 44, 32, 102, 110, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 90, 69, 78, 46, 103, 105, 118, 101, 110, 95, 115, 116, 101, 112, 115, 91, 116, 101, 120, 116, 93, 44, 10, 32, 32, 32, 9, 9, 9, 32, 32, 34, 67, 111, 110, 102, 108, 105, 99, 116, 105, 110, 103, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 32, 108, 111, 97, 100, 101, 100, 32, 98, 121, 32, 115, 99, 101, 110, 97, 114, 105, 111, 58, 32, 34, 46, 46, 116, 101, 120, 116, 41, 10, 32, 32, 32, 90, 69, 78, 46, 103, 105, 118, 101, 110, 95, 115, 116, 101, 112, 115, 91, 116, 101, 120, 116, 93, 32, 61, 32, 102, 110, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 87, 104, 101, 110, 40, 116, 101, 120, 116, 44, 32, 102, 110, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 90, 69, 78, 46, 119, 104, 101, 110, 95, 115, 116, 101, 112, 115, 91, 116, 101, 120, 116, 93, 44, 10, 32, 32, 32, 9, 9, 9, 32, 32, 34, 67, 111, 110, 102, 108, 105, 99, 116, 105, 110, 103, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 32, 108, 111, 97, 100, 101, 100, 32, 98, 121, 32, 115, 99, 101, 110, 97, 114, 105, 111, 58, 32, 34, 46, 46, 116, 101, 120, 116, 41, 10, 32, 32, 32, 90, 69, 78, 46, 119, 104, 101, 110, 95, 115, 116, 101, 112, 115, 91, 116, 101, 120, 116, 93, 32, 61, 32, 102, 110, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 84, 104, 101, 110, 40, 116, 101, 120, 116, 44, 32, 102, 110, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 90, 69, 78, 46, 116, 104, 101, 110, 95, 115, 116, 101, 112, 115, 91, 116, 101, 120, 116, 93, 44, 10, 32, 32, 32, 9, 9, 9, 32, 32, 34, 67, 111, 110, 102, 108, 105, 99, 116, 105, 110, 103, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 32, 108, 111, 97, 100, 101, 100, 32, 98, 121, 32, 115, 99, 101, 110, 97, 114, 105, 111, 32, 58, 32, 34, 46, 46, 116, 101, 120, 116, 41, 10, 32, 32, 32, 90, 69, 78, 46, 116, 104, 101, 110, 95, 115, 116, 101, 112, 115, 91, 116, 101, 120, 116, 93, 32, 61, 32, 102, 110, 10, 101, 110, 100, 10, 10, 45, 45, 45, 10, 45, 45, 32, 68, 101, 99, 108, 97, 114, 101, 32, 39, 109, 121, 32, 111, 119, 110, 39, 32, 110, 97, 109, 101, 32, 116, 104, 97, 116, 32, 119, 105, 108, 108, 32, 114, 101, 102, 101, 114, 32, 97, 108, 108, 32, 117, 115, 101, 115, 32, 111, 102, 32, 116, 104, 101, 32, 39, 109, 121, 39, 32, 112, 114, 111, 110, 111, 117, 110, 10, 45, 45, 32, 116, 111, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 115, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 117, 110, 100, 101, 114, 32, 116, 104, 105, 115, 32, 110, 97, 109, 101, 46, 10, 45, 45, 10, 45, 45, 32, 64, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 97, 109, 40, 110, 97, 109, 101, 41, 10, 45, 45, 32, 64, 112, 97, 114, 97, 109, 32, 110, 97, 109, 101, 32, 111, 119, 110, 32, 110, 97, 109, 101, 32, 116, 111, 32, 98, 101, 32, 115, 97, 118, 101, 100, 32, 105, 110, 32, 87, 72, 79, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 73, 97, 109, 40, 110, 97, 109, 101, 41, 10, 32, 32, 32, 105, 102, 32, 110, 97, 109, 101, 32, 116, 104, 101, 110, 10, 9, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 87, 72, 79, 44, 32, 34, 73, 100, 101, 110, 116, 105, 116, 121, 32, 97, 108, 114, 101, 97, 100, 121, 32, 100, 101, 102, 105, 110, 101, 100, 32, 105, 110, 32, 87, 72, 79, 34, 41, 10, 9, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 110, 97, 109, 101, 41, 32, 61, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 44, 32, 34, 79, 119, 110, 32, 110, 97, 109, 101, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 105, 110, 103, 34, 41, 10, 9, 32, 32, 87, 72, 79, 32, 61, 32, 110, 97, 109, 101, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 87, 72, 79, 44, 32, 34, 78, 111, 32, 105, 100, 101, 110, 116, 105, 116, 121, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 105, 110, 32, 87, 72, 79, 34, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 79, 75, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 105, 110, 105, 116, 32, 115, 99, 104, 101, 109, 97, 115, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 46, 97, 100, 100, 95, 115, 99, 104, 101, 109, 97, 40, 97, 114, 114, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 95, 105, 108, 108, 101, 103, 97, 108, 95, 115, 99, 104, 101, 109, 97, 115, 32, 61, 32, 123, 32, 45, 45, 32, 99, 111, 110, 115, 116, 10, 9, 32, 32, 119, 104, 111, 97, 109, 105, 32, 61, 32, 116, 114, 117, 101, 10, 32, 32, 32, 125, 10, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 97, 114, 114, 41, 32, 100, 111, 10, 9, 32, 32, 45, 45, 32, 99, 104, 101, 99, 107, 32, 111, 118, 101, 114, 119, 114, 105, 116, 101, 32, 47, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 115, 99, 101, 110, 97, 114, 105, 111, 32, 110, 97, 109, 101, 115, 112, 97, 99, 101, 32, 99, 108, 97, 115, 104, 10, 9, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 90, 69, 78, 46, 115, 99, 104, 101, 109, 97, 115, 91, 107, 93, 44, 32, 34, 65, 100, 100, 32, 115, 99, 104, 101, 109, 97, 32, 100, 101, 110, 105, 101, 100, 44, 32, 97, 108, 114, 101, 97, 100, 121, 32, 114, 101, 103, 105, 115, 116, 101, 114, 101, 100, 32, 115, 99, 104, 101, 109, 97, 58, 32, 34, 46, 46, 107, 41, 10, 9, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 95, 105, 108, 108, 101, 103, 97, 108, 95, 115, 99, 104, 101, 109, 97, 115, 91, 107, 93, 44, 32, 34, 65, 100, 100, 32, 115, 99, 104, 101, 109, 97, 32, 100, 101, 110, 105, 101, 100, 44, 32, 114, 101, 115, 101, 114, 118, 101, 100, 32, 110, 97, 109, 101, 58, 32, 34, 46, 46, 107, 41, 10, 9, 32, 32, 90, 69, 78, 46, 115, 99, 104, 101, 109, 97, 115, 91, 107, 93, 32, 61, 32, 118, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 10, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 45, 45, 32, 90, 69, 78, 67, 79, 68, 69, 32, 80, 65, 82, 83, 69, 82, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 58, 98, 101, 103, 105, 110, 40, 41, 10, 32, 32, 32, 115, 101, 108, 102, 46, 105, 100, 32, 61, 32, 48, 10, 32, 32, 32, 115, 101, 108, 102, 46, 65, 83, 84, 32, 61, 32, 123, 125, 10, 32, 32, 32, 115, 101, 108, 102, 46, 101, 118, 97, 108, 95, 99, 97, 99, 104, 101, 32, 61, 32, 123, 32, 125, 10, 32, 32, 32, 115, 101, 108, 102, 46, 99, 104, 101, 99, 107, 115, 32, 61, 32, 123, 32, 118, 101, 114, 115, 105, 111, 110, 32, 61, 32, 102, 97, 108, 115, 101, 32, 125, 32, 45, 45, 32, 118, 101, 114, 115, 105, 111, 110, 44, 32, 115, 99, 101, 110, 97, 114, 105, 111, 32, 99, 104, 101, 99, 107, 101, 100, 44, 32, 101, 116, 99, 46, 10, 32, 32, 32, 115, 101, 108, 102, 46, 79, 75, 32, 61, 32, 116, 114, 117, 101, 32, 45, 45, 32, 115, 101, 116, 32, 102, 97, 108, 115, 101, 32, 98, 121, 32, 97, 115, 115, 101, 114, 116, 115, 10, 32, 32, 32, 115, 101, 108, 102, 46, 116, 114, 97, 99, 101, 98, 97, 99, 107, 32, 61, 32, 123, 32, 125, 10, 10, 32, 32, 32, 45, 45, 32, 82, 101, 115, 101, 116, 32, 72, 69, 65, 80, 10, 32, 32, 32, 115, 101, 108, 102, 46, 109, 97, 99, 104, 105, 110, 101, 32, 61, 32, 123, 32, 125, 10, 32, 32, 32, 73, 78, 32, 61, 32, 123, 32, 125, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 71, 105, 118, 101, 110, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 44, 32, 105, 109, 112, 111, 114, 116, 32, 103, 108, 111, 98, 97, 108, 32, 68, 65, 84, 65, 32, 102, 114, 111, 109, 32, 106, 115, 111, 110, 10, 32, 32, 32, 73, 78, 46, 75, 69, 89, 83, 32, 61, 32, 123, 32, 125, 32, 32, 32, 32, 45, 45, 32, 71, 105, 118, 101, 110, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 44, 32, 105, 109, 112, 111, 114, 116, 32, 103, 108, 111, 98, 97, 108, 32, 75, 69, 89, 83, 32, 102, 114, 111, 109, 32, 106, 115, 111, 110, 10, 32, 32, 32, 84, 77, 80, 32, 61, 32, 123, 32, 125, 32, 45, 45, 32, 71, 105, 118, 101, 110, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 44, 32, 116, 101, 109, 112, 32, 98, 117, 102, 102, 101, 114, 32, 102, 111, 114, 32, 97, 99, 107, 42, 45, 62, 118, 97, 108, 105, 100, 97, 116, 101, 45, 62, 112, 117, 115, 104, 42, 10, 32, 32, 32, 65, 67, 75, 32, 61, 32, 123, 32, 125, 32, 45, 45, 32, 87, 104, 101, 110, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 44, 32, 32, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 112, 117, 115, 104, 42, 10, 32, 32, 32, 79, 85, 84, 32, 61, 32, 123, 32, 125, 32, 45, 45, 32, 112, 114, 105, 110, 116, 32, 111, 117, 116, 10, 32, 32, 32, 65, 83, 84, 32, 61, 32, 123, 32, 125, 32, 45, 45, 32, 65, 83, 84, 32, 111, 102, 32, 112, 97, 114, 115, 101, 100, 32, 90, 101, 110, 99, 111, 100, 101, 10, 32, 32, 32, 115, 101, 108, 102, 46, 67, 79, 68, 69, 67, 32, 61, 32, 123, 32, 125, 32, 45, 45, 32, 115, 97, 118, 101, 115, 32, 105, 110, 112, 117, 116, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 115, 32, 102, 111, 114, 32, 116, 111, 32, 100, 101, 99, 111, 100, 101, 32, 117, 115, 105, 110, 103, 32, 115, 97, 109, 101, 10, 32, 32, 32, 87, 72, 79, 32, 61, 32, 110, 105, 108, 10, 32, 32, 32, 99, 111, 108, 108, 101, 99, 116, 103, 97, 114, 98, 97, 103, 101, 39, 99, 111, 108, 108, 101, 99, 116, 39, 10, 32, 32, 32, 45, 45, 32, 90, 101, 110, 99, 111, 100, 101, 32, 105, 110, 105, 116, 32, 116, 114, 97, 99, 101, 98, 97, 99, 107, 10, 32, 32, 32, 115, 101, 108, 102, 46, 109, 97, 99, 104, 105, 110, 101, 32, 61, 32, 110, 101, 119, 95, 115, 116, 97, 116, 101, 95, 109, 97, 99, 104, 105, 110, 101, 40, 41, 10, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 101, 110, 100, 10, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 58, 112, 97, 114, 115, 101, 40, 116, 101, 120, 116, 41, 10, 32, 32, 32, 105, 102, 32, 32, 35, 116, 101, 120, 116, 32, 60, 32, 57, 32, 116, 104, 101, 110, 32, 45, 45, 32, 115, 116, 114, 108, 101, 110, 40, 34, 97, 110, 100, 32, 100, 101, 98, 117, 103, 34, 41, 32, 61, 61, 32, 57, 10, 32, 32, 32, 9, 32, 32, 119, 97, 114, 110, 40, 34, 90, 101, 110, 99, 111, 100, 101, 32, 116, 101, 120, 116, 32, 116, 111, 111, 32, 115, 104, 111, 114, 116, 32, 116, 111, 32, 112, 97, 114, 115, 101, 34, 41, 10, 32, 32, 32, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 120, 120, 120, 40, 116, 101, 120, 116, 44, 51, 41, 10, 32, 32, 32, 102, 111, 114, 32, 108, 105, 110, 101, 32, 105, 110, 32, 122, 101, 110, 99, 111, 100, 101, 95, 110, 101, 119, 108, 105, 110, 101, 95, 105, 116, 101, 114, 40, 116, 101, 120, 116, 41, 32, 100, 111, 10, 9, 32, 32, 105, 102, 32, 122, 101, 110, 99, 111, 100, 101, 95, 105, 115, 101, 109, 112, 116, 121, 40, 108, 105, 110, 101, 41, 32, 116, 104, 101, 110, 32, 103, 111, 116, 111, 32, 99, 111, 110, 116, 105, 110, 117, 101, 32, 101, 110, 100, 10, 9, 32, 32, 105, 102, 32, 122, 101, 110, 99, 111, 100, 101, 95, 105, 115, 99, 111, 109, 109, 101, 110, 116, 40, 108, 105, 110, 101, 41, 32, 116, 104, 101, 110, 32, 103, 111, 116, 111, 32, 99, 111, 110, 116, 105, 110, 117, 101, 32, 101, 110, 100, 10, 9, 32, 32, 45, 45, 32, 109, 97, 120, 32, 108, 101, 110, 103, 116, 104, 32, 102, 111, 114, 32, 115, 105, 110, 103, 108, 101, 32, 122, 101, 110, 99, 111, 100, 101, 32, 108, 105, 110, 101, 32, 105, 115, 32, 35, 100, 101, 102, 105, 110, 101, 32, 77, 65, 88, 95, 76, 73, 78, 69, 10, 9, 32, 32, 45, 45, 32, 104, 97, 114, 100, 45, 99, 111, 100, 101, 100, 32, 105, 110, 115, 105, 100, 101, 32, 122, 101, 110, 114, 111, 111, 109, 46, 104, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 112, 114, 101, 102, 105, 120, 32, 61, 32, 112, 97, 114, 115, 101, 95, 112, 114, 101, 102, 105, 120, 40, 108, 105, 110, 101, 41, 10, 9, 32, 32, 115, 101, 108, 102, 46, 97, 115, 115, 101, 114, 116, 40, 112, 114, 101, 102, 105, 120, 44, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 90, 101, 110, 99, 111, 100, 101, 32, 108, 105, 110, 101, 58, 32, 34, 46, 46, 108, 105, 110, 101, 41, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 100, 101, 102, 115, 32, 45, 45, 32, 112, 97, 114, 115, 101, 32, 105, 110, 32, 119, 104, 97, 116, 32, 112, 104, 97, 115, 101, 32, 97, 114, 101, 32, 119, 101, 10, 9, 32, 32, 115, 101, 108, 102, 46, 79, 75, 32, 61, 32, 116, 114, 117, 101, 10, 9, 32, 32, 101, 120, 105, 116, 99, 111, 100, 101, 40, 48, 41, 10, 9, 32, 32, 45, 45, 32, 116, 114, 121, 32, 116, 111, 32, 101, 110, 116, 101, 114, 32, 116, 104, 101, 32, 109, 97, 99, 104, 105, 110, 101, 32, 115, 116, 97, 116, 101, 32, 110, 97, 109, 101, 100, 32, 105, 110, 32, 112, 114, 101, 102, 105, 120, 10, 9, 32, 32, 45, 45, 32, 120, 120, 120, 40, 51, 44, 34, 90, 101, 110, 99, 111, 100, 101, 32, 109, 97, 99, 104, 105, 110, 101, 32, 101, 110, 116, 101, 114, 95, 34, 46, 46, 112, 114, 101, 102, 105, 120, 46, 46, 34, 58, 32, 34, 46, 46, 116, 101, 120, 116, 41, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 102, 109, 32, 61, 32, 115, 101, 108, 102, 46, 109, 97, 99, 104, 105, 110, 101, 91, 34, 101, 110, 116, 101, 114, 95, 34, 46, 46, 112, 114, 101, 102, 105, 120, 93, 10, 9, 32, 32, 115, 101, 108, 102, 46, 97, 115, 115, 101, 114, 116, 40, 102, 109, 44, 34, 73, 110, 118, 97, 108, 105, 100, 32, 90, 101, 110, 99, 111, 100, 101, 32, 112, 114, 101, 102, 105, 120, 58, 32, 34, 46, 46, 112, 114, 101, 102, 105, 120, 41, 10, 9, 32, 32, 115, 101, 108, 102, 46, 97, 115, 115, 101, 114, 116, 40, 102, 109, 40, 115, 101, 108, 102, 46, 109, 97, 99, 104, 105, 110, 101, 44, 32, 123, 32, 109, 115, 103, 32, 61, 32, 108, 105, 110, 101, 44, 32, 90, 32, 61, 32, 115, 101, 108, 102, 32, 125, 41, 44, 10, 9, 9, 9, 9, 32, 32, 108, 105, 110, 101, 46, 46, 34, 92, 110, 32, 32, 32, 32, 34, 46, 46, 10, 9, 9, 9, 9, 9, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 102, 114, 111, 109, 32, 34, 10, 9, 9, 9, 9, 9, 32, 46, 46, 115, 101, 108, 102, 46, 109, 97, 99, 104, 105, 110, 101, 46, 99, 117, 114, 114, 101, 110, 116, 46, 46, 34, 32, 116, 111, 32, 82, 117, 108, 101, 32, 98, 108, 111, 99, 107, 34, 41, 10, 9, 32, 32, 58, 58, 99, 111, 110, 116, 105, 110, 117, 101, 58, 58, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 99, 111, 108, 108, 101, 99, 116, 103, 97, 114, 98, 97, 103, 101, 39, 99, 111, 108, 108, 101, 99, 116, 39, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 58, 116, 114, 97, 99, 101, 40, 115, 114, 99, 41, 10, 32, 32, 32, 45, 45, 32, 116, 97, 107, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 108, 105, 110, 101, 32, 111, 102, 32, 122, 101, 110, 99, 111, 100, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 114, 32, 61, 32, 116, 114, 105, 109, 40, 115, 114, 99, 41, 10, 32, 32, 32, 45, 45, 32, 84, 79, 68, 79, 58, 32, 116, 97, 98, 98, 105, 110, 103, 44, 32, 117, 103, 108, 121, 32, 98, 117, 116, 32, 111, 107, 32, 102, 111, 114, 32, 110, 111, 119, 10, 32, 32, 32, 105, 102, 32, 115, 116, 114, 105, 110, 103, 46, 115, 117, 98, 40, 116, 114, 44, 49, 44, 49, 41, 32, 61, 61, 32, 39, 91, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 115, 101, 108, 102, 46, 116, 114, 97, 99, 101, 98, 97, 99, 107, 44, 32, 116, 114, 41, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 115, 101, 108, 102, 46, 116, 114, 97, 99, 101, 98, 97, 99, 107, 44, 32, 34, 32, 46, 32, 32, 34, 46, 46, 116, 114, 41, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 45, 45, 32, 116, 114, 97, 99, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 120, 101, 99, 117, 116, 105, 111, 110, 32, 97, 108, 115, 111, 32, 111, 110, 32, 115, 117, 99, 99, 101, 115, 115, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 58, 102, 116, 114, 97, 99, 101, 40, 115, 114, 99, 41, 10, 32, 32, 32, 45, 45, 32, 116, 97, 107, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 108, 105, 110, 101, 32, 111, 102, 32, 122, 101, 110, 99, 111, 100, 101, 10, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 115, 101, 108, 102, 46, 116, 114, 97, 99, 101, 98, 97, 99, 107, 44, 32, 34, 32, 68, 32, 32, 90, 69, 78, 58, 34, 46, 46, 116, 114, 105, 109, 40, 115, 114, 99, 41, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 108, 111, 103, 32, 122, 101, 110, 99, 111, 100, 101, 32, 119, 97, 114, 110, 105, 110, 103, 32, 105, 110, 32, 116, 114, 97, 99, 101, 98, 97, 99, 107, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 58, 119, 116, 114, 97, 99, 101, 40, 115, 114, 99, 41, 10, 32, 32, 32, 45, 45, 32, 116, 97, 107, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 108, 105, 110, 101, 32, 111, 102, 32, 122, 101, 110, 99, 111, 100, 101, 10, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 115, 101, 108, 102, 46, 116, 114, 97, 99, 101, 98, 97, 99, 107, 44, 32, 34, 32, 87, 32, 32, 90, 69, 78, 58, 34, 46, 46, 116, 114, 105, 109, 40, 115, 114, 99, 41, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 58, 114, 117, 110, 40, 41, 10, 32, 32, 32, 45, 45, 32, 114, 117, 110, 116, 105, 109, 101, 32, 99, 104, 101, 99, 107, 115, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 90, 69, 78, 46, 99, 104, 101, 99, 107, 115, 46, 118, 101, 114, 115, 105, 111, 110, 32, 116, 104, 101, 110, 10, 9, 32, 32, 119, 97, 114, 110, 40, 34, 90, 101, 110, 99, 111, 100, 101, 32, 105, 115, 32, 109, 105, 115, 115, 105, 110, 103, 32, 118, 101, 114, 115, 105, 111, 110, 32, 99, 104, 101, 99, 107, 44, 32, 112, 108, 101, 97, 115, 101, 32, 97, 100, 100, 58, 32, 114, 117, 108, 101, 32, 99, 104, 101, 99, 107, 32, 118, 101, 114, 115, 105, 111, 110, 32, 78, 46, 78, 46, 78, 34, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 72, 69, 65, 80, 32, 115, 101, 116, 117, 112, 10, 32, 32, 32, 73, 78, 32, 61, 32, 123, 32, 125, 32, 45, 45, 32, 105, 109, 112, 111, 114, 116, 32, 103, 108, 111, 98, 97, 108, 32, 68, 65, 84, 65, 32, 102, 114, 111, 109, 32, 106, 115, 111, 110, 10, 32, 32, 32, 105, 102, 32, 68, 65, 84, 65, 32, 116, 104, 101, 110, 10, 9, 32, 32, 45, 45, 32, 105, 102, 32, 112, 108, 97, 105, 110, 32, 97, 114, 114, 97, 121, 32, 99, 111, 110, 106, 111, 105, 110, 32, 105, 110, 116, 111, 32, 97, 115, 115, 111, 99, 105, 97, 116, 105, 118, 101, 10, 9, 32, 32, 73, 78, 32, 61, 32, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 102, 111, 114, 109, 97, 116, 46, 102, 117, 110, 40, 68, 65, 84, 65, 41, 32, 111, 114, 32, 123, 32, 125, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 73, 78, 46, 75, 69, 89, 83, 32, 61, 32, 123, 32, 125, 32, 45, 45, 32, 105, 109, 112, 111, 114, 116, 32, 103, 108, 111, 98, 97, 108, 32, 75, 69, 89, 83, 32, 102, 114, 111, 109, 32, 106, 115, 111, 110, 10, 32, 32, 32, 105, 102, 32, 75, 69, 89, 83, 32, 116, 104, 101, 110, 32, 73, 78, 46, 75, 69, 89, 83, 32, 61, 32, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 102, 111, 114, 109, 97, 116, 46, 102, 117, 110, 40, 75, 69, 89, 83, 41, 32, 111, 114, 32, 123, 32, 125, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 69, 88, 69, 67, 32, 122, 101, 110, 99, 111, 100, 101, 10, 32, 32, 32, 102, 111, 114, 32, 105, 44, 120, 32, 105, 110, 32, 115, 111, 114, 116, 95, 105, 112, 97, 105, 114, 115, 40, 115, 101, 108, 102, 46, 65, 83, 84, 41, 32, 100, 111, 10, 9, 32, 32, 90, 69, 78, 58, 116, 114, 97, 99, 101, 40, 120, 46, 115, 111, 117, 114, 99, 101, 41, 10, 10, 9, 32, 32, 45, 45, 32, 72, 69, 65, 80, 32, 105, 110, 116, 101, 103, 114, 105, 116, 121, 32, 103, 117, 97, 114, 100, 10, 9, 32, 32, 105, 102, 32, 67, 79, 78, 70, 46, 104, 101, 97, 112, 103, 117, 97, 114, 100, 32, 116, 104, 101, 110, 10, 9, 9, 32, 45, 45, 32, 116, 114, 105, 103, 103, 101, 114, 32, 117, 112, 111, 110, 32, 115, 119, 105, 116, 99, 104, 32, 116, 111, 32, 119, 104, 101, 110, 32, 111, 114, 32, 116, 104, 101, 110, 32, 115, 101, 99, 116, 105, 111, 110, 10, 9, 9, 32, 105, 102, 32, 120, 46, 115, 101, 99, 116, 105, 111, 110, 32, 61, 61, 32, 39, 116, 104, 101, 110, 39, 32, 111, 114, 32, 120, 46, 115, 101, 99, 116, 105, 111, 110, 32, 61, 61, 32, 39, 119, 104, 101, 110, 39, 32, 116, 104, 101, 110, 10, 9, 9, 9, 45, 45, 32, 100, 101, 108, 101, 116, 101, 32, 73, 78, 32, 109, 101, 109, 111, 114, 121, 10, 9, 9, 9, 73, 78, 46, 75, 69, 89, 83, 32, 61, 32, 123, 32, 125, 10, 9, 9, 9, 73, 78, 32, 61, 32, 123, 32, 125, 10, 9, 9, 9, 99, 111, 108, 108, 101, 99, 116, 103, 97, 114, 98, 97, 103, 101, 39, 99, 111, 108, 108, 101, 99, 116, 39, 10, 9, 9, 9, 45, 45, 32, 103, 117, 97, 114, 100, 32, 65, 67, 75, 39, 115, 32, 99, 111, 110, 116, 101, 110, 116, 115, 32, 111, 110, 32, 115, 101, 99, 116, 105, 111, 110, 32, 115, 119, 105, 116, 99, 104, 10, 9, 9, 9, 100, 101, 101, 112, 109, 97, 112, 40, 122, 101, 110, 103, 117, 97, 114, 100, 44, 65, 67, 75, 41, 10, 9, 9, 32, 101, 110, 100, 10, 9, 32, 32, 101, 110, 100, 10, 10, 9, 32, 32, 90, 69, 78, 46, 79, 75, 32, 61, 32, 116, 114, 117, 101, 10, 9, 32, 32, 101, 120, 105, 116, 99, 111, 100, 101, 40, 48, 41, 10, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 111, 107, 44, 32, 101, 114, 114, 32, 61, 32, 112, 99, 97, 108, 108, 40, 120, 46, 104, 111, 111, 107, 44, 116, 97, 98, 108, 101, 46, 117, 110, 112, 97, 99, 107, 40, 120, 46, 97, 114, 103, 115, 41, 41, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 111, 107, 32, 111, 114, 32, 110, 111, 116, 32, 90, 69, 78, 46, 79, 75, 32, 116, 104, 101, 110, 10, 9, 32, 32, 9, 32, 105, 102, 32, 101, 114, 114, 32, 116, 104, 101, 110, 32, 90, 69, 78, 58, 116, 114, 97, 99, 101, 40, 34, 92, 50, 55, 91, 51, 49, 59, 49, 109, 91, 33, 93, 92, 50, 55, 91, 48, 109, 32, 34, 46, 46, 101, 114, 114, 41, 32, 101, 110, 100, 10, 9, 9, 32, 102, 97, 116, 97, 108, 40, 120, 46, 115, 111, 117, 114, 99, 101, 41, 32, 45, 45, 32, 116, 114, 97, 99, 101, 98, 97, 99, 107, 32, 112, 114, 105, 110, 116, 32, 105, 110, 115, 105, 100, 101, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 99, 111, 108, 108, 101, 99, 116, 103, 97, 114, 98, 97, 103, 101, 39, 99, 111, 108, 108, 101, 99, 116, 39, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 80, 82, 73, 78, 84, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 90, 69, 78, 58, 116, 114, 97, 99, 101, 40, 34, 45, 45, 45, 32, 90, 101, 110, 99, 111, 100, 101, 32, 101, 120, 101, 99, 117, 116, 105, 111, 110, 32, 99, 111, 109, 112, 108, 101, 116, 101, 100, 34, 41, 10, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 79, 85, 84, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 90, 69, 78, 58, 116, 114, 97, 99, 101, 40, 34, 43, 43, 43, 32, 65, 100, 100, 105, 110, 103, 32, 115, 101, 116, 117, 112, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 116, 111, 32, 123, 32, 79, 85, 84, 32, 125, 34, 41, 10, 9, 32, 32, 105, 102, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 118, 101, 114, 115, 105, 111, 110, 105, 110, 103, 32, 61, 61, 32, 116, 114, 117, 101, 32, 116, 104, 101, 110, 10, 9, 9, 32, 79, 85, 84, 46, 122, 101, 110, 114, 111, 111, 109, 32, 61, 32, 123, 32, 125, 10, 9, 9, 32, 79, 85, 84, 46, 122, 101, 110, 114, 111, 111, 109, 46, 118, 101, 114, 115, 105, 111, 110, 32, 61, 32, 86, 69, 82, 83, 73, 79, 78, 46, 111, 114, 105, 103, 105, 110, 97, 108, 10, 9, 9, 32, 45, 45, 32, 79, 85, 84, 46, 122, 101, 110, 114, 111, 111, 109, 46, 115, 99, 101, 110, 97, 114, 105, 111, 32, 61, 32, 90, 69, 78, 46, 115, 99, 101, 110, 97, 114, 105, 111, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 90, 69, 78, 58, 116, 114, 97, 99, 101, 40, 34, 60, 60, 60, 32, 69, 110, 99, 111, 100, 105, 110, 103, 32, 123, 32, 79, 85, 84, 32, 125, 32, 116, 111, 32, 34, 46, 46, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 102, 111, 114, 109, 97, 116, 46, 110, 97, 109, 101, 41, 10, 9, 32, 32, 112, 114, 105, 110, 116, 40, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 102, 111, 114, 109, 97, 116, 46, 102, 117, 110, 40, 79, 85, 84, 41, 41, 32, 45, 45, 32, 102, 111, 114, 109, 97, 116, 115, 32, 97, 114, 101, 32, 74, 83, 79, 78, 32, 111, 114, 32, 67, 66, 79, 82, 32, 101, 116, 99, 46, 46, 46, 10, 9, 32, 32, 90, 69, 78, 58, 116, 114, 97, 99, 101, 40, 34, 62, 62, 62, 32, 69, 110, 99, 111, 100, 105, 110, 103, 32, 115, 117, 99, 99, 101, 115, 115, 102, 117, 108, 34, 41, 10, 32, 32, 32, 101, 108, 115, 101, 32, 45, 45, 32, 116, 104, 105, 115, 32, 115, 104, 111, 117, 108, 100, 32, 110, 101, 118, 101, 114, 32, 111, 99, 99, 117, 114, 32, 105, 110, 32, 122, 101, 110, 99, 111, 100, 101, 44, 32, 79, 85, 84, 32, 105, 115, 32, 97, 108, 119, 97, 121, 115, 32, 97, 32, 116, 97, 98, 108, 101, 10, 9, 32, 32, 90, 69, 78, 58, 116, 114, 97, 99, 101, 40, 34, 60, 60, 60, 32, 80, 114, 105, 110, 116, 105, 110, 103, 32, 79, 85, 84, 32, 40, 112, 108, 97, 105, 110, 32, 102, 111, 114, 109, 97, 116, 44, 32, 110, 111, 116, 32, 97, 32, 116, 97, 98, 108, 101, 41, 34, 41, 10, 9, 32, 32, 112, 114, 105, 110, 116, 40, 79, 85, 84, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 112, 114, 105, 110, 116, 32, 116, 104, 101, 32, 65, 83, 84, 32, 116, 111, 32, 115, 116, 100, 101, 114, 114, 10, 32, 32, 32, 105, 102, 32, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 65, 83, 84, 32, 61, 61, 32, 116, 114, 117, 101, 32, 116, 104, 101, 110, 10, 9, 32, 32, 112, 114, 105, 110, 116, 101, 114, 114, 40, 34, 35, 43, 65, 83, 84, 95, 66, 69, 71, 73, 78, 34, 41, 10, 9, 32, 32, 112, 114, 105, 110, 116, 101, 114, 114, 40, 67, 79, 78, 70, 46, 111, 117, 116, 112, 117, 116, 46, 102, 111, 114, 109, 97, 116, 46, 102, 117, 110, 40, 90, 69, 78, 46, 65, 83, 84, 41, 41, 10, 9, 32, 32, 112, 114, 105, 110, 116, 101, 114, 114, 40, 34, 35, 43, 65, 83, 84, 95, 69, 78, 68, 34, 41, 10, 32]);
fileData27.push.apply(fileData27, [32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 46, 116, 111, 95, 111, 99, 116, 101, 116, 40, 65, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 108, 116, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 65, 41, 10, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 40, 116, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 41, 44, 10, 9, 9, 9, 32, 32, 34, 67, 97, 110, 110, 111, 116, 32, 99, 111, 110, 118, 101, 114, 116, 32, 116, 97, 98, 108, 101, 32, 116, 111, 32, 111, 99, 116, 101, 116, 44, 32, 117, 115, 101, 32, 122, 101, 110, 99, 111, 100, 101, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 34, 44, 50, 41, 10, 32, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 39, 110, 117, 109, 98, 101, 114, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 115, 116, 114, 105, 110, 103, 40, 116, 111, 115, 116, 114, 105, 110, 103, 40, 65, 41, 41, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 65, 41, 32, 61, 61, 32, 39, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 65, 10, 9, 32, 32, 101, 108, 115, 101, 32, 45, 45, 32, 97, 108, 108, 32, 111, 116, 104, 101, 114, 32, 116, 121, 112, 101, 115, 32, 104, 97, 118, 101, 32, 58, 111, 99, 116, 101, 116, 40, 41, 32, 109, 101, 116, 104, 111, 100, 32, 116, 111, 32, 101, 120, 112, 111, 114, 116, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 65, 58, 111, 99, 116, 101, 116, 40, 41, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 114, 114, 111, 114, 40, 34, 85, 110, 107, 110, 111, 119, 110, 32, 116, 121, 112, 101, 44, 32, 99, 97, 110, 110, 111, 116, 32, 99, 111, 110, 118, 101, 114, 116, 32, 116, 111, 32, 111, 99, 116, 101, 116, 34, 44, 50, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 65, 41, 10, 32, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 65, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 10, 9, 32, 32, 114, 101, 115, 32, 61, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 65, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 79, 67, 84, 69, 84, 46, 102, 114, 111, 109, 95, 115, 116, 114, 105, 110, 103, 40, 114, 101, 115, 46, 115, 116, 114, 105, 110, 103, 115, 41, 32, 46, 46, 32, 114, 101, 115, 46, 111, 99, 116, 101, 116, 115, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 122, 101, 110, 99, 111, 100, 101, 46, 116, 111, 95, 111, 99, 116, 101, 116, 40, 65, 41, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 46, 104, 101, 97, 112, 40, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 40, 123, 32, 73, 78, 32, 61, 32, 73, 78, 44, 10, 9, 9, 9, 84, 77, 80, 32, 61, 32, 84, 77, 80, 44, 10, 9, 9, 9, 65, 67, 75, 32, 61, 32, 65, 67, 75, 44, 10, 9, 9, 9, 79, 85, 84, 32, 61, 32, 79, 85, 84, 32, 125, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 46, 100, 101, 98, 117, 103, 40, 41, 10, 32, 32, 32, 100, 101, 98, 117, 103, 95, 116, 114, 97, 99, 101, 98, 97, 99, 107, 40, 41, 10, 32, 32, 32, 100, 101, 98, 117, 103, 95, 104, 101, 97, 112, 95, 100, 117, 109, 112, 40, 41, 10, 10, 32, 32, 32, 45, 45, 32, 73, 46, 119, 97, 114, 110, 40, 90, 69, 78, 46, 116, 114, 97, 99, 101, 98, 97, 99, 107, 41, 10, 32, 32, 32, 45, 45, 32, 73, 46, 119, 97, 114, 110, 40, 123, 32, 72, 69, 65, 80, 32, 61, 32, 123, 32, 73, 78, 32, 61, 32, 73, 78, 44, 10, 32, 32, 32, 45, 45, 32, 9, 9, 9, 9, 9, 84, 77, 80, 32, 61, 32, 84, 77, 80, 44, 10, 32, 32, 32, 45, 45, 32, 9, 9, 9, 9, 9, 65, 67, 75, 32, 61, 32, 65, 67, 75, 44, 10, 32, 32, 32, 45, 45, 32, 9, 9, 9, 9, 9, 79, 85, 84, 32, 61, 32, 79, 85, 84, 32, 125, 125, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 46, 100, 101, 98, 117, 103, 95, 106, 115, 111, 110, 40, 41, 10, 32, 32, 32, 119, 114, 105, 116, 101, 40, 74, 83, 79, 78, 46, 101, 110, 99, 111, 100, 101, 40, 123, 32, 84, 82, 65, 67, 69, 32, 61, 32, 90, 69, 78, 46, 116, 114, 97, 99, 101, 98, 97, 99, 107, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 72, 69, 65, 80, 32, 61, 32, 123, 32, 73, 78, 32, 61, 32, 73, 78, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 84, 77, 80, 32, 61, 32, 84, 77, 80, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 32, 61, 32, 65, 67, 75, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 79, 85, 84, 32, 61, 32, 79, 85, 84, 32, 125, 125, 41, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 122, 101, 110, 99, 111, 100, 101, 46, 97, 115, 115, 101, 114, 116, 40, 99, 111, 110, 100, 105, 116, 105, 111, 110, 44, 32, 101, 114, 114, 109, 115, 103, 41, 10, 32, 32, 32, 105, 102, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 90, 69, 78, 46, 100, 101, 98, 117, 103, 40, 41, 32, 45, 45, 32, 112, 114, 105, 110, 116, 115, 32, 97, 108, 108, 32, 100, 97, 116, 97, 32, 105, 110, 32, 109, 101, 109, 111, 114, 121, 10, 32, 32, 32, 90, 69, 78, 58, 116, 114, 97, 99, 101, 40, 34, 69, 82, 82, 32, 34, 46, 46, 101, 114, 114, 109, 115, 103, 41, 10, 32, 32, 32, 90, 69, 78, 46, 79, 75, 32, 61, 32, 102, 97, 108, 115, 101, 10, 32, 32, 32, 101, 120, 105, 116, 99, 111, 100, 101, 40, 49, 41, 59, 10, 32, 32, 32, 101, 114, 114, 111, 114, 40, 101, 114, 114, 109, 115, 103, 44, 32, 51, 41, 10, 101, 110, 100, 10, 10, 114, 101, 116, 117, 114, 110, 32, 122, 101, 110, 99, 111, 100, 101, 10]);
Module['FS_createDataFile']('/', 'zencode.lua', fileData27, true, true, false);
var fileData28 = [];
fileData28.push.apply(fileData28, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 108, 111, 99, 97, 108, 32, 95, 99, 98, 111, 114, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 40, 39, 99, 98, 111, 114, 39, 41, 10, 10, 95, 99, 98, 111, 114, 46, 100, 101, 99, 111, 100, 101, 32, 61, 32, 95, 99, 98, 111, 114, 46, 114, 97, 119, 95, 100, 101, 99, 111, 100, 101, 10, 10, 95, 99, 98, 111, 114, 46, 101, 110, 99, 111, 100, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 116, 97, 98, 41, 10, 32, 32, 32, 45, 45, 32, 101, 110, 99, 111, 100, 101, 115, 32, 122, 101, 110, 99, 111, 100, 101, 32, 116, 121, 112, 101, 115, 32, 97, 99, 99, 111, 114, 100, 105, 110, 103, 32, 116, 111, 32, 67, 79, 68, 69, 67, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 116, 97, 98, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 32, 34, 67, 66, 79, 82, 32, 101, 110, 99, 111, 100, 101, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 110, 101, 101, 100, 115, 32, 116, 111, 32, 98, 101, 32, 97, 32, 116, 97, 98, 108, 101, 34, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 32, 125, 10, 32, 32, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 116, 97, 98, 41, 32, 100, 111, 10, 9, 32, 32, 102, 117, 110, 32, 61, 32, 103, 117, 101, 115, 115, 95, 111, 117, 116, 99, 97, 115, 116, 40, 32, 99, 104, 101, 99, 107, 95, 99, 111, 100, 101, 99, 40, 107, 41, 32, 41, 10, 9, 32, 32, 105, 102, 32, 108, 117, 97, 116, 121, 112, 101, 40, 118, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 9, 32, 114, 101, 115, 91, 107, 93, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 102, 117, 110, 44, 32, 118, 41, 10, 9, 32, 32, 101, 108, 115, 101, 10, 9, 9, 32, 114, 101, 115, 91, 107, 93, 32, 61, 32, 102, 117, 110, 40, 118, 41, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 95, 99, 98, 111, 114, 46, 114, 97, 119, 95, 101, 110, 99, 111, 100, 101, 40, 32, 114, 101, 115, 32, 41, 10, 101, 110, 100, 10, 10, 95, 99, 98, 111, 114, 46, 97, 117, 116, 111, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 108, 117, 97, 116, 121, 112, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 105, 102, 32, 116, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 45, 45, 32, 101, 120, 112, 111, 114, 116, 32, 116, 97, 98, 108, 101, 32, 116, 111, 32, 74, 83, 79, 78, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 95, 99, 98, 111, 114, 46, 101, 110, 99, 111, 100, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 116, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 45, 45, 32, 105, 109, 112, 111, 114, 116, 32, 74, 83, 79, 78, 32, 115, 116, 114, 105, 110, 103, 32, 116, 111, 32, 116, 97, 98, 108, 101, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 95, 99, 98, 111, 114, 46, 100, 101, 99, 111, 100, 101, 40, 111, 98, 106, 41, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 67, 66, 79, 82, 46, 97, 117, 116, 111, 32, 117, 110, 114, 101, 99, 111, 103, 110, 105, 115, 101, 100, 32, 105, 110, 112, 117, 116, 32, 116, 121, 112, 101, 58, 32, 34, 46, 46, 116, 44, 32, 51, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 114, 101, 116, 117, 114, 110, 32, 95, 99, 98, 111, 114, 10]);
Module['FS_createDataFile']('/', 'zenroom_cbor.lua', fileData28, true, true, false);
var fileData29 = [];
fileData29.push.apply(fileData29, [108, 111, 99, 97, 108, 32, 115, 101, 109, 118, 101, 114, 32, 61, 32, 123, 10, 32, 32, 32, 95, 86, 69, 82, 83, 73, 79, 78, 32, 32, 32, 32, 32, 61, 32, 39, 49, 46, 50, 46, 50, 39, 44, 10, 32, 32, 32, 95, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 32, 61, 32, 39, 115, 101, 109, 118, 101, 114, 32, 102, 111, 114, 32, 76, 117, 97, 39, 44, 10, 32, 32, 32, 95, 85, 82, 76, 32, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 39, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 107, 105, 107, 105, 116, 111, 47, 115, 101, 109, 118, 101, 114, 46, 108, 117, 97, 39, 10, 32, 32, 45, 45, 32, 32, 95, 76, 73, 67, 69, 78, 83, 69, 32, 32, 32, 32, 32, 61, 32, 91, 91, 10, 32, 32, 45, 45, 32, 32, 32, 77, 73, 84, 32, 76, 73, 67, 69, 78, 83, 69, 10, 10, 32, 32, 45, 45, 32, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 99, 41, 32, 50, 48, 49, 53, 32, 69, 110, 114, 105, 113, 117, 101, 32, 71, 97, 114, 99, 195, 173, 97, 32, 67, 111, 116, 97, 10, 32, 32, 45, 45, 32, 32, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 99, 41, 32, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 10, 32, 32, 45, 45, 32, 32, 32, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 105, 115, 32, 104, 101, 114, 101, 98, 121, 32, 103, 114, 97, 110, 116, 101, 100, 44, 32, 102, 114, 101, 101, 32, 111, 102, 32, 99, 104, 97, 114, 103, 101, 44, 32, 116, 111, 32, 97, 110, 121, 32, 112, 101, 114, 115, 111, 110, 32, 111, 98, 116, 97, 105, 110, 105, 110, 103, 32, 97, 10, 32, 32, 45, 45, 32, 32, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 111, 116, 104, 101, 114, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 97, 110, 100, 32, 97, 115, 115, 111, 99, 105, 97, 116, 101, 100, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 105, 108, 101, 115, 32, 40, 116, 104, 101, 10, 32, 32, 45, 45, 32, 32, 32, 34, 83, 111, 102, 116, 119, 97, 114, 101, 34, 41, 44, 32, 116, 111, 32, 100, 101, 97, 108, 32, 105, 110, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 10, 32, 32, 45, 45, 32, 32, 32, 119, 105, 116, 104, 111, 117, 116, 32, 108, 105, 109, 105, 116, 97, 116, 105, 111, 110, 32, 116, 104, 101, 32, 114, 105, 103, 104, 116, 115, 32, 116, 111, 32, 117, 115, 101, 44, 32, 99, 111, 112, 121, 44, 32, 109, 111, 100, 105, 102, 121, 44, 32, 109, 101, 114, 103, 101, 44, 32, 112, 117, 98, 108, 105, 115, 104, 44, 10, 32, 32, 45, 45, 32, 32, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 44, 32, 115, 117, 98, 108, 105, 99, 101, 110, 115, 101, 44, 32, 97, 110, 100, 47, 111, 114, 32, 115, 101, 108, 108, 32, 99, 111, 112, 105, 101, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 44, 32, 97, 110, 100, 32, 116, 111, 10, 32, 32, 45, 45, 32, 32, 32, 112, 101, 114, 109, 105, 116, 32, 112, 101, 114, 115, 111, 110, 115, 32, 116, 111, 32, 119, 104, 111, 109, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 105, 115, 32, 102, 117, 114, 110, 105, 115, 104, 101, 100, 32, 116, 111, 32, 100, 111, 32, 115, 111, 44, 32, 115, 117, 98, 106, 101, 99, 116, 32, 116, 111, 10, 32, 32, 45, 45, 32, 32, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 58, 10, 10, 32, 32, 45, 45, 32, 32, 32, 84, 104, 101, 32, 97, 98, 111, 118, 101, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 110, 111, 116, 105, 99, 101, 32, 97, 110, 100, 32, 116, 111, 116, 104, 101, 114, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 110, 111, 116, 105, 99, 101, 32, 115, 104, 97, 108, 108, 32, 98, 101, 32, 105, 110, 99, 108, 117, 100, 101, 100, 10, 32, 32, 45, 45, 32, 32, 32, 105, 110, 32, 97, 108, 108, 32, 99, 111, 112, 105, 101, 115, 32, 111, 114, 32, 115, 117, 98, 115, 116, 97, 110, 116, 105, 97, 108, 32, 112, 111, 114, 116, 105, 111, 110, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 46, 10, 10, 32, 32, 45, 45, 32, 32, 32, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 73, 83, 32, 80, 82, 79, 86, 73, 68, 69, 68, 32, 34, 65, 83, 32, 73, 83, 34, 44, 32, 87, 73, 84, 72, 79, 85, 84, 32, 87, 65, 82, 82, 65, 78, 84, 89, 32, 79, 70, 32, 65, 78, 89, 32, 75, 73, 78, 68, 44, 32, 69, 88, 80, 82, 69, 83, 83, 10, 32, 32, 45, 45, 32, 32, 32, 79, 82, 32, 73, 77, 80, 76, 73, 69, 68, 44, 32, 73, 78, 67, 76, 85, 68, 73, 78, 71, 32, 66, 85, 84, 32, 78, 79, 84, 32, 76, 73, 77, 73, 84, 69, 68, 32, 84, 79, 32, 84, 72, 69, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 79, 70, 10, 32, 32, 45, 45, 32, 32, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 44, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 32, 65, 78, 68, 32, 78, 79, 78, 73, 78, 70, 82, 73, 78, 71, 69, 77, 69, 78, 84, 46, 10, 32, 32, 45, 45, 32, 32, 32, 73, 78, 32, 78, 79, 32, 69, 86, 69, 78, 84, 32, 83, 72, 65, 76, 76, 32, 84, 72, 69, 32, 65, 85, 84, 72, 79, 82, 83, 32, 79, 82, 32, 67, 79, 80, 89, 82, 73, 71, 72, 84, 32, 72, 79, 76, 68, 69, 82, 83, 32, 66, 69, 32, 76, 73, 65, 66, 76, 69, 32, 70, 79, 82, 32, 65, 78, 89, 10, 32, 32, 45, 45, 32, 32, 32, 67, 76, 65, 73, 77, 44, 32, 68, 65, 77, 65, 71, 69, 83, 32, 79, 82, 32, 79, 84, 72, 69, 82, 32, 76, 73, 65, 66, 73, 76, 73, 84, 89, 44, 32, 87, 72, 69, 84, 72, 69, 82, 32, 73, 78, 32, 65, 78, 32, 65, 67, 84, 73, 79, 78, 32, 79, 70, 32, 67, 79, 78, 84, 82, 65, 67, 84, 44, 10, 32, 32, 45, 45, 32, 32, 32, 84, 79, 82, 84, 32, 79, 82, 32, 79, 84, 72, 69, 82, 87, 73, 83, 69, 44, 32, 65, 82, 73, 83, 73, 78, 71, 32, 70, 82, 79, 77, 44, 32, 79, 85, 84, 32, 79, 70, 32, 79, 82, 32, 73, 78, 32, 67, 79, 78, 78, 69, 67, 84, 73, 79, 78, 32, 87, 73, 84, 72, 32, 84, 72, 69, 10, 32, 32, 45, 45, 32, 32, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 79, 82, 32, 84, 72, 69, 32, 85, 83, 69, 32, 79, 82, 32, 79, 84, 72, 69, 82, 32, 68, 69, 65, 76, 73, 78, 71, 83, 32, 73, 78, 32, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 46, 10, 32, 32, 45, 45, 32, 93, 93, 10, 125, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 104, 101, 99, 107, 80, 111, 115, 105, 116, 105, 118, 101, 73, 110, 116, 101, 103, 101, 114, 40, 110, 117, 109, 98, 101, 114, 44, 32, 110, 97, 109, 101, 41, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 110, 117, 109, 98, 101, 114, 32, 62, 61, 32, 48, 44, 32, 110, 97, 109, 101, 32, 46, 46, 32, 39, 32, 109, 117, 115, 116, 32, 98, 101, 32, 97, 32, 118, 97, 108, 105, 100, 32, 112, 111, 115, 105, 116, 105, 118, 101, 32, 110, 117, 109, 98, 101, 114, 39, 41, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 109, 97, 116, 104, 46, 102, 108, 111, 111, 114, 40, 110, 117, 109, 98, 101, 114, 41, 32, 61, 61, 32, 110, 117, 109, 98, 101, 114, 44, 32, 110, 97, 109, 101, 32, 46, 46, 32, 39, 32, 109, 117, 115, 116, 32, 98, 101, 32, 97, 110, 32, 105, 110, 116, 101, 103, 101, 114, 39, 41, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 114, 101, 115, 101, 110, 116, 40, 118, 97, 108, 117, 101, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 97, 108, 117, 101, 32, 97, 110, 100, 32, 118, 97, 108, 117, 101, 32, 126, 61, 32, 39, 39, 10, 101, 110, 100, 10, 10, 45, 45, 32, 115, 112, 108, 105, 116, 66, 121, 68, 111, 116, 40, 34, 97, 46, 98, 98, 99, 46, 100, 34, 41, 32, 61, 61, 32, 123, 34, 97, 34, 44, 32, 34, 98, 98, 99, 34, 44, 32, 34, 100, 34, 125, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 112, 108, 105, 116, 66, 121, 68, 111, 116, 40, 115, 116, 114, 41, 10, 32, 32, 32, 115, 116, 114, 32, 61, 32, 115, 116, 114, 32, 111, 114, 32, 34, 34, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 44, 32, 99, 111, 117, 110, 116, 32, 61, 32, 123, 125, 44, 32, 48, 10, 32, 32, 32, 115, 116, 114, 58, 103, 115, 117, 98, 40, 34, 40, 91, 94, 37, 46, 93, 43, 41, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 41, 10, 9, 9, 9, 32, 32, 32, 99, 111, 117, 110, 116, 32, 61, 32, 99, 111, 117, 110, 116, 32, 43, 32, 49, 10, 9, 9, 9, 32, 32, 32, 116, 91, 99, 111, 117, 110, 116, 93, 32, 61, 32, 99, 10, 32, 32, 32, 101, 110, 100, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 97, 114, 115, 101, 80, 114, 101, 114, 101, 108, 101, 97, 115, 101, 65, 110, 100, 66, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 40, 115, 116, 114, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 87, 105, 116, 104, 83, 105, 103, 110, 44, 32, 98, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 32, 61, 32, 115, 116, 114, 58, 109, 97, 116, 99, 104, 40, 34, 94, 40, 45, 91, 94, 43, 93, 43, 41, 40, 43, 46, 43, 41, 36, 34, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 40, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 87, 105, 116, 104, 83, 105, 103, 110, 32, 97, 110, 100, 32, 98, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 41, 32, 116, 104, 101, 110, 10, 9, 32, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 87, 105, 116, 104, 83, 105, 103, 110, 32, 61, 32, 115, 116, 114, 58, 109, 97, 116, 99, 104, 40, 34, 94, 40, 45, 46, 43, 41, 36, 34, 41, 10, 9, 32, 32, 98, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 32, 32, 32, 32, 32, 32, 61, 32, 115, 116, 114, 58, 109, 97, 116, 99, 104, 40, 34, 94, 40, 43, 46, 43, 41, 36, 34, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 87, 105, 116, 104, 83, 105, 103, 110, 32, 111, 114, 32, 98, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 44, 32, 40, 34, 84, 104, 101, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 37, 113, 32, 109, 117, 115, 116, 32, 98, 101, 103, 105, 110, 32, 119, 105, 116, 104, 32, 43, 32, 111, 114, 32, 45, 32, 116, 111, 32, 100, 101, 110, 111, 116, 101, 32, 97, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 32, 111, 114, 32, 97, 32, 98, 117, 105, 108, 100, 34, 41, 58, 102, 111, 114, 109, 97, 116, 40, 115, 116, 114, 41, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 87, 105, 116, 104, 83, 105, 103, 110, 44, 32, 98, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 97, 114, 115, 101, 80, 114, 101, 114, 101, 108, 101, 97, 115, 101, 40, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 87, 105, 116, 104, 83, 105, 103, 110, 41, 10, 32, 32, 32, 105, 102, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 87, 105, 116, 104, 83, 105, 103, 110, 32, 116, 104, 101, 110, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 32, 61, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 87, 105, 116, 104, 83, 105, 103, 110, 58, 109, 97, 116, 99, 104, 40, 34, 94, 45, 40, 37, 119, 91, 37, 46, 37, 119, 45, 93, 42, 41, 36, 34, 41, 10, 9, 32, 32, 97, 115, 115, 101, 114, 116, 40, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 44, 32, 40, 34, 84, 104, 101, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 32, 37, 113, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 115, 108, 97, 115, 104, 32, 102, 111, 108, 108, 111, 119, 101, 100, 32, 98, 121, 32, 97, 108, 112, 104, 97, 110, 117, 109, 101, 114, 105, 99, 115, 44, 32, 100, 111, 116, 115, 32, 97, 110, 100, 32, 115, 108, 97, 115, 104, 101, 115, 34, 41, 58, 102, 111, 114, 109, 97, 116, 40, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 87, 105, 116, 104, 83, 105, 103, 110, 41, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 97, 114, 115, 101, 66, 117, 105, 108, 100, 40, 98, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 41, 10, 32, 32, 32, 105, 102, 32, 98, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 32, 116, 104, 101, 110, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 98, 117, 105, 108, 100, 32, 61, 32, 98, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 58, 109, 97, 116, 99, 104, 40, 34, 94, 37, 43, 40, 37, 119, 91, 37, 46, 37, 119, 45, 93, 42, 41, 36, 34, 41, 10, 9, 32, 32, 97, 115, 115, 101, 114, 116, 40, 98, 117, 105, 108, 100, 44, 32, 40, 34, 84, 104, 101, 32, 98, 117, 105, 108, 100, 32, 37, 113, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 43, 32, 115, 105, 103, 110, 32, 102, 111, 108, 108, 111, 119, 101, 100, 32, 98, 121, 32, 97, 108, 112, 104, 97, 110, 117, 109, 101, 114, 105, 99, 115, 44, 32, 100, 111, 116, 115, 32, 97, 110, 100, 32, 115, 108, 97, 115, 104, 101, 115, 34, 41, 58, 102, 111, 114, 109, 97, 116, 40, 98, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 41, 41, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 98, 117, 105, 108, 100, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 97, 114, 115, 101, 80, 114, 101, 114, 101, 108, 101, 97, 115, 101, 65, 110, 100, 66, 117, 105, 108, 100, 40, 115, 116, 114, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 40, 115, 116, 114, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 44, 32, 110, 105, 108, 32, 101, 110, 100, 10, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 87, 105, 116, 104, 83, 105, 103, 110, 44, 32, 98, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 32, 61, 32, 112, 97, 114, 115, 101, 80, 114, 101, 114, 101, 108, 101, 97, 115, 101, 65, 110, 100, 66, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 40, 115, 116, 114, 41, 10, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 32, 61, 32, 112, 97, 114, 115, 101, 80, 114, 101, 114, 101, 108, 101, 97, 115, 101, 40, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 87, 105, 116, 104, 83, 105, 103, 110, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 98, 117, 105, 108, 100, 32, 61, 32, 112, 97, 114, 115, 101, 66, 117, 105, 108, 100, 40, 98, 117, 105, 108, 100, 87, 105, 116, 104, 83, 105, 103, 110, 41, 10, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 44, 32, 98, 117, 105, 108, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 97, 114, 115, 101, 86, 101, 114, 115, 105, 111, 110, 40, 115, 116, 114, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 77, 97, 106, 111, 114, 44, 32, 115, 77, 105, 110, 111, 114, 44, 32, 115, 80, 97, 116, 99, 104, 44, 32, 115, 80, 114, 101, 114, 101, 108, 101, 97, 115, 101, 65, 110, 100, 66, 117, 105, 108, 100, 32, 61, 32, 115, 116, 114, 58, 109, 97, 116, 99, 104, 40, 34, 94, 40, 37, 100, 43, 41, 37, 46, 63, 40, 37, 100, 42, 41, 37, 46, 63, 40, 37, 100, 42, 41, 40, 46, 45, 41, 36, 34, 41, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 116, 121, 112, 101, 40, 115, 77, 97, 106, 111, 114, 41, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 44, 32, 40, 34, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 101, 120, 116, 114, 97, 99, 116, 32, 118, 101, 114, 115, 105, 111, 110, 32, 110, 117, 109, 98, 101, 114, 40, 115, 41, 32, 102, 114, 111, 109, 32, 37, 113, 34, 41, 58, 102, 111, 114, 109, 97, 116, 40, 115, 116, 114, 41, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 97, 106, 111, 114, 44, 32, 109, 105, 110, 111, 114, 44, 32, 112, 97, 116, 99, 104, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 115, 77, 97, 106, 111, 114, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 115, 77, 105, 110, 111, 114, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 115, 80, 97, 116, 99, 104, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 44, 32, 98, 117, 105, 108, 100, 32, 61, 32, 112, 97, 114, 115, 101, 80, 114, 101, 114, 101, 108, 101, 97, 115, 101, 65, 110, 100, 66, 117, 105, 108, 100, 40, 115, 80, 114, 101, 114, 101, 108, 101, 97, 115, 101, 65, 110, 100, 66, 117, 105, 108, 100, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 109, 97, 106, 111, 114, 44, 32, 109, 105, 110, 111, 114, 44, 32, 112, 97, 116, 99, 104, 44, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 44, 32, 98, 117, 105, 108, 100, 10, 101, 110, 100, 10, 10, 10, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 48, 32, 105, 102, 32, 97, 32, 61, 61, 32, 98, 44, 32, 45, 49, 32, 105, 102, 32, 97, 32, 60, 32, 98, 44, 32, 97, 110, 100, 32, 49, 32, 105, 102, 32, 97, 32, 62, 32, 98, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 109, 112, 97, 114, 101, 40, 97, 44, 98, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 97, 32, 61, 61, 32, 98, 32, 97, 110, 100, 32, 48, 32, 111, 114, 32, 97, 32, 60, 32, 98, 32, 97, 110, 100, 32, 45, 49, 32, 111, 114, 32, 49, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 109, 112, 97, 114, 101, 73, 100, 115, 40, 109, 121, 73, 100, 44, 32, 111, 116, 104, 101, 114, 73, 100, 41, 10, 32, 32, 32, 105, 102, 32, 109, 121, 73, 100, 32, 61, 61, 32, 111, 116, 104, 101, 114, 73, 100, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 32, 48, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 110, 111, 116, 32, 109, 121, 73, 100, 32, 32, 32, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 110, 111, 116, 32, 111, 116, 104, 101, 114, 73, 100, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 32, 49, 10, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 101, 108, 102, 78, 117, 109, 98, 101, 114, 44, 32, 111, 116, 104, 101, 114, 78, 117, 109, 98, 101, 114, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 109, 121, 73, 100, 41, 44, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 111, 116, 104, 101, 114, 73, 100, 41, 10, 10, 32, 32, 32, 105, 102, 32, 115, 101, 108, 102, 78, 117, 109, 98, 101, 114, 32, 97, 110, 100, 32, 111, 116, 104, 101, 114, 78, 117, 109, 98, 101, 114, 32, 116, 104, 101, 110, 32, 45, 45, 32, 110, 117, 109, 101, 114, 105, 99, 97, 108, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 99, 111, 109, 112, 97, 114, 101, 40, 115, 101, 108, 102, 78, 117, 109, 98, 101, 114, 44, 32, 111, 116, 104, 101, 114, 78, 117, 109, 98, 101, 114, 41, 10, 9, 32, 32, 45, 45, 32, 110, 117, 109, 101, 114, 105, 99, 97, 108, 115, 32, 97, 114, 101, 32, 97, 108, 119, 97, 121, 115, 32, 115, 109, 97, 108, 108, 101, 114, 32, 116, 104, 97, 110, 32, 97, 108, 112, 104, 97, 110, 117, 109, 115, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 101, 108, 102, 78, 117, 109, 98, 101, 114, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 45, 49, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 111, 116, 104, 101, 114, 78, 117, 109, 98, 101, 114, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 49, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 99, 111, 109, 112, 97, 114, 101, 40, 109, 121, 73, 100, 44, 32, 111, 116, 104, 101, 114, 73, 100, 41, 32, 45, 45, 32, 97, 108, 112, 104, 97, 110, 117, 109, 101, 114, 105, 99, 97, 108, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 109, 97, 108, 108, 101, 114, 73, 100, 76, 105, 115, 116, 40, 109, 121, 73, 100, 115, 44, 32, 111, 116, 104, 101, 114, 73, 100, 115, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 121, 76, 101, 110, 103, 116, 104, 32, 61, 32, 35, 109, 121, 73, 100, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 10, 10, 32, 32, 32, 102, 111, 114, 32, 105, 61, 49, 44, 32, 109, 121, 76, 101, 110, 103, 116, 104, 32, 100, 111, 10, 9, 32, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 32, 61, 32, 99, 111, 109, 112, 97, 114, 101, 73, 100, 115, 40, 109, 121, 73, 100, 115, 91, 105, 93, 44, 32, 111, 116, 104, 101, 114, 73, 100, 115, 91, 105, 93, 41, 10, 9, 32, 32, 105, 102, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 32, 126, 61, 32, 48, 32, 116, 104, 101, 110, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 32, 61, 61, 32, 45, 49, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 45, 45, 32, 105, 102, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 32, 61, 61, 32, 48, 44, 32, 99, 111, 110, 116, 105, 110, 117, 101, 32, 108, 111, 111, 112, 10, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 109, 121, 76, 101, 110, 103, 116, 104, 32, 60, 32, 35, 111, 116, 104, 101, 114, 73, 100, 115, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 109, 97, 108, 108, 101, 114, 80, 114, 101, 114, 101, 108, 101, 97, 115, 101, 40, 109, 105, 110, 101, 44, 32, 111, 116, 104, 101, 114, 41, 10, 32, 32, 32, 105, 102, 32, 109, 105, 110, 101, 32, 61, 61, 32, 111, 116, 104, 101, 114, 32, 111, 114, 32, 110, 111, 116, 32, 109, 105, 110, 101, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 110, 111, 116, 32, 111, 116, 104, 101, 114, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 109, 97, 108, 108, 101, 114, 73, 100, 76, 105, 115, 116, 40, 115, 112, 108, 105, 116, 66, 121, 68, 111, 116, 40, 109, 105, 110, 101, 41, 44, 32, 115, 112, 108, 105, 116, 66, 121, 68, 111, 116, 40, 111, 116, 104, 101, 114, 41, 41, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 109, 101, 116, 104, 111, 100, 115, 32, 61, 32, 123, 125, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 101, 116, 104, 111, 100, 115, 58, 110, 101, 120, 116, 77, 97, 106, 111, 114, 40, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 109, 118, 101, 114, 40, 115, 101, 108, 102, 46, 109, 97, 106, 111, 114, 32, 43, 32, 49, 44, 32, 48, 44, 32, 48, 41, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 101, 116, 104, 111, 100, 115, 58, 110, 101, 120, 116, 77, 105, 110, 111, 114, 40, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 109, 118, 101, 114, 40, 115, 101, 108, 102, 46, 109, 97, 106, 111, 114, 44, 32, 115, 101, 108, 102, 46, 109, 105, 110, 111, 114, 32, 43, 32, 49, 44, 32, 48, 41, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 101, 116, 104, 111, 100, 115, 58, 110, 101, 120, 116, 80, 97, 116, 99, 104, 40, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 109, 118, 101, 114, 40, 115, 101, 108, 102, 46, 109, 97, 106, 111, 114, 44, 32, 115, 101, 108, 102, 46, 109, 105, 110, 111, 114, 44, 32, 115, 101, 108, 102, 46, 112, 97, 116, 99, 104, 32, 43, 32, 49, 41, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 109, 116, 32, 61, 32, 123, 32, 95, 95, 105, 110, 100, 101, 120, 32, 61, 32, 109, 101, 116, 104, 111, 100, 115, 32, 125, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 116, 58, 95, 95, 101, 113, 40, 111, 116, 104, 101, 114, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 46, 109, 97, 106, 111, 114, 32, 61, 61, 32, 111, 116, 104, 101, 114, 46, 109, 97, 106, 111, 114, 32, 97, 110, 100, 10, 9, 32, 32, 115, 101, 108, 102, 46, 109, 105, 110, 111, 114, 32, 61, 61, 32, 111, 116, 104, 101, 114, 46, 109, 105, 110, 111, 114, 32, 97, 110, 100, 10, 9, 32, 32, 115, 101, 108, 102, 46, 112, 97, 116, 99, 104, 32, 61, 61, 32, 111, 116, 104, 101, 114, 46, 112, 97, 116, 99, 104, 32, 97, 110, 100, 10, 9, 32, 32, 115, 101, 108, 102, 46, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 32, 61, 61, 32, 111, 116, 104, 101, 114, 46, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 10, 32, 32, 32, 45, 45, 32, 110, 111, 116, 105, 99, 101, 32, 116, 104, 97, 116, 32, 98, 117, 105, 108, 100, 32, 105, 115, 32, 105, 103, 110, 111, 114, 101, 100, 32, 102, 111, 114, 32, 112, 114, 101, 99, 101, 100, 101, 110, 99, 101, 32, 105, 110, 32, 115, 101, 109, 118, 101, 114, 32, 50, 46, 48, 46, 48, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 116, 58, 95, 95, 108, 116, 40, 111, 116, 104, 101, 114, 41, 10, 32, 32, 32, 105, 102, 32, 115, 101, 108, 102, 46, 109, 97, 106, 111, 114, 32, 126, 61, 32, 111, 116, 104, 101, 114, 46, 109, 97, 106, 111, 114, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 46, 109, 97, 106, 111, 114, 32, 60, 32, 111, 116, 104, 101, 114, 46, 109, 97, 106, 111, 114, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 115, 101, 108, 102, 46, 109, 105, 110, 111, 114, 32, 126, 61, 32, 111, 116, 104, 101, 114, 46, 109, 105, 110, 111, 114, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 46, 109, 105, 110, 111, 114, 32, 60, 32, 111, 116, 104, 101, 114, 46, 109, 105, 110, 111, 114, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 115, 101, 108, 102, 46, 112, 97, 116, 99, 104, 32, 126, 61, 32, 111, 116, 104, 101, 114, 46, 112, 97, 116, 99, 104, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 46, 112, 97, 116, 99, 104, 32, 60, 32, 111, 116, 104, 101, 114, 46, 112, 97, 116, 99, 104, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 109, 97, 108, 108, 101, 114, 80, 114, 101, 114, 101, 108, 101, 97, 115, 101, 40, 115, 101, 108, 102, 46, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 44, 32, 111, 116, 104, 101, 114, 46, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 41, 10, 32, 32, 32, 45, 45, 32, 110, 111, 116, 105, 99, 101, 32, 116, 104, 97, 116, 32, 98, 117, 105, 108, 100, 32, 105, 115, 32, 105, 103, 110, 111, 114, 101, 100, 32, 102, 111, 114, 32, 112, 114, 101, 99, 101, 100, 101, 110, 99, 101, 32, 105, 110, 32, 115, 101, 109, 118, 101, 114, 32, 50, 46, 48, 46, 48, 10, 101, 110, 100, 10, 45, 45, 32, 84, 104, 105, 115, 32, 119, 111, 114, 107, 115, 32, 108, 105, 107, 101, 32, 116, 104, 101, 32, 34, 112, 101, 115, 115, 105, 109, 105, 115, 115, 116, 105, 99, 32, 111, 112, 101, 114, 97, 116, 111, 114, 34, 32, 105, 110, 32, 82, 117, 98, 121, 103, 101, 109, 115, 46, 10, 45, 45, 32, 105, 102, 32, 97, 32, 97, 110, 100, 32, 98, 32, 97, 114, 101, 32, 118, 101, 114, 115, 105, 111, 110, 115, 44, 32, 97, 32, 94, 32, 98, 32, 109, 101, 97, 110, 115, 32, 34, 98, 32, 105, 115, 32, 98, 97, 99, 107, 119, 97, 114, 100, 115, 45, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 119, 105, 116, 104, 32, 97, 34, 10, 45, 45, 32, 105, 110, 32, 111, 116, 104, 101, 114, 32, 119, 111, 114, 100, 115, 44, 32, 34, 105, 116, 39, 115, 32, 115, 97, 102, 101, 32, 116, 111, 32, 117, 112, 103, 114, 97, 100, 101, 32, 102, 114, 111, 109, 32, 97, 32, 116, 111, 32, 98, 34, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 116, 58, 95, 95, 112, 111, 119, 40, 111, 116, 104, 101, 114, 41, 10, 32, 32, 32, 105, 102, 32, 115, 101, 108, 102, 46, 109, 97, 106, 111, 114, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 32, 61, 61, 32, 111, 116, 104, 101, 114, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 46, 109, 97, 106, 111, 114, 32, 61, 61, 32, 111, 116, 104, 101, 114, 46, 109, 97, 106, 111, 114, 32, 97, 110, 100, 10, 9, 32, 32, 115, 101, 108, 102, 46, 109, 105, 110, 111, 114, 32, 60, 61, 32, 111, 116, 104, 101, 114, 46, 109, 105, 110, 111, 114, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 101, 119, 40, 109, 97, 106, 111, 114, 44, 32, 109, 105, 110, 111, 114, 44, 32, 112, 97, 116, 99, 104, 44, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 44, 32, 98, 117, 105, 108, 100, 41, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 109, 97, 106, 111, 114, 44, 32, 34, 65, 116, 32, 108, 101, 97, 115, 116, 32, 111, 110, 101, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 115, 32, 110, 101, 101, 100, 101, 100, 34, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 117, 108, 116, 32, 61, 32, 123, 32, 125, 10, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 109, 97, 106, 111, 114, 41, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 115, 117, 108, 116, 46, 111, 114, 105, 103, 105, 110, 97, 108, 32, 61, 32, 109, 97, 106, 111, 114, 10, 9, 32, 32, 109, 97, 106, 111, 114, 44, 109, 105, 110, 111, 114, 44, 112, 97, 116, 99, 104, 44, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 44, 98, 117, 105, 108, 100, 32, 61, 32, 112, 97, 114, 115, 101, 86, 101, 114, 115, 105, 111, 110, 40, 109, 97, 106, 111, 114, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 112, 97, 116, 99, 104, 32, 61, 32, 112, 97, 116, 99, 104, 32, 111, 114, 32, 48, 10, 32, 32, 32, 109, 105, 110, 111, 114, 32, 61, 32, 109, 105, 110, 111, 114, 32, 111, 114, 32, 48, 10, 10, 32, 32, 32, 99, 104, 101, 99, 107, 80, 111, 115, 105, 116, 105, 118, 101, 73, 110, 116, 101, 103, 101, 114, 40, 109, 97, 106, 111, 114, 44, 32, 34, 109, 97, 106, 111, 114, 34, 41, 10, 32, 32, 32, 99, 104, 101, 99, 107, 80, 111, 115, 105, 116, 105, 118, 101, 73, 110, 116, 101, 103, 101, 114, 40, 109, 105, 110, 111, 114, 44, 32, 34, 109, 105, 110, 111, 114, 34, 41, 10, 32, 32, 32, 99, 104, 101, 99, 107, 80, 111, 115, 105, 116, 105, 118, 101, 73, 110, 116, 101, 103, 101, 114, 40, 112, 97, 116, 99, 104, 44, 32, 34, 112, 97, 116, 99, 104, 34, 41, 10, 10, 32, 32, 32, 114, 101, 115, 117, 108, 116, 46, 109, 97, 106, 111, 114, 32, 61, 32, 109, 97, 106, 111, 114, 10, 32, 32, 32, 114, 101, 115, 117, 108, 116, 46, 109, 105, 110, 111, 114, 32, 61, 32, 109, 105, 110, 111, 114, 10, 32, 32, 32, 114, 101, 115, 117, 108, 116, 46, 112, 97, 116, 99, 104, 32, 61, 32, 112, 97, 116, 99, 104, 10, 32, 32, 32, 114, 101, 115, 117, 108, 116, 46, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 32, 61, 32, 112, 114, 101, 114, 101, 108, 101, 97, 115, 101, 10, 32, 32, 32, 114, 101, 115, 117, 108, 116, 46, 98, 117, 105, 108, 100, 32, 61, 32, 98, 117, 105, 108, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 114, 101, 115, 117, 108, 116, 44, 32, 109, 116, 41, 10, 101, 110, 100, 10, 10, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 115, 101, 109, 118, 101, 114, 44, 32, 123, 32, 95, 95, 99, 97, 108, 108, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 95, 44, 32, 46, 46, 46, 41, 32, 114, 101, 116, 117, 114, 110, 32, 110, 101, 119, 40, 46, 46, 46, 41, 32, 101, 110, 100, 32, 125, 41, 10, 115, 101, 109, 118, 101, 114, 46, 95, 86, 69, 82, 83, 73, 79, 78, 61, 32, 115, 101, 109, 118, 101, 114, 40, 115, 101, 109, 118, 101, 114, 46, 95, 86, 69, 82, 83, 73, 79, 78, 41, 10, 10, 114, 101, 116, 117, 114, 110, 32, 115, 101, 109, 118, 101, 114, 10]);
Module['FS_createDataFile']('/', 'semver.lua', fileData29, true, true, false);
var fileData30 = [];
fileData30.push.apply(fileData30, [108, 111, 99, 97, 108, 32, 109, 97, 99, 104, 105, 110, 101, 32, 61, 32, 123, 125, 10, 109, 97, 99, 104, 105, 110, 101, 46, 95, 95, 105, 110, 100, 101, 120, 32, 61, 32, 109, 97, 99, 104, 105, 110, 101, 10, 10, 108, 111, 99, 97, 108, 32, 78, 79, 78, 69, 32, 61, 32, 34, 110, 111, 110, 101, 34, 10, 108, 111, 99, 97, 108, 32, 65, 83, 89, 78, 67, 32, 61, 32, 34, 97, 115, 121, 110, 99, 34, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 97, 108, 108, 95, 104, 97, 110, 100, 108, 101, 114, 40, 104, 97, 110, 100, 108, 101, 114, 44, 32, 112, 97, 114, 97, 109, 115, 41, 10, 32, 32, 105, 102, 32, 104, 97, 110, 100, 108, 101, 114, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 104, 97, 110, 100, 108, 101, 114, 40, 116, 97, 98, 108, 101, 46, 117, 110, 112, 97, 99, 107, 40, 112, 97, 114, 97, 109, 115, 41, 41, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 114, 101, 97, 116, 101, 95, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 40, 110, 97, 109, 101, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 99, 97, 110, 44, 32, 116, 111, 44, 32, 102, 114, 111, 109, 44, 32, 112, 97, 114, 97, 109, 115, 10, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 40, 115, 101, 108, 102, 44, 32, 46, 46, 46, 41, 10, 32, 32, 32, 32, 105, 102, 32, 115, 101, 108, 102, 46, 97, 115, 121, 110, 99, 83, 116, 97, 116, 101, 32, 61, 61, 32, 78, 79, 78, 69, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 99, 97, 110, 44, 32, 116, 111, 32, 61, 32, 115, 101, 108, 102, 58, 99, 97, 110, 40, 110, 97, 109, 101, 41, 10, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 61, 32, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 10, 32, 32, 32, 32, 32, 32, 112, 97, 114, 97, 109, 115, 32, 61, 32, 123, 32, 115, 101, 108, 102, 44, 32, 110, 97, 109, 101, 44, 32, 102, 114, 111, 109, 44, 32, 116, 111, 44, 32, 46, 46, 46, 125, 10, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 99, 97, 110, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 84, 114, 97, 110, 115, 105, 116, 105, 111, 110, 105, 110, 103, 69, 118, 101, 110, 116, 32, 61, 32, 110, 97, 109, 101, 10, 10, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 98, 101, 102, 111, 114, 101, 82, 101, 116, 117, 114, 110, 32, 61, 32, 99, 97, 108, 108, 95, 104, 97, 110, 100, 108, 101, 114, 40, 115, 101, 108, 102, 91, 34, 111, 110, 98, 101, 102, 111, 114, 101, 34, 32, 46, 46, 32, 110, 97, 109, 101, 93, 44, 32, 112, 97, 114, 97, 109, 115, 41, 10, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 108, 101, 97, 118, 101, 82, 101, 116, 117, 114, 110, 32, 61, 32, 99, 97, 108, 108, 95, 104, 97, 110, 100, 108, 101, 114, 40, 115, 101, 108, 102, 91, 34, 111, 110, 108, 101, 97, 118, 101, 34, 32, 46, 46, 32, 102, 114, 111, 109, 93, 44, 32, 112, 97, 114, 97, 109, 115, 41, 10, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 98, 101, 102, 111, 114, 101, 82, 101, 116, 117, 114, 110, 32, 61, 61, 32, 102, 97, 108, 115, 101, 32, 111, 114, 32, 108, 101, 97, 118, 101, 82, 101, 116, 117, 114, 110, 32, 61, 61, 32, 102, 97, 108, 115, 101, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 97, 115, 121, 110, 99, 83, 116, 97, 116, 101, 32, 61, 32, 110, 97, 109, 101, 32, 46, 46, 32, 34, 87, 97, 105, 116, 105, 110, 103, 79, 110, 76, 101, 97, 118, 101, 34, 10, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 108, 101, 97, 118, 101, 82, 101, 116, 117, 114, 110, 32, 126, 61, 32, 65, 83, 89, 78, 67, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 40, 115, 101, 108, 102, 44, 32, 46, 46, 46, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 101, 108, 102, 46, 97, 115, 121, 110, 99, 83, 116, 97, 116, 101, 32, 61, 61, 32, 110, 97, 109, 101, 32, 46, 46, 32, 34, 87, 97, 105, 116, 105, 110, 103, 79, 110, 76, 101, 97, 118, 101, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 32, 61, 32, 116, 111, 10, 10, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 101, 110, 116, 101, 114, 82, 101, 116, 117, 114, 110, 32, 61, 32, 99, 97, 108, 108, 95, 104, 97, 110, 100, 108, 101, 114, 40, 115, 101, 108, 102, 91, 34, 111, 110, 101, 110, 116, 101, 114, 34, 32, 46, 46, 32, 116, 111, 93, 32, 111, 114, 32, 115, 101, 108, 102, 91, 34, 111, 110, 34, 32, 46, 46, 32, 116, 111, 93, 44, 32, 112, 97, 114, 97, 109, 115, 41, 10, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 97, 115, 121, 110, 99, 83, 116, 97, 116, 101, 32, 61, 32, 110, 97, 109, 101, 32, 46, 46, 32, 34, 87, 97, 105, 116, 105, 110, 103, 79, 110, 69, 110, 116, 101, 114, 34, 10, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 101, 110, 116, 101, 114, 82, 101, 116, 117, 114, 110, 32, 126, 61, 32, 65, 83, 89, 78, 67, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 40, 115, 101, 108, 102, 44, 32, 46, 46, 46, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 101, 108, 102, 46, 97, 115, 121, 110, 99, 83, 116, 97, 116, 101, 32, 61, 61, 32, 110, 97, 109, 101, 32, 46, 46, 32, 34, 87, 97, 105, 116, 105, 110, 103, 79, 110, 69, 110, 116, 101, 114, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 95, 104, 97, 110, 100, 108, 101, 114, 40, 115, 101, 108, 102, 91, 34, 111, 110, 97, 102, 116, 101, 114, 34, 32, 46, 46, 32, 110, 97, 109, 101, 93, 32, 111, 114, 32, 115, 101, 108, 102, 91, 34, 111, 110, 34, 32, 46, 46, 32, 110, 97, 109, 101, 93, 44, 32, 112, 97, 114, 97, 109, 115, 41, 10, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 95, 104, 97, 110, 100, 108, 101, 114, 40, 115, 101, 108, 102, 91, 34, 111, 110, 115, 116, 97, 116, 101, 99, 104, 97, 110, 103, 101, 34, 93, 44, 32, 112, 97, 114, 97, 109, 115, 41, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 97, 115, 121, 110, 99, 83, 116, 97, 116, 101, 32, 61, 32, 78, 79, 78, 69, 10, 32, 32, 32, 32, 32, 32, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 84, 114, 97, 110, 115, 105, 116, 105, 111, 110, 105, 110, 103, 69, 118, 101, 110, 116, 32, 61, 32, 110, 105, 108, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 9, 105, 102, 32, 115, 116, 114, 105, 110, 103, 46, 102, 105, 110, 100, 40, 115, 101, 108, 102, 46, 97, 115, 121, 110, 99, 83, 116, 97, 116, 101, 44, 32, 34, 87, 97, 105, 116, 105, 110, 103, 79, 110, 76, 101, 97, 118, 101, 34, 41, 32, 111, 114, 32, 115, 116, 114, 105, 110, 103, 46, 102, 105, 110, 100, 40, 115, 101, 108, 102, 46, 97, 115, 121, 110, 99, 83, 116, 97, 116, 101, 44, 32, 34, 87, 97, 105, 116, 105, 110, 103, 79, 110, 69, 110, 116, 101, 114, 34, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 9, 9, 115, 101, 108, 102, 46, 97, 115, 121, 110, 99, 83, 116, 97, 116, 101, 32, 61, 32, 78, 79, 78, 69, 10, 32, 32, 32, 32, 9, 9, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 40, 115, 101, 108, 102, 44, 32, 46, 46, 46, 41, 10, 32, 32, 32, 32, 9, 9, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 9, 101, 110, 100, 10, 32, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 32, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 84, 114, 97, 110, 115, 105, 116, 105, 111, 110, 105, 110, 103, 69, 118, 101, 110, 116, 32, 61, 32, 110, 105, 108, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 100, 100, 95, 116, 111, 95, 109, 97, 112, 40, 109, 97, 112, 44, 32, 101, 118, 101, 110, 116, 41, 10, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 101, 118, 101, 110, 116, 46, 102, 114, 111, 109, 41, 32, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 109, 97, 112, 91, 101, 118, 101, 110, 116, 46, 102, 114, 111, 109, 93, 32, 61, 32, 101, 118, 101, 110, 116, 46, 116, 111, 10, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 102, 111, 114, 32, 95, 44, 32, 102, 114, 111, 109, 32, 105, 110, 32, 105, 112, 97, 105, 114, 115, 40, 101, 118, 101, 110, 116, 46, 102, 114, 111, 109, 41, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 109, 97, 112, 91, 102, 114, 111, 109, 93, 32, 61, 32, 101, 118, 101, 110, 116, 46, 116, 111, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 99, 104, 105, 110, 101, 46, 99, 114, 101, 97, 116, 101, 40, 111, 112, 116, 105, 111, 110, 115, 41, 10, 32, 32, 97, 115, 115, 101, 114, 116, 40, 111, 112, 116, 105, 111, 110, 115, 46, 101, 118, 101, 110, 116, 115, 41, 10, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 115, 109, 32, 61, 32, 123, 125, 10, 32, 32, 115, 101, 116, 109, 101, 116, 97, 116, 97, 98, 108, 101, 40, 102, 115, 109, 44, 32, 109, 97, 99, 104, 105, 110, 101, 41, 10, 10, 32, 32, 102, 115, 109, 46, 111, 112, 116, 105, 111, 110, 115, 32, 61, 32, 111, 112, 116, 105, 111, 110, 115, 10, 32, 32, 102, 115, 109, 46, 99, 117, 114, 114, 101, 110, 116, 32, 61, 32, 111, 112, 116, 105, 111, 110, 115, 46, 105, 110, 105, 116, 105, 97, 108, 32, 111, 114, 32, 39, 110, 111, 110, 101, 39, 10, 32, 32, 102, 115, 109, 46, 97, 115, 121, 110, 99, 83, 116, 97, 116, 101, 32, 61, 32, 78, 79, 78, 69, 10, 32, 32, 102, 115, 109, 46, 101, 118, 101, 110, 116, 115, 32, 61, 32, 123, 125, 10, 10, 32, 32, 102, 111, 114, 32, 95, 44, 32, 101, 118, 101, 110, 116, 32, 105, 110, 32, 105, 112, 97, 105, 114, 115, 40, 111, 112, 116, 105, 111, 110, 115, 46, 101, 118, 101, 110, 116, 115, 32, 111, 114, 32, 123, 125, 41, 32, 100, 111, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 97, 109, 101, 32, 61, 32, 101, 118, 101, 110, 116, 46, 110, 97, 109, 101, 10, 32, 32, 32, 32, 102, 115, 109, 91, 110, 97, 109, 101, 93, 32, 61, 32, 102, 115, 109, 91, 110, 97, 109, 101, 93, 32, 111, 114, 32, 99, 114, 101, 97, 116, 101, 95, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 40, 110, 97, 109, 101, 41, 10, 32, 32, 32, 32, 102, 115, 109, 46, 101, 118, 101, 110, 116, 115, 91, 110, 97, 109, 101, 93, 32, 61, 32, 102, 115, 109, 46, 101, 118, 101, 110, 116, 115, 91, 110, 97, 109, 101, 93, 32, 111, 114, 32, 123, 32, 109, 97, 112, 32, 61, 32, 123, 125, 32, 125, 10, 32, 32, 32, 32, 97, 100, 100, 95, 116, 111, 95, 109, 97, 112, 40, 102, 115, 109, 46, 101, 118, 101, 110, 116, 115, 91, 110, 97, 109, 101, 93, 46, 109, 97, 112, 44, 32, 101, 118, 101, 110, 116, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 10, 32, 32, 102, 111, 114, 32, 110, 97, 109, 101, 44, 32, 99, 97, 108, 108, 98, 97, 99, 107, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 111, 112, 116, 105, 111, 110, 115, 46, 99, 97, 108, 108, 98, 97, 99, 107, 115, 32, 111, 114, 32, 123, 125, 41, 32, 100, 111, 10, 32, 32, 32, 32, 102, 115, 109, 91, 110, 97, 109, 101, 93, 32, 61, 32, 99, 97, 108, 108, 98, 97, 99, 107, 10, 32, 32, 101, 110, 100, 10, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 115, 109, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 99, 104, 105, 110, 101, 58, 105, 115, 40, 115, 116, 97, 116, 101, 41, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 32, 61, 61, 32, 115, 116, 97, 116, 101, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 99, 104, 105, 110, 101, 58, 99, 97, 110, 40, 101, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 101, 118, 101, 110, 116, 32, 61, 32, 115, 101, 108, 102, 46, 101, 118, 101, 110, 116, 115, 91, 101, 93, 10, 32, 32, 108, 111, 99, 97, 108, 32, 116, 111, 32, 61, 32, 101, 118, 101, 110, 116, 32, 97, 110, 100, 32, 101, 118, 101, 110, 116, 46, 109, 97, 112, 91, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 93, 32, 111, 114, 32, 101, 118, 101, 110, 116, 46, 109, 97, 112, 91, 39, 42, 39, 93, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 111, 32, 126, 61, 32, 110, 105, 108, 44, 32, 116, 111, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 99, 104, 105, 110, 101, 58, 99, 97, 110, 110, 111, 116, 40, 101, 41, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 111, 116, 32, 115, 101, 108, 102, 58, 99, 97, 110, 40, 101, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 99, 104, 105, 110, 101, 58, 116, 111, 100, 111, 116, 40, 102, 105, 108, 101, 110, 97, 109, 101, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 100, 111, 116, 102, 105, 108, 101, 32, 61, 32, 105, 111, 46, 111, 112, 101, 110, 40, 102, 105, 108, 101, 110, 97, 109, 101, 44, 39, 119, 39, 41, 10, 32, 32, 100, 111, 116, 102, 105, 108, 101, 58, 119, 114, 105, 116, 101, 40, 39, 100, 105, 103, 114, 97, 112, 104, 32, 123, 92, 110, 39, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 118, 101, 110, 116, 44, 102, 114, 111, 109, 44, 116, 111, 41, 10, 32, 32, 32, 32, 100, 111, 116, 102, 105, 108, 101, 58, 119, 114, 105, 116, 101, 40, 115, 116, 114, 105, 110, 103, 46, 102, 111, 114, 109, 97, 116, 40, 39, 37, 115, 32, 45, 62, 32, 37, 115, 32, 91, 108, 97, 98, 101, 108, 61, 37, 115, 93, 59, 92, 110, 39, 44, 102, 114, 111, 109, 44, 116, 111, 44, 101, 118, 101, 110, 116, 41, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 102, 111, 114, 32, 95, 44, 32, 101, 118, 101, 110, 116, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 115, 101, 108, 102, 46, 111, 112, 116, 105, 111, 110, 115, 46, 101, 118, 101, 110, 116, 115, 41, 32, 100, 111, 10, 32, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 101, 118, 101, 110, 116, 46, 102, 114, 111, 109, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 95, 44, 32, 102, 114, 111, 109, 32, 105, 110, 32, 105, 112, 97, 105, 114, 115, 40, 101, 118, 101, 110, 116, 46, 102, 114, 111, 109, 41, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 40, 101, 118, 101, 110, 116, 46, 110, 97, 109, 101, 44, 102, 114, 111, 109, 44, 101, 118, 101, 110, 116, 46, 116, 111, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 40, 101, 118, 101, 110, 116, 46, 110, 97, 109, 101, 44, 101, 118, 101, 110, 116, 46, 102, 114, 111, 109, 44, 101, 118, 101, 110, 116, 46, 116, 111, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 100, 111, 116, 102, 105, 108, 101, 58, 119, 114, 105, 116, 101, 40, 39, 125, 92, 110, 39, 41, 10, 32, 32, 100, 111, 116, 102, 105, 108, 101, 58, 99, 108, 111, 115, 101, 40, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 99, 104, 105, 110, 101, 58, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 40, 101, 118, 101, 110, 116, 41, 10, 32, 32, 105, 102, 32, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 84, 114, 97, 110, 115, 105, 116, 105, 111, 110, 105, 110, 103, 69, 118, 101, 110, 116, 32, 61, 61, 32, 101, 118, 101, 110, 116, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 101, 108, 102, 91, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 84, 114, 97, 110, 115, 105, 116, 105, 111, 110, 105, 110, 103, 69, 118, 101, 110, 116, 93, 40, 115, 101, 108, 102, 41, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 99, 104, 105, 110, 101, 58, 99, 97, 110, 99, 101, 108, 84, 114, 97, 110, 115, 105, 116, 105, 111, 110, 40, 101, 118, 101, 110, 116, 41, 10, 32, 32, 105, 102, 32, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 84, 114, 97, 110, 115, 105, 116, 105, 111, 110, 105, 110, 103, 69, 118, 101, 110, 116, 32, 61, 61, 32, 101, 118, 101, 110, 116, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 115, 101, 108, 102, 46, 97, 115, 121, 110, 99, 83, 116, 97, 116, 101, 32, 61, 32, 78, 79, 78, 69, 10, 32, 32, 32, 32, 115, 101, 108, 102, 46, 99, 117, 114, 114, 101, 110, 116, 84, 114, 97, 110, 115, 105, 116, 105, 111, 110, 105, 110, 103, 69, 118, 101, 110, 116, 32, 61, 32, 110, 105, 108, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 109, 97, 99, 104, 105, 110, 101, 46, 78, 79, 78, 69, 32, 61, 32, 78, 79, 78, 69, 10, 109, 97, 99, 104, 105, 110, 101, 46, 65, 83, 89, 78, 67, 32, 61, 32, 65, 83, 89, 78, 67, 10, 10, 114, 101, 116, 117, 114, 110, 32, 109, 97, 99, 104, 105, 110, 101, 10]);
Module['FS_createDataFile']('/', 'statemachine.lua', fileData30, true, true, false);
var fileData31 = [];
fileData31.push.apply(fileData31, [45, 45, 10, 45, 45, 32, 106, 115, 111, 110, 46, 108, 117, 97, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 99, 41, 32, 50, 48, 49, 57, 32, 114, 120, 105, 10, 45, 45, 10, 45, 45, 32, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 105, 115, 32, 104, 101, 114, 101, 98, 121, 32, 103, 114, 97, 110, 116, 101, 100, 44, 32, 102, 114, 101, 101, 32, 111, 102, 32, 99, 104, 97, 114, 103, 101, 44, 32, 116, 111, 32, 97, 110, 121, 32, 112, 101, 114, 115, 111, 110, 32, 111, 98, 116, 97, 105, 110, 105, 110, 103, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 10, 45, 45, 32, 116, 104, 105, 115, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 97, 110, 100, 32, 97, 115, 115, 111, 99, 105, 97, 116, 101, 100, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 105, 108, 101, 115, 32, 40, 116, 104, 101, 32, 34, 83, 111, 102, 116, 119, 97, 114, 101, 34, 41, 44, 32, 116, 111, 32, 100, 101, 97, 108, 32, 105, 110, 10, 45, 45, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 119, 105, 116, 104, 111, 117, 116, 32, 108, 105, 109, 105, 116, 97, 116, 105, 111, 110, 32, 116, 104, 101, 32, 114, 105, 103, 104, 116, 115, 32, 116, 111, 10, 45, 45, 32, 117, 115, 101, 44, 32, 99, 111, 112, 121, 44, 32, 109, 111, 100, 105, 102, 121, 44, 32, 109, 101, 114, 103, 101, 44, 32, 112, 117, 98, 108, 105, 115, 104, 44, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 44, 32, 115, 117, 98, 108, 105, 99, 101, 110, 115, 101, 44, 32, 97, 110, 100, 47, 111, 114, 32, 115, 101, 108, 108, 32, 99, 111, 112, 105, 101, 115, 10, 45, 45, 32, 111, 102, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 44, 32, 97, 110, 100, 32, 116, 111, 32, 112, 101, 114, 109, 105, 116, 32, 112, 101, 114, 115, 111, 110, 115, 32, 116, 111, 32, 119, 104, 111, 109, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 105, 115, 32, 102, 117, 114, 110, 105, 115, 104, 101, 100, 32, 116, 111, 32, 100, 111, 10, 45, 45, 32, 115, 111, 44, 32, 115, 117, 98, 106, 101, 99, 116, 32, 116, 111, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 58, 10, 45, 45, 10, 45, 45, 32, 84, 104, 101, 32, 97, 98, 111, 118, 101, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 110, 111, 116, 105, 99, 101, 32, 97, 110, 100, 32, 116, 104, 105, 115, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 110, 111, 116, 105, 99, 101, 32, 115, 104, 97, 108, 108, 32, 98, 101, 32, 105, 110, 99, 108, 117, 100, 101, 100, 32, 105, 110, 32, 97, 108, 108, 10, 45, 45, 32, 99, 111, 112, 105, 101, 115, 32, 111, 114, 32, 115, 117, 98, 115, 116, 97, 110, 116, 105, 97, 108, 32, 112, 111, 114, 116, 105, 111, 110, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 46, 10, 45, 45, 10, 45, 45, 32, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 73, 83, 32, 80, 82, 79, 86, 73, 68, 69, 68, 32, 34, 65, 83, 32, 73, 83, 34, 44, 32, 87, 73, 84, 72, 79, 85, 84, 32, 87, 65, 82, 82, 65, 78, 84, 89, 32, 79, 70, 32, 65, 78, 89, 32, 75, 73, 78, 68, 44, 32, 69, 88, 80, 82, 69, 83, 83, 32, 79, 82, 10, 45, 45, 32, 73, 77, 80, 76, 73, 69, 68, 44, 32, 73, 78, 67, 76, 85, 68, 73, 78, 71, 32, 66, 85, 84, 32, 78, 79, 84, 32, 76, 73, 77, 73, 84, 69, 68, 32, 84, 79, 32, 84, 72, 69, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 79, 70, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 44, 10, 45, 45, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 32, 65, 78, 68, 32, 78, 79, 78, 73, 78, 70, 82, 73, 78, 71, 69, 77, 69, 78, 84, 46, 32, 73, 78, 32, 78, 79, 32, 69, 86, 69, 78, 84, 32, 83, 72, 65, 76, 76, 32, 84, 72, 69, 10, 45, 45, 32, 65, 85, 84, 72, 79, 82, 83, 32, 79, 82, 32, 67, 79, 80, 89, 82, 73, 71, 72, 84, 32, 72, 79, 76, 68, 69, 82, 83, 32, 66, 69, 32, 76, 73, 65, 66, 76, 69, 32, 70, 79, 82, 32, 65, 78, 89, 32, 67, 76, 65, 73, 77, 44, 32, 68, 65, 77, 65, 71, 69, 83, 32, 79, 82, 32, 79, 84, 72, 69, 82, 10, 45, 45, 32, 76, 73, 65, 66, 73, 76, 73, 84, 89, 44, 32, 87, 72, 69, 84, 72, 69, 82, 32, 73, 78, 32, 65, 78, 32, 65, 67, 84, 73, 79, 78, 32, 79, 70, 32, 67, 79, 78, 84, 82, 65, 67, 84, 44, 32, 84, 79, 82, 84, 32, 79, 82, 32, 79, 84, 72, 69, 82, 87, 73, 83, 69, 44, 32, 65, 82, 73, 83, 73, 78, 71, 32, 70, 82, 79, 77, 44, 10, 45, 45, 32, 79, 85, 84, 32, 79, 70, 32, 79, 82, 32, 73, 78, 32, 67, 79, 78, 78, 69, 67, 84, 73, 79, 78, 32, 87, 73, 84, 72, 32, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 79, 82, 32, 84, 72, 69, 32, 85, 83, 69, 32, 79, 82, 32, 79, 84, 72, 69, 82, 32, 68, 69, 65, 76, 73, 78, 71, 83, 32, 73, 78, 32, 84, 72, 69, 10, 45, 45, 32, 83, 79, 70, 84, 87, 65, 82, 69, 46, 10, 45, 45, 10, 10, 108, 111, 99, 97, 108, 32, 106, 115, 111, 110, 32, 61, 32, 123, 32, 95, 118, 101, 114, 115, 105, 111, 110, 32, 61, 32, 34, 48, 46, 49, 46, 50, 34, 32, 125, 10, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 45, 45, 32, 69, 110, 99, 111, 100, 101, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 10, 108, 111, 99, 97, 108, 32, 101, 110, 99, 111, 100, 101, 10, 10, 108, 111, 99, 97, 108, 32, 101, 115, 99, 97, 112, 101, 95, 99, 104, 97, 114, 95, 109, 97, 112, 32, 61, 32, 123, 10, 32, 32, 91, 32, 34, 92, 92, 34, 32, 93, 32, 61, 32, 34, 92, 92, 92, 92, 34, 44, 10, 32, 32, 91, 32, 34, 92, 34, 34, 32, 93, 32, 61, 32, 34, 92, 92, 92, 34, 34, 44, 10, 32, 32, 91, 32, 34, 92, 98, 34, 32, 93, 32, 61, 32, 34, 92, 92, 98, 34, 44, 10, 32, 32, 91, 32, 34, 92, 102, 34, 32, 93, 32, 61, 32, 34, 92, 92, 102, 34, 44, 10, 32, 32, 91, 32, 34, 92, 110, 34, 32, 93, 32, 61, 32, 34, 92, 92, 110, 34, 44, 10, 32, 32, 91, 32, 34, 92, 114, 34, 32, 93, 32, 61, 32, 34, 92, 92, 114, 34, 44, 10, 32, 32, 91, 32, 34, 92, 116, 34, 32, 93, 32, 61, 32, 34, 92, 92, 116, 34, 44, 10, 125, 10, 10, 108, 111, 99, 97, 108, 32, 101, 115, 99, 97, 112, 101, 95, 99, 104, 97, 114, 95, 109, 97, 112, 95, 105, 110, 118, 32, 61, 32, 123, 32, 91, 32, 34, 92, 92, 47, 34, 32, 93, 32, 61, 32, 34, 47, 34, 32, 125, 10, 102, 111, 114, 32, 107, 44, 32, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 101, 115, 99, 97, 112, 101, 95, 99, 104, 97, 114, 95, 109, 97, 112, 41, 32, 100, 111, 10, 32, 32, 101, 115, 99, 97, 112, 101, 95, 99, 104, 97, 114, 95, 109, 97, 112, 95, 105, 110, 118, 91, 118, 93, 32, 61, 32, 107, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 115, 99, 97, 112, 101, 95, 99, 104, 97, 114, 40, 99, 41, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 101, 115, 99, 97, 112, 101, 95, 99, 104, 97, 114, 95, 109, 97, 112, 91, 99, 93, 32, 111, 114, 32, 115, 116, 114, 105, 110, 103, 46, 102, 111, 114, 109, 97, 116, 40, 34, 92, 92, 117, 37, 48, 52, 120, 34, 44, 32, 99, 58, 98, 121, 116, 101, 40, 41, 41, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 95, 110, 105, 108, 40, 118, 97, 108, 41, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 34, 110, 117, 108, 108, 34, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 95, 116, 97, 98, 108, 101, 40, 118, 97, 108, 44, 32, 115, 116, 97, 99, 107, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 125, 10, 32, 32, 115, 116, 97, 99, 107, 32, 61, 32, 115, 116, 97, 99, 107, 32, 111, 114, 32, 123, 125, 10, 10, 32, 32, 45, 45, 32, 67, 105, 114, 99, 117, 108, 97, 114, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 63, 10, 32, 32, 105, 102, 32, 115, 116, 97, 99, 107, 91, 118, 97, 108, 93, 32, 116, 104, 101, 110, 32, 101, 114, 114, 111, 114, 40, 34, 99, 105, 114, 99, 117, 108, 97, 114, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 34, 41, 32, 101, 110, 100, 10, 10, 32, 32, 115, 116, 97, 99, 107, 91, 118, 97, 108, 93, 32, 61, 32, 116, 114, 117, 101, 10, 10, 32, 32, 105, 102, 32, 114, 97, 119, 103, 101, 116, 40, 118, 97, 108, 44, 32, 49, 41, 32, 126, 61, 32, 110, 105, 108, 32, 111, 114, 32, 110, 101, 120, 116, 40, 118, 97, 108, 41, 32, 61, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 45, 45, 32, 84, 114, 101, 97, 116, 32, 97, 115, 32, 97, 114, 114, 97, 121, 32, 45, 45, 32, 99, 104, 101, 99, 107, 32, 107, 101, 121, 115, 32, 97, 114, 101, 32, 118, 97, 108, 105, 100, 32, 97, 110, 100, 32, 105, 116, 32, 105, 115, 32, 110, 111, 116, 32, 115, 112, 97, 114, 115, 101, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 32, 61, 32, 48, 10, 32, 32, 32, 32, 102, 111, 114, 32, 107, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 118, 97, 108, 41, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 107, 41, 32, 126, 61, 32, 34, 110, 117, 109, 98, 101, 114, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 114, 114, 111, 114, 40, 34, 105, 110, 118, 97, 108, 105, 100, 32, 116, 97, 98, 108, 101, 58, 32, 109, 105, 120, 101, 100, 32, 111, 114, 32, 105, 110, 118, 97, 108, 105, 100, 32, 107, 101, 121, 32, 116, 121, 112, 101, 115, 34, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 110, 32, 61, 32, 110, 32, 43, 32, 49, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 110, 32, 126, 61, 32, 35, 118, 97, 108, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 101, 114, 114, 111, 114, 40, 34, 105, 110, 118, 97, 108, 105, 100, 32, 116, 97, 98, 108, 101, 58, 32, 115, 112, 97, 114, 115, 101, 32, 97, 114, 114, 97, 121, 34, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 45, 45, 32, 69, 110, 99, 111, 100, 101, 10, 32, 32, 32, 32, 102, 111, 114, 32, 105, 44, 32, 118, 32, 105, 110, 32, 115, 111, 114, 116, 95, 105, 112, 97, 105, 114, 115, 40, 118, 97, 108, 41, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 114, 101, 115, 44, 32, 101, 110, 99, 111, 100, 101, 40, 118, 44, 32, 115, 116, 97, 99, 107, 41, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 115, 116, 97, 99, 107, 91, 118, 97, 108, 93, 32, 61, 32, 110, 105, 108, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 34, 91, 34, 32, 46, 46, 32, 116, 97, 98, 108, 101, 46, 99, 111, 110, 99, 97, 116, 40, 114, 101, 115, 44, 32, 34, 44, 34, 41, 32, 46, 46, 32, 34, 93, 34, 10, 10, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 45, 45, 32, 84, 114, 101, 97, 116, 32, 97, 115, 32, 97, 110, 32, 111, 98, 106, 101, 99, 116, 10, 32, 32, 32, 32, 102, 111, 114, 32, 107, 44, 32, 118, 32, 105, 110, 32, 115, 111, 114, 116, 95, 112, 97, 105, 114, 115, 40, 118, 97, 108, 41, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 107, 41, 32, 126, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 114, 114, 111, 114, 40, 34, 105, 110, 118, 97, 108, 105, 100, 32, 116, 97, 98, 108, 101, 58, 32, 109, 105, 120, 101, 100, 32, 111, 114, 32, 105, 110, 118, 97, 108, 105, 100, 32, 107, 101, 121, 32, 116, 121, 112, 101, 115, 34, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 114, 101, 115, 44, 32, 101, 110, 99, 111, 100, 101, 40, 107, 44, 32, 115, 116, 97, 99, 107, 41, 32, 46, 46, 32, 34, 58, 34, 32, 46, 46, 32, 101, 110, 99, 111, 100, 101, 40, 118, 44, 32, 115, 116, 97, 99, 107, 41, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 115, 116, 97, 99, 107, 91, 118, 97, 108, 93, 32, 61, 32, 110, 105, 108, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 34, 123, 34, 32, 46, 46, 32, 116, 97, 98, 108, 101, 46, 99, 111, 110, 99, 97, 116, 40, 114, 101, 115, 44, 32, 34, 44, 34, 41, 32, 46, 46, 32, 34, 125, 34, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 95, 115, 116, 114, 105, 110, 103, 40, 118, 97, 108, 41, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 39, 34, 39, 32, 46, 46, 32, 118, 97, 108, 58, 103, 115, 117, 98, 40, 39, 91, 37, 122, 92, 49, 45, 92, 51, 49, 92, 92, 34, 93, 39, 44, 32, 101, 115, 99, 97, 112, 101, 95, 99, 104, 97, 114, 41, 32, 46, 46, 32, 39, 34, 39, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 95, 110, 117, 109, 98, 101, 114, 40, 118, 97, 108, 41, 10, 32, 32, 45, 45, 32, 67, 104, 101, 99, 107, 32, 102, 111, 114, 32, 78, 97, 78, 44, 32, 45, 105, 110, 102, 32, 97, 110, 100, 32, 105, 110, 102, 10, 32, 32, 45, 45, 32, 105, 102, 32, 118, 97, 108, 32, 126, 61, 32, 118, 97, 108, 32, 111, 114, 32, 118, 97, 108, 32, 60, 61, 32, 45, 109, 97, 116, 104, 46, 104, 117, 103, 101, 32, 111, 114, 32, 118, 97, 108, 32, 62, 61, 32, 109, 97, 116, 104, 46, 104, 117, 103, 101, 32, 116, 104, 101, 110, 10, 32, 32, 45, 45, 32, 32, 32, 101, 114, 114, 111, 114, 40, 34, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 110, 117, 109, 98, 101, 114, 32, 118, 97, 108, 117, 101, 32, 39, 34, 32, 46, 46, 32, 116, 111, 115, 116, 114, 105, 110, 103, 40, 118, 97, 108, 41, 32, 46, 46, 32, 34, 39, 34, 41, 10, 32, 32, 45, 45, 32, 101, 110, 100, 10, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 115, 116, 114, 105, 110, 103, 46, 102, 111, 114, 109, 97, 116, 40, 34, 37, 46, 49, 52, 103, 34, 44, 32, 118, 97, 108, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 97, 108, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 99, 111, 100, 101, 95, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 97, 108, 41, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 104, 101, 120, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 97, 115, 32, 115, 116, 114, 105, 110, 103, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 39, 34, 39, 32, 46, 46, 32, 115, 116, 114, 116, 111, 107, 40, 116, 111, 115, 116, 114, 105, 110, 103, 40, 118, 97, 108, 41, 41, 91, 50, 93, 32, 46, 46, 32, 39, 34, 39, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 116, 121, 112, 101, 95, 102, 117, 110, 99, 95, 109, 97, 112, 32, 61, 32, 123, 10, 32, 32, 91, 32, 34, 110, 105, 108, 34, 32, 32, 32, 32, 32, 93, 32, 61, 32, 101, 110, 99, 111, 100, 101, 95, 110, 105, 108, 44, 10, 32, 32, 91, 32, 34, 116, 97, 98, 108, 101, 34, 32, 32, 32, 93, 32, 61, 32, 101, 110, 99, 111, 100, 101, 95, 116, 97, 98, 108, 101, 44, 10, 32, 32, 91, 32, 34, 115, 116, 114, 105, 110, 103, 34, 32, 32, 93, 32, 61, 32, 101, 110, 99, 111, 100, 101, 95, 115, 116, 114, 105, 110, 103, 44, 10, 32, 32, 91, 32, 34, 110, 117, 109, 98, 101, 114, 34, 32, 32, 93, 32, 61, 32, 101, 110, 99, 111, 100, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 102, 117, 110, 99, 116, 105, 111, 110, 34, 93, 32, 61, 32, 101, 110, 99, 111, 100, 101, 95, 102, 117, 110, 99, 116, 105, 111, 110, 44, 10, 32, 32, 91, 32, 34, 98, 111, 111, 108, 101, 97, 110, 34, 32, 93, 32, 61, 32, 116, 111, 115, 116, 114, 105, 110, 103, 44, 10, 125, 10, 10, 10, 101, 110, 99, 111, 100, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 97, 108, 44, 32, 115, 116, 97, 99, 107, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 116, 121, 112, 101, 40, 118, 97, 108, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 32, 61, 32, 116, 121, 112, 101, 95, 102, 117, 110, 99, 95, 109, 97, 112, 91, 116, 93, 10, 32, 32, 105, 102, 32, 102, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 40, 118, 97, 108, 44, 32, 115, 116, 97, 99, 107, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 101, 114, 114, 111, 114, 40, 34, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 116, 121, 112, 101, 32, 39, 34, 32, 46, 46, 32, 116, 32, 46, 46, 32, 34, 39, 34, 41, 10, 101, 110, 100, 10, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 106, 115, 111, 110, 46, 114, 97, 119, 95, 101, 110, 99, 111, 100, 101, 40, 118, 97, 108, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 40, 101, 110, 99, 111, 100, 101, 40, 118, 97, 108, 41, 41, 10, 32, 32, 32, 45, 45, 32, 115, 111, 114, 116, 10, 32, 32, 32, 45, 45, 32, 108, 111, 99, 97, 108, 32, 111, 117, 116, 32, 61, 32, 34, 123, 32, 34, 10, 32, 32, 32, 45, 45, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 115, 111, 114, 116, 95, 112, 97, 105, 114, 115, 40, 118, 97, 108, 41, 32, 100, 111, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 111, 117, 116, 32, 61, 32, 111, 117, 116, 32, 46, 46, 32, 39, 34, 39, 46, 46, 107, 46, 46, 39, 34, 58, 32, 39, 10, 32, 32, 32, 45, 45, 32, 9, 32, 32, 111, 117, 116, 32, 61, 32, 111, 117, 116, 32, 46, 46, 32, 101, 110, 99, 111, 100, 101, 40, 118, 41, 46, 46, 34, 44, 34, 10, 32, 32, 32, 45, 45, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 40, 111, 117, 116, 58, 115, 117, 98, 40, 49, 44, 45, 50, 41, 32, 46, 46, 32, 34, 125, 34, 41, 10, 101, 110, 100, 10, 10, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 45, 45, 32, 68, 101, 99, 111, 100, 101, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 10, 108, 111, 99, 97, 108, 32, 112, 97, 114, 115, 101, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 114, 101, 97, 116, 101, 95, 115, 101, 116, 40, 46, 46, 46, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 125, 10, 32, 32, 102, 111, 114, 32, 105, 32, 61, 32, 49, 44, 32, 115, 101, 108, 101, 99, 116, 40, 34, 35, 34, 44, 32, 46, 46, 46, 41, 32, 100, 111, 10, 32, 32, 32, 32, 114, 101, 115, 91, 32, 115, 101, 108, 101, 99, 116, 40, 105, 44, 32, 46, 46, 46, 41, 32, 93, 32, 61, 32, 116, 114, 117, 101, 10, 32, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 115, 112, 97, 99, 101, 95, 99, 104, 97, 114, 115, 32, 32, 32, 61, 32, 99, 114, 101, 97, 116, 101, 95, 115, 101, 116, 40, 34, 32, 34, 44, 32, 34, 92, 116, 34, 44, 32, 34, 92, 114, 34, 44, 32, 34, 92, 110, 34, 41, 10, 108, 111, 99, 97, 108, 32, 100, 101, 108, 105, 109, 95, 99, 104, 97, 114, 115, 32, 32, 32, 61, 32, 99, 114, 101, 97, 116, 101, 95, 115, 101, 116, 40, 34, 32, 34, 44, 32, 34, 92, 116, 34, 44, 32, 34, 92, 114, 34, 44, 32, 34, 92, 110, 34, 44, 32, 34, 93, 34, 44, 32, 34, 125, 34, 44, 32, 34, 44, 34, 41, 10, 108, 111, 99, 97, 108, 32, 101, 115, 99, 97, 112, 101, 95, 99, 104, 97, 114, 115, 32, 32, 61, 32, 99, 114, 101, 97, 116, 101, 95, 115, 101, 116, 40, 34, 92, 92, 34, 44, 32, 34, 47, 34, 44, 32, 39, 34, 39, 44, 32, 34, 98, 34, 44, 32, 34, 102, 34, 44, 32, 34, 110, 34, 44, 32, 34, 114, 34, 44, 32, 34, 116, 34, 44, 32, 34, 117, 34, 41, 10, 108, 111, 99, 97, 108, 32, 108, 105, 116, 101, 114, 97, 108, 115, 32, 32, 32, 32, 32, 32, 61, 32, 99, 114, 101, 97, 116, 101, 95, 115, 101, 116, 40, 34, 116, 114, 117, 101, 34, 44, 32, 34, 102, 97, 108, 115, 101, 34, 44, 32, 34, 110, 117, 108, 108, 34, 41, 10, 10, 108, 111, 99, 97, 108, 32, 108, 105, 116, 101, 114, 97, 108, 95, 109, 97, 112, 32, 61, 32, 123, 10, 32, 32, 91, 32, 34, 116, 114, 117, 101, 34, 32, 32, 93, 32, 61, 32, 116, 114, 117, 101, 44, 10, 32, 32, 91, 32, 34, 102, 97, 108, 115, 101, 34, 32, 93, 32, 61, 32, 102, 97, 108, 115, 101, 44, 10, 32, 32, 91, 32, 34, 110, 117, 108, 108, 34, 32, 32, 93, 32, 61, 32, 110, 105, 108, 44, 10, 125, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 101, 120, 116, 95, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 105, 100, 120, 44, 32, 115, 101, 116, 44, 32, 110, 101, 103, 97, 116, 101, 41, 10, 32, 32, 102, 111, 114, 32, 105, 32, 61, 32, 105, 100, 120, 44, 32, 35, 115, 116, 114, 32, 100, 111, 10, 32, 32, 32, 32, 105, 102, 32, 115, 101, 116, 91, 115, 116, 114, 58, 115, 117, 98, 40, 105, 44, 32, 105, 41, 93, 32, 126, 61, 32, 110, 101, 103, 97, 116, 101, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 105, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 35, 115, 116, 114, 32, 43, 32, 49, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 105, 100, 120, 44, 32, 109, 115, 103, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 108, 105, 110, 101, 95, 99, 111, 117, 110, 116, 32, 61, 32, 49, 10, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 108, 95, 99, 111, 117, 110, 116, 32, 61, 32, 49, 10, 32, 32, 102, 111, 114, 32, 105, 32, 61, 32, 49, 44, 32, 105, 100, 120, 32, 45, 32, 49, 32, 100, 111, 10, 32, 32, 32, 32, 99, 111, 108, 95, 99, 111, 117, 110, 116, 32, 61, 32, 99, 111, 108, 95, 99, 111, 117, 110, 116, 32, 43, 32, 49, 10, 32, 32, 32, 32, 105, 102, 32, 115, 116, 114, 58, 115, 117, 98, 40, 105, 44, 32, 105, 41, 32, 61, 61, 32, 34, 92, 110, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 95, 99, 111, 117, 110, 116, 32, 61, 32, 108, 105, 110, 101, 95, 99, 111, 117, 110, 116, 32, 43, 32, 49, 10, 32, 32, 32, 32, 32, 32, 99, 111, 108, 95, 99, 111, 117, 110, 116, 32, 61, 32, 49, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 101, 114, 114, 111, 114, 40, 32, 115, 116, 114, 105, 110, 103, 46, 102, 111, 114, 109, 97, 116, 40, 34, 37, 115, 32, 97, 116, 32, 108, 105, 110, 101, 32, 37, 100, 32, 99, 111, 108, 32, 37, 100, 34, 44, 32, 109, 115, 103, 44, 32, 108, 105, 110, 101, 95, 99, 111, 117, 110, 116, 44, 32, 99, 111, 108, 95, 99, 111, 117, 110, 116, 41, 32, 41, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 111, 100, 101, 112, 111, 105, 110, 116, 95, 116, 111, 95, 117, 116, 102, 56, 40, 110, 41, 10, 32, 32, 45, 45, 32, 104, 116, 116, 112, 58, 47, 47, 115, 99, 114, 105, 112, 116, 115, 46, 115, 105, 108, 46, 111, 114, 103, 47, 99, 109, 115, 47, 115, 99, 114, 105, 112, 116, 115, 47, 112, 97, 103, 101, 46, 112, 104, 112, 63, 115, 105, 116, 101, 95, 105, 100, 61, 110, 114, 115, 105, 38, 105, 100, 61, 105, 119, 115, 45, 97, 112, 112, 101, 110, 100, 105, 120, 97, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 32, 61, 32, 109, 97, 116, 104, 46, 102, 108, 111, 111, 114, 10, 32, 32, 105, 102, 32, 110, 32, 60, 61, 32, 48, 120, 55, 102, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 116, 114, 105, 110, 103, 46, 99, 104, 97, 114, 40, 110, 41, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 110, 32, 60, 61, 32, 48, 120, 55, 102, 102, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 116, 114, 105, 110, 103, 46, 99, 104, 97, 114, 40, 102, 40, 110, 32, 47, 32, 54, 52, 41, 32, 43, 32, 49, 57, 50, 44, 32, 110, 32, 37, 32, 54, 52, 32, 43, 32, 49, 50, 56, 41, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 110, 32, 60, 61, 32, 48, 120, 102, 102, 102, 102, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 116, 114, 105, 110, 103, 46, 99, 104, 97, 114, 40, 102, 40, 110, 32, 47, 32, 52, 48, 57, 54, 41, 32, 43, 32, 50, 50, 52, 44, 32, 102, 40, 110, 32, 37, 32, 52, 48, 57, 54, 32, 47, 32, 54, 52, 41, 32, 43, 32, 49, 50, 56, 44, 32, 110, 32, 37, 32, 54, 52, 32, 43, 32, 49, 50, 56, 41, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 110, 32, 60, 61, 32, 48, 120, 49, 48, 102, 102, 102, 102, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 116, 114, 105, 110, 103, 46, 99, 104, 97, 114, 40, 102, 40, 110, 32, 47, 32, 50, 54, 50, 49, 52, 52, 41, 32, 43, 32, 50, 52, 48, 44, 32, 102, 40, 110, 32, 37, 32, 50, 54, 50, 49, 52, 52, 32, 47, 32, 52, 48, 57, 54, 41, 32, 43, 32, 49, 50, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 40, 110, 32, 37, 32, 52, 48, 57, 54, 32, 47, 32, 54, 52, 41, 32, 43, 32, 49, 50, 56, 44, 32, 110, 32, 37, 32, 54, 52, 32, 43, 32, 49, 50, 56, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 101, 114, 114, 111, 114, 40, 32, 115, 116, 114, 105, 110, 103, 46, 102, 111, 114, 109, 97, 116, 40, 34, 105, 110, 118, 97, 108, 105, 100, 32, 117, 110, 105, 99, 111, 100, 101, 32, 99, 111, 100, 101, 112, 111, 105, 110, 116, 32, 39, 37, 120, 39, 34, 44, 32, 110, 41, 32, 41, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 97, 114, 115, 101, 95, 117, 110, 105, 99, 111, 100, 101, 95, 101, 115, 99, 97, 112, 101, 40, 115, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 110, 49, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 32, 115, 58, 115, 117, 98, 40, 51, 44, 32, 54, 41, 44, 32, 32, 49, 54, 32, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 110, 50, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 32, 115, 58, 115, 117, 98, 40, 57, 44, 32, 49, 50, 41, 44, 32, 49, 54, 32, 41, 10, 32, 32, 45, 45, 32, 83, 117, 114, 114, 111, 103, 97, 116, 101, 32, 112, 97, 105, 114, 63, 10, 32, 32, 105, 102, 32, 110, 50, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 99, 111, 100, 101, 112, 111, 105, 110, 116, 95, 116, 111, 95, 117, 116, 102, 56, 40, 40, 110, 49, 32, 45, 32, 48, 120, 100, 56, 48, 48, 41, 32, 42, 32, 48, 120, 52, 48, 48, 32, 43, 32, 40, 110, 50, 32, 45, 32, 48, 120, 100, 99, 48, 48, 41, 32, 43, 32, 48, 120, 49, 48, 48, 48, 48, 41, 10, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 99, 111, 100, 101, 112, 111, 105, 110, 116, 95, 116, 111, 95, 117, 116, 102, 56, 40, 110, 49, 41, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 97, 114, 115, 101, 95, 115, 116, 114, 105, 110, 103, 40, 115, 116, 114, 44, 32, 105, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 104, 97, 115, 95, 117, 110, 105, 99, 111, 100, 101, 95, 101, 115, 99, 97, 112, 101, 32, 61, 32, 102, 97, 108, 115, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 104, 97, 115, 95, 115, 117, 114, 114, 111, 103, 97, 116, 101, 95, 101, 115, 99, 97, 112, 101, 32, 61, 32, 102, 97, 108, 115, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 104, 97, 115, 95, 101, 115, 99, 97, 112, 101, 32, 61, 32, 102, 97, 108, 115, 101, 10, 32, 32, 108, 111, 99, 97, 108, 32, 108, 97, 115, 116, 10, 32, 32, 102, 111, 114, 32, 106, 32, 61, 32, 105, 32, 43, 32, 49, 44, 32, 35, 115, 116, 114, 32, 100, 111, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 120, 32, 61, 32, 115, 116, 114, 58, 98, 121, 116, 101, 40, 106, 41, 10, 10, 32, 32, 32, 32, 105, 102, 32, 120, 32, 60, 32, 51, 50, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 106, 44, 32, 34, 99, 111, 110, 116, 114, 111, 108, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 105, 110, 32, 115, 116, 114, 105, 110, 103, 34, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 10, 32, 32, 32, 32, 105, 102, 32, 108, 97, 115, 116, 32, 61, 61, 32, 57, 50, 32, 116, 104, 101, 110, 32, 45, 45, 32, 34, 92, 92, 34, 32, 40, 101, 115, 99, 97, 112, 101, 32, 99, 104, 97, 114, 41, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 120, 32, 61, 61, 32, 49, 49, 55, 32, 116, 104, 101, 110, 32, 45, 45, 32, 34, 117, 34, 32, 40, 117, 110, 105, 99, 111, 100, 101, 32, 101, 115, 99, 97, 112, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 104, 101, 120, 32, 61, 32, 115, 116, 114, 58, 115, 117, 98, 40, 106, 32, 43, 32, 49, 44, 32, 106, 32, 43, 32, 53, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 104, 101, 120, 58, 102, 105, 110, 100, 40, 34, 37, 120, 37, 120, 37, 120, 37, 120, 34, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 106, 44, 32, 34, 105, 110, 118, 97, 108, 105, 100, 32, 117, 110, 105, 99, 111, 100, 101, 32, 101, 115, 99, 97, 112, 101, 32, 105, 110, 32, 115, 116, 114, 105, 110, 103, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 104, 101, 120, 58, 102, 105, 110, 100, 40, 34, 94, 91, 100, 68, 93, 91, 56, 57, 97, 65, 98, 66, 93, 34, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 97, 115, 95, 115, 117, 114, 114, 111, 103, 97, 116, 101, 95, 101, 115, 99, 97, 112, 101, 32, 61, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 97, 115, 95, 117, 110, 105, 99, 111, 100, 101, 95, 101, 115, 99, 97, 112, 101, 32, 61, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 99, 104, 97, 114, 40, 120, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 101, 115, 99, 97, 112, 101, 95, 99, 104, 97, 114, 115, 91, 99, 93, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 106, 44, 32, 34, 105, 110, 118, 97, 108, 105, 100, 32, 101, 115, 99, 97, 112, 101, 32, 99, 104, 97, 114, 32, 39, 34, 32, 46, 46, 32, 99, 32, 46, 46, 32, 34, 39, 32, 105, 110, 32, 115, 116, 114, 105, 110, 103, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 104, 97, 115, 95, 101, 115, 99, 97, 112, 101, 32, 61, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 108, 97, 115, 116, 32, 61, 32, 110, 105, 108, 10, 10, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 120, 32, 61, 61, 32, 51, 52, 32, 116, 104, 101, 110, 32, 45, 45, 32, 39, 34, 39, 32, 40, 101, 110, 100, 32, 111, 102, 32, 115, 116, 114, 105, 110, 103, 41, 10, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 32, 61, 32, 115, 116, 114, 58, 115, 117, 98, 40, 105, 32, 43, 32, 49, 44, 32, 106, 32, 45, 32, 49, 41, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 104, 97, 115, 95, 115, 117, 114, 114, 111, 103, 97, 116, 101, 95, 101, 115, 99, 97, 112, 101, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 32, 61, 32, 115, 58, 103, 115, 117, 98, 40, 34, 92, 92, 117, 91, 100, 68, 93, 91, 56, 57, 97, 65, 98, 66, 93, 46, 46, 92, 92, 117, 46, 46, 46, 46, 34, 44, 32, 112, 97, 114, 115, 101, 95, 117, 110, 105, 99, 111, 100, 101, 95, 101, 115, 99, 97, 112, 101, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 104, 97, 115, 95, 117, 110, 105, 99, 111, 100, 101, 95, 101, 115, 99, 97, 112, 101, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 32, 61, 32, 115, 58, 103, 115, 117, 98, 40, 34, 92, 92, 117, 46, 46, 46, 46, 34, 44, 32, 112, 97, 114, 115, 101, 95, 117, 110, 105, 99, 111, 100, 101, 95, 101, 115, 99, 97, 112, 101, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 104, 97, 115, 95, 101, 115, 99, 97, 112, 101, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 32, 61, 32, 115, 58, 103, 115, 117, 98, 40, 34, 92, 92, 46, 34, 44, 32, 101, 115, 99, 97, 112, 101, 95, 99, 104, 97, 114, 95, 109, 97, 112, 95, 105, 110, 118, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 44, 32, 106, 32, 43, 32, 49, 10, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 108, 97, 115, 116, 32, 61, 32, 120, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 34, 101, 120, 112, 101, 99, 116, 101, 100, 32, 99, 108, 111, 115, 105, 110, 103, 32, 113, 117, 111, 116, 101, 32, 102, 111, 114, 32, 115, 116, 114, 105, 110, 103, 34, 41, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 40, 115, 116, 114, 44, 32, 105, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 120, 32, 61, 32, 110, 101, 120, 116, 95, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 100, 101, 108, 105, 109, 95, 99, 104, 97, 114, 115, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 115, 32, 61, 32, 115, 116, 114, 58, 115, 117, 98, 40, 105, 44, 32, 120, 32, 45, 32, 49, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 110, 32, 61, 32, 116, 111, 110, 117, 109, 98, 101, 114, 40, 115, 41, 10, 32, 32, 105, 102, 32, 110, 111, 116, 32, 110, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 34, 105, 110, 118, 97, 108, 105, 100, 32, 110, 117, 109, 98, 101, 114, 32, 39, 34, 32, 46, 46, 32, 115, 32, 46, 46, 32, 34, 39, 34, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 44, 32, 120, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 97, 114, 115, 101, 95, 108, 105, 116, 101, 114, 97, 108, 40, 115, 116, 114, 44, 32, 105, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 120, 32, 61, 32, 110, 101, 120, 116, 95, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 100, 101, 108, 105, 109, 95, 99, 104, 97, 114, 115, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 119, 111, 114, 100, 32, 61, 32, 115, 116, 114, 58, 115, 117, 98, 40, 105, 44, 32, 120, 32, 45, 32, 49, 41, 10, 32, 32, 105, 102, 32, 110, 111, 116, 32, 108, 105, 116, 101, 114, 97, 108, 115, 91, 119, 111, 114, 100, 93, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 34, 105, 110, 118, 97, 108, 105, 100, 32, 108, 105, 116, 101, 114, 97, 108, 32, 39, 34, 32, 46, 46, 32, 119, 111, 114, 100, 32, 46, 46, 32, 34, 39, 34, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 108, 105, 116, 101, 114, 97, 108, 95, 109, 97, 112, 91, 119, 111, 114, 100, 93, 44, 32, 120, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 97, 114, 115, 101, 95, 97, 114, 114, 97, 121, 40, 115, 116, 114, 44, 32, 105, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 125, 10, 32, 32, 108, 111, 99, 97, 108, 32, 110, 32, 61, 32, 49, 10, 32, 32, 105, 32, 61, 32, 105, 32, 43, 32, 49, 10, 32, 32, 119, 104, 105, 108, 101, 32, 49, 32, 100, 111, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 120, 10, 32, 32, 32, 32, 105, 32, 61, 32, 110, 101, 120, 116, 95, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 115, 112, 97, 99, 101, 95, 99, 104, 97, 114, 115, 44, 32, 116, 114, 117, 101, 41, 10, 32, 32, 32, 32, 45, 45, 32, 69, 109, 112, 116, 121, 32, 47, 32, 101, 110, 100, 32, 111, 102, 32, 97, 114, 114, 97, 121, 63, 10, 32, 32, 32, 32, 105, 102, 32, 115, 116, 114, 58, 115, 117, 98, 40, 105, 44, 32, 105, 41, 32, 61, 61, 32, 34, 93, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 105, 32, 61, 32, 105, 32, 43, 32, 49, 10, 32, 32, 32, 32, 32, 32, 98, 114, 101, 97, 107, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 45, 45, 32, 82, 101, 97, 100, 32, 116, 111, 107, 101, 110, 10, 32, 32, 32, 32, 120, 44, 32, 105, 32, 61, 32, 112, 97, 114, 115, 101, 40, 115, 116, 114, 44, 32, 105, 41, 10, 32, 32, 32, 32, 114, 101, 115, 91, 110, 93, 32, 61, 32, 120, 10, 32, 32, 32, 32, 110, 32, 61, 32, 110, 32, 43, 32, 49, 10, 32, 32, 32, 32, 45, 45, 32, 78, 101, 120, 116, 32, 116, 111, 107, 101, 110, 10, 32, 32, 32, 32, 105, 32, 61, 32, 110, 101, 120, 116, 95, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 115, 112, 97, 99, 101, 95, 99, 104, 97, 114, 115, 44, 32, 116, 114, 117, 101, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 104, 114, 32, 61, 32, 115, 116, 114, 58, 115, 117, 98, 40, 105, 44, 32, 105, 41, 10, 32, 32, 32, 32, 105, 32, 61, 32, 105, 32, 43, 32, 49, 10, 32, 32, 32, 32, 105, 102, 32, 99, 104, 114, 32, 61, 61, 32, 34, 93, 34, 32, 116, 104, 101, 110, 32, 98, 114, 101, 97, 107, 32, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 99, 104, 114, 32, 126, 61, 32, 34, 44, 34, 32, 116, 104, 101, 110, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 34, 101, 120, 112, 101, 99, 116, 101, 100, 32, 39, 93, 39, 32, 111, 114, 32, 39, 44, 39, 34, 41, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 44, 32, 105, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 97, 114, 115, 101, 95, 111, 98, 106, 101, 99, 116, 40, 115, 116, 114, 44, 32, 105, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 125, 10, 32, 32, 105, 32, 61, 32, 105, 32, 43, 32, 49, 10, 32, 32, 119, 104, 105, 108, 101, 32, 49, 32, 100, 111, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 101, 121, 44, 32, 118, 97, 108, 10, 32, 32, 32, 32, 105, 32, 61, 32, 110, 101, 120, 116, 95, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 115, 112, 97, 99, 101, 95, 99, 104, 97, 114, 115, 44, 32, 116, 114, 117, 101, 41, 10, 32, 32, 32, 32, 45, 45, 32, 69, 109, 112, 116, 121, 32, 47, 32, 101, 110, 100, 32, 111, 102, 32, 111, 98, 106, 101, 99, 116, 63, 10, 32, 32, 32, 32, 105, 102, 32, 115, 116, 114, 58, 115, 117, 98, 40, 105, 44, 32, 105, 41, 32, 61, 61, 32, 34, 125, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 105, 32, 61, 32, 105, 32, 43, 32, 49, 10, 32, 32, 32, 32, 32, 32, 98, 114, 101, 97, 107, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 45, 45, 32, 82, 101, 97, 100, 32, 107, 101, 121, 10, 32, 32, 32, 32, 105, 102, 32, 115, 116, 114, 58, 115, 117, 98, 40, 105, 44, 32, 105, 41, 32, 126, 61, 32, 39, 34, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 34, 101, 120, 112, 101, 99, 116, 101, 100, 32, 115, 116, 114, 105, 110, 103, 32, 102, 111, 114, 32, 107, 101, 121, 34, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 107, 101, 121, 44, 32, 105, 32, 61, 32, 112, 97, 114, 115, 101, 40, 115, 116, 114, 44, 32, 105, 41, 10, 32, 32, 32, 32, 45, 45, 32, 82, 101, 97, 100, 32, 39, 58, 39, 32, 100, 101, 108, 105, 109, 105, 116, 101, 114, 10, 32, 32, 32, 32, 105, 32, 61, 32, 110, 101, 120, 116, 95, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 115, 112, 97, 99, 101, 95, 99, 104, 97, 114, 115, 44, 32, 116, 114, 117, 101, 41, 10, 32, 32, 32, 32, 105, 102, 32, 115, 116, 114, 58, 115, 117, 98, 40, 105, 44, 32, 105, 41, 32, 126, 61, 32, 34, 58, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 34, 101, 120, 112, 101, 99, 116, 101, 100, 32, 39, 58, 39, 32, 97, 102, 116, 101, 114, 32, 107, 101, 121, 34, 41, 10, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 105, 32, 61, 32, 110, 101, 120, 116, 95, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 105, 32, 43, 32, 49, 44, 32, 115, 112, 97, 99, 101, 95, 99, 104, 97, 114, 115, 44, 32, 116, 114, 117, 101, 41, 10, 32, 32, 32, 32, 45, 45, 32, 82, 101, 97, 100, 32, 118, 97, 108, 117, 101, 10, 32, 32, 32, 32, 118, 97, 108, 44, 32, 105, 32, 61, 32, 112, 97, 114, 115, 101, 40, 115, 116, 114, 44, 32, 105, 41, 10, 32, 32, 32, 32, 45, 45, 32, 83, 101, 116, 10, 32, 32, 32, 32, 114, 101, 115, 91, 107, 101, 121, 93, 32, 61, 32, 118, 97, 108, 10, 32, 32, 32, 32, 45, 45, 32, 78, 101, 120, 116, 32, 116, 111, 107, 101, 110, 10, 32, 32, 32, 32, 105, 32, 61, 32, 110, 101, 120, 116, 95, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 115, 112, 97, 99, 101, 95, 99, 104, 97, 114, 115, 44, 32, 116, 114, 117, 101, 41, 10, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 104, 114, 32, 61, 32, 115, 116, 114, 58, 115, 117, 98, 40, 105, 44, 32, 105, 41, 10, 32, 32, 32, 32, 105, 32, 61, 32, 105, 32, 43, 32, 49, 10, 32, 32, 32, 32, 105, 102, 32, 99, 104, 114, 32, 61, 61, 32, 34, 125, 34, 32, 116, 104, 101, 110, 32, 98, 114, 101, 97, 107, 32, 101, 110, 100, 10, 32, 32, 32, 32, 105, 102, 32, 99, 104, 114, 32, 126, 61, 32, 34, 44, 34, 32, 116, 104, 101, 110, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 105, 44, 32, 34, 101, 120, 112, 101, 99, 116, 101, 100, 32, 39, 125, 39, 32, 111, 114, 32, 39, 44, 39, 34, 41, 32, 101, 110, 100, 10, 32, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 44, 32, 105, 10, 101, 110, 100, 10, 10, 10, 108, 111, 99, 97, 108, 32, 99, 104, 97, 114, 95, 102, 117, 110, 99, 95, 109, 97, 112, 32, 61, 32, 123, 10, 32, 32, 91, 32, 39, 34, 39, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 115, 116, 114, 105, 110, 103, 44, 10, 32, 32, 91, 32, 34, 48, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 49, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 50, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 51, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 52, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 53, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 54, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 55, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 56, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 57, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 45, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 110, 117, 109, 98, 101, 114, 44, 10, 32, 32, 91, 32, 34, 116, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 108, 105, 116, 101, 114, 97, 108, 44, 10, 32, 32, 91, 32, 34, 102, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 108, 105, 116, 101, 114, 97, 108, 44, 10, 32, 32, 91, 32, 34, 110, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 108, 105, 116, 101, 114, 97, 108, 44, 10, 32, 32, 91, 32, 34, 91, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 97, 114, 114, 97, 121, 44, 10, 32, 32, 91, 32, 34, 123, 34, 32, 93, 32, 61, 32, 112, 97, 114, 115, 101, 95, 111, 98, 106, 101, 99, 116, 44, 10, 125, 10, 10, 10, 112, 97, 114, 115, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 115, 116, 114, 44, 32, 105, 100, 120, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 99, 104, 114, 32, 61, 32, 115, 116, 114, 58, 115, 117, 98, 40, 105, 100, 120, 44, 32, 105, 100, 120, 41, 10, 32, 32, 108, 111, 99, 97, 108, 32, 102, 32, 61, 32, 99, 104, 97, 114, 95, 102, 117, 110, 99, 95, 109, 97, 112, 91, 99, 104, 114, 93, 10, 32, 32, 105, 102, 32, 102, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 102, 40, 115, 116, 114, 44, 32, 105, 100, 120, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 105, 100, 120, 44, 32, 34, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 39, 34, 32, 46, 46, 32, 99, 104, 114, 32, 46, 46, 32, 34, 39, 34, 41, 10, 101, 110, 100, 10, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 106, 115, 111, 110, 46, 114, 97, 119, 95, 100, 101, 99, 111, 100, 101, 40, 115, 116, 114, 41, 10, 32, 32, 105, 102, 32, 116, 121, 112, 101, 40, 115, 116, 114, 41, 32, 126, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 101, 114, 114, 111, 114, 40, 34, 101, 120, 112, 101, 99, 116, 101, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 111, 102, 32, 116, 121, 112, 101, 32, 115, 116, 114, 105, 110, 103, 44, 32, 103, 111, 116, 32, 34, 32, 46, 46, 32, 116, 121, 112, 101, 40, 115, 116, 114, 41, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 44, 32, 105, 100, 120, 32, 61, 32, 112, 97, 114, 115, 101, 40, 115, 116, 114, 44, 32, 110, 101, 120, 116, 95, 99, 104, 97, 114, 40, 115]);
fileData31.push.apply(fileData31, [116, 114, 44, 32, 49, 44, 32, 115, 112, 97, 99, 101, 95, 99, 104, 97, 114, 115, 44, 32, 116, 114, 117, 101, 41, 41, 10, 32, 32, 105, 100, 120, 32, 61, 32, 110, 101, 120, 116, 95, 99, 104, 97, 114, 40, 115, 116, 114, 44, 32, 105, 100, 120, 44, 32, 115, 112, 97, 99, 101, 95, 99, 104, 97, 114, 115, 44, 32, 116, 114, 117, 101, 41, 10, 32, 32, 105, 102, 32, 105, 100, 120, 32, 60, 61, 32, 35, 115, 116, 114, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 100, 101, 99, 111, 100, 101, 95, 101, 114, 114, 111, 114, 40, 115, 116, 114, 44, 32, 105, 100, 120, 44, 32, 34, 116, 114, 97, 105, 108, 105, 110, 103, 32, 103, 97, 114, 98, 97, 103, 101, 34, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 10, 101, 110, 100, 10, 10, 10, 114, 101, 116, 117, 114, 110, 32, 106, 115, 111, 110, 10]);
Module['FS_createDataFile']('/', 'json.lua', fileData31, true, true, false);
var fileData32 = [];
fileData32.push.apply(fileData32, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 45, 45, 32, 67, 79, 67, 79, 78, 85, 84, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 105, 110, 32, 90, 101, 110, 99, 111, 100, 101, 10, 10, 67, 79, 67, 79, 78, 85, 84, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 95, 111, 110, 99, 101, 40, 39, 99, 114, 121, 112, 116, 111, 95, 99, 111, 99, 111, 110, 117, 116, 39, 41, 10, 10, 90, 69, 78, 46, 97, 100, 100, 95, 115, 99, 104, 101, 109, 97, 40, 123, 10, 9, 32, 32, 45, 45, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 107, 101, 121, 112, 97, 105, 114, 32, 40, 101, 108, 103, 97, 109, 97, 108, 41, 10, 32, 32, 32, 32, 32, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 112, 117, 98, 108, 105, 99, 32, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 112, 117, 98, 108, 105, 99, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 114, 105, 118, 97, 116, 101, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 112, 114, 105, 118, 97, 116, 101, 39, 44, 32, 73, 78, 84, 46, 110, 101, 119, 41, 32, 125, 32, 101, 110, 100, 10, 125, 41, 10, 45, 45, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 107, 101, 121, 112, 97, 105, 114, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 107, 101, 121, 112, 97, 105, 114, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 45, 45, 32, 115, 107, 32, 61, 32, 114, 97, 110, 100, 44, 32, 112, 107, 32, 61, 32, 71, 32, 42, 32, 115, 107, 10, 9, 9, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 32, 61, 32, 123, 32, 112, 114, 105, 118, 97, 116, 101, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 32, 125, 10, 9, 9, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 117, 98, 108, 105, 99, 32, 61, 32, 69, 67, 80, 46, 103, 101, 110, 101, 114, 97, 116, 111, 114, 40, 41, 32, 42, 10, 9, 9, 32, 32, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 10, 101, 110, 100, 41, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 115, 117, 101, 114, 95, 115, 105, 103, 110, 95, 102, 40, 111, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 111, 98, 106, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 102, 117, 110, 44, 32, 111, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 120, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 120, 39, 44, 32, 73, 78, 84, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 121, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 121, 39, 44, 32, 73, 78, 84, 46, 110, 101, 119, 41, 32, 125, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 118, 101, 114, 105, 102, 105, 101, 114, 95, 102, 40, 111, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 111, 98, 106, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 102, 117, 110, 44, 32, 111, 41, 10, 9, 114, 101, 116, 117, 114, 110, 32, 123, 32, 97, 108, 112, 104, 97, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 97, 108, 112, 104, 97, 39, 44, 32, 69, 67, 80, 50, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 32, 98, 101, 116, 97, 32, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 98, 101, 116, 97, 39, 44, 32, 69, 67, 80, 50, 46, 110, 101, 119, 41, 32, 125, 10, 101, 110, 100, 10, 45, 45, 32, 105, 115, 115, 117, 101, 114, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121, 32, 107, 101, 112, 97, 105, 114, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 10, 90, 69, 78, 46, 97, 100, 100, 95, 115, 99, 104, 101, 109, 97, 40, 123, 10, 9, 32, 32, 45, 45, 32, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121, 32, 40, 99, 97, 41, 32, 47, 32, 105, 115, 115, 117, 101, 114, 32, 107, 101, 121, 112, 97, 105, 114, 10, 32, 32, 32, 32, 32, 32, 105, 115, 115, 117, 101, 114, 95, 115, 105, 103, 110, 32, 61, 32, 105, 115, 115, 117, 101, 114, 95, 115, 105, 103, 110, 95, 102, 44, 10, 32, 32, 32, 32, 32, 32, 118, 101, 114, 105, 102, 105, 101, 114, 32, 61, 32, 118, 101, 114, 105, 102, 105, 101, 114, 95, 102, 44, 10, 9, 32, 32, 105, 115, 115, 117, 101, 114, 95, 107, 101, 121, 112, 97, 105, 114, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 32, 45, 45, 32, 114, 101, 99, 117, 114, 115, 105, 118, 101, 32, 105, 109, 112, 111, 114, 116, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 105, 115, 115, 117, 101, 114, 95, 115, 105, 103, 110, 32, 32, 32, 61, 32, 105, 115, 115, 117, 101, 114, 95, 115, 105, 103, 110, 95, 102, 40, 111, 98, 106, 46, 105, 115, 115, 117, 101, 114, 95, 115, 105, 103, 110, 41, 44, 10, 9, 9, 9, 9, 32, 32, 118, 101, 114, 105, 102, 105, 101, 114, 32, 61, 32, 118, 101, 114, 105, 102, 105, 101, 114, 95, 102, 40, 111, 98, 106, 46, 118, 101, 114, 105, 102, 105, 101, 114, 41, 32, 125, 10, 9, 32, 32, 101, 110, 100, 10, 125, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 105, 115, 115, 117, 101, 114, 32, 107, 101, 121, 112, 97, 105, 114, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 65, 67, 75, 46, 105, 115, 115, 117, 101, 114, 95, 107, 101, 121, 112, 97, 105, 114, 32, 61, 32, 123, 32, 125, 10, 9, 9, 65, 67, 75, 46, 105, 115, 115, 117, 101, 114, 95, 107, 101, 121, 112, 97, 105, 114, 46, 105, 115, 115, 117, 101, 114, 95, 115, 105, 103, 110, 44, 10, 9, 9, 65, 67, 75, 46, 105, 115, 115, 117, 101, 114, 95, 107, 101, 121, 112, 97, 105, 114, 46, 118, 101, 114, 105, 102, 105, 101, 114, 32, 61, 32, 67, 79, 67, 79, 78, 85, 84, 46, 99, 97, 95, 107, 101, 121, 103, 101, 110, 40, 41, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 114, 101, 113, 117, 101, 115, 116, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 115, 10, 90, 69, 78, 46, 97, 100, 100, 95, 115, 99, 104, 101, 109, 97, 40, 123, 10, 32, 32, 32, 32, 32, 45, 45, 32, 108, 97, 109, 98, 100, 97, 10, 9, 32, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 114, 101, 113, 117, 101, 115, 116, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 114, 101, 113, 32, 61, 32, 123, 32, 99, 32, 61, 32, 123, 32, 97, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 99, 44, 32, 39, 97, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 9, 9, 9, 98, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 99, 44, 32, 39, 98, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 32, 125, 44, 10, 9, 9, 9, 9, 9, 32, 32, 112, 105, 95, 115, 32, 61, 32, 123, 32, 114, 114, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 112, 105, 95, 115, 44, 32, 39, 114, 114, 39, 44, 32, 73, 78, 84, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 32, 32, 114, 109, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 112, 105, 95, 115, 44, 32, 39, 114, 109, 39, 44, 32, 73, 78, 84, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 32, 32, 114, 107, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 112, 105, 95, 115, 44, 32, 39, 114, 107, 39, 44, 32, 73, 78, 84, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 32, 32, 99, 32, 61, 32, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 112, 105, 95, 115, 44, 32, 39, 99, 39, 44, 32, 32, 73, 78, 84, 46, 110, 101, 119, 41, 32, 32, 125, 44, 10, 9, 9, 9, 9, 9, 32, 32, 99, 111, 109, 109, 105, 116, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 99, 111, 109, 109, 105, 116, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 9, 32, 32, 112, 117, 98, 108, 105, 99, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 112, 117, 98, 108, 105, 99, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 32, 125, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 67, 79, 67, 79, 78, 85, 84, 46, 118, 101, 114, 105, 102, 121, 95, 112, 105, 95, 115, 40, 114, 101, 113, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 69, 114, 114, 111, 114, 32, 105, 110, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 114, 101, 113, 117, 101, 115, 116, 58, 32, 112, 114, 111, 111, 102, 32, 105, 115, 32, 105, 110, 118, 97, 108, 105, 100, 32, 40, 118, 101, 114, 105, 102, 121, 95, 112, 105, 95, 115, 41, 34, 41, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 114, 101, 113, 10, 9, 32, 32, 101, 110, 100, 10, 125, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 114, 101, 113, 117, 101, 115, 116, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 80, 114, 105, 118, 97, 116, 101, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 107, 101, 121, 112, 97, 105, 114, 34, 41, 10, 9, 9, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 114, 101, 113, 117, 101, 115, 116, 32, 61, 10, 9, 9, 32, 32, 32, 67, 79, 67, 79, 78, 85, 84, 46, 112, 114, 101, 112, 97, 114, 101, 95, 98, 108, 105, 110, 100, 95, 115, 105, 103, 110, 40, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 117, 98, 108, 105, 99, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 32, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 41, 10, 101, 110, 100, 41, 10, 10, 10, 45, 45, 32, 105, 115, 115, 117, 101, 114, 39, 115, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 111, 102, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 10, 90, 69, 78, 46, 97, 100, 100, 95, 115, 99, 104, 101, 109, 97, 40, 123, 10, 9, 32, 32, 45, 45, 32, 115, 105, 103, 109, 97, 116, 105, 108, 100, 101, 10, 9, 32, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 104, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 104, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 32, 32, 98, 95, 116, 105, 108, 100, 101, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 98, 95, 116, 105, 108, 100, 101, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 32, 32, 97, 95, 116, 105, 108, 100, 101, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 97, 95, 116, 105, 108, 100, 101, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 32, 125, 32, 101, 110, 100, 44, 10, 9, 32, 32, 45, 45, 32, 97, 103, 103, 115, 105, 103, 109, 97, 58, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 100, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 115, 32, 111, 102, 32, 99, 97, 32, 105, 115, 115, 117, 101, 114, 115, 10, 9, 32, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 104, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 104, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 32, 32, 115, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 115, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 32, 125, 32, 101, 110, 100, 44, 10, 125, 41, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 87, 72, 79, 44, 32, 34, 73, 115, 115, 117, 101, 114, 32, 105, 115, 32, 110, 111, 116, 32, 107, 110, 111, 119, 110, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 114, 101, 113, 117, 101, 115, 116, 44, 32, 34, 78, 111, 32, 118, 97, 108, 105, 100, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 114, 101, 113, 117, 101, 115, 116, 32, 102, 111, 117, 110, 100, 46, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 105, 115, 115, 117, 101, 114, 95, 107, 101, 121, 112, 97, 105, 114, 46, 105, 115, 115, 117, 101, 114, 95, 115, 105, 103, 110, 44, 32, 34, 78, 111, 32, 118, 97, 108, 105, 100, 32, 105, 115, 115, 117, 101, 114, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 107, 101, 121, 115, 32, 102, 111, 117, 110, 100, 46, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 61, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 67, 79, 67, 79, 78, 85, 84, 46, 98, 108, 105, 110, 100, 95, 115, 105, 103, 110, 40, 65, 67, 75, 46, 105, 115, 115, 117, 101, 114, 95, 107, 101, 121, 112, 97, 105, 114, 46, 105, 115, 115, 117, 101, 114, 95, 115, 105, 103, 110, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 114, 101, 113, 117, 101, 115, 116, 41, 10, 9, 9, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 32, 61, 32, 65, 67, 75, 46, 105, 115, 115, 117, 101, 114, 95, 107, 101, 121, 112, 97, 105, 114, 46, 118, 101, 114, 105, 102, 105, 101, 114, 10, 101, 110, 100, 41, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 44, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 44, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 105, 118, 97, 116, 101, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 112, 114, 101, 112, 97, 114, 101, 32, 111, 117, 116, 112, 117, 116, 32, 119, 105, 116, 104, 32, 97, 110, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 100, 32, 115, 105, 103, 109, 97, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 114, 101, 113, 117, 101, 115, 116, 101, 114, 32, 115, 105, 103, 110, 115, 32, 116, 104, 101, 32, 115, 105, 103, 109, 97, 32, 119, 105, 116, 104, 32, 112, 114, 105, 118, 97, 116, 101, 32, 107, 101, 121, 10, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 32, 61, 32, 67, 79, 67, 79, 78, 85, 84, 46, 97, 103, 103, 114, 101, 103, 97, 116, 101, 95, 99, 114, 101, 100, 115, 40, 10, 9, 9, 32, 32, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 44, 32, 123, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 125, 41, 10, 101, 110, 100, 41, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 112, 114, 111, 111, 102, 95, 102, 40, 111, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 111, 98, 106, 32, 61, 32, 100, 101, 101, 112, 109, 97, 112, 40, 67, 79, 78, 70, 46, 105, 110, 112, 117, 116, 46, 101, 110, 99, 111, 100, 105, 110, 103, 46, 102, 117, 110, 44, 32, 111, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 110, 117, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 110, 117, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 107, 97, 112, 112, 97, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 44, 32, 39, 107, 97, 112, 112, 97, 39, 44, 32, 69, 67, 80, 50, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 112, 105, 95, 118, 32, 61, 32, 123, 32, 99, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 112, 105, 95, 118, 44, 32, 39, 99, 39, 44, 32, 73, 78, 84, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 9, 32, 114, 109, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 112, 105, 95, 118, 44, 32, 39, 114, 109, 39, 44, 32, 73, 78, 84, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 9, 32, 114, 114, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 112, 105, 95, 118, 44, 32, 39, 114, 114, 39, 44, 32, 73, 78, 84, 46, 110, 101, 119, 41, 32, 125, 44, 10, 9, 9, 9, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 32, 61, 32, 123, 32, 104, 95, 112, 114, 105, 109, 101, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 44, 32, 39, 104, 95, 112, 114, 105, 109, 101, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 44, 10, 9, 9, 9, 9, 9, 9, 9, 115, 95, 112, 114, 105, 109, 101, 32, 61, 32, 90, 69, 78, 46, 103, 101, 116, 40, 111, 98, 106, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 44, 32, 39, 115, 95, 112, 114, 105, 109, 101, 39, 44, 32, 69, 67, 80, 46, 110, 101, 119, 41, 32, 125, 32, 125, 10, 101, 110, 100, 10, 10, 90, 69, 78, 46, 97, 100, 100, 95, 115, 99, 104, 101, 109, 97, 40, 123, 10, 9, 32, 32, 45, 45, 32, 116, 104, 101, 116, 97, 58, 32, 98, 108, 105, 110, 100, 32, 112, 114, 111, 111, 102, 32, 111, 102, 32, 99, 101, 114, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 10, 9, 32, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 112, 114, 111, 111, 102, 32, 61, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 112, 114, 111, 111, 102, 95, 102, 44, 10, 9, 32, 32, 45, 45, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 100, 32, 118, 101, 114, 105, 102, 105, 101, 114, 115, 32, 115, 99, 104, 101, 109, 97, 32, 105, 115, 32, 115, 97, 109, 101, 32, 97, 115, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 118, 101, 114, 105, 102, 105, 101, 114, 10, 9, 32, 32, 118, 101, 114, 105, 102, 105, 101, 114, 115, 32, 61, 32, 118, 101, 114, 105, 102, 105, 101, 114, 95, 102, 10, 125, 41, 10, 10, 87, 104, 101, 110, 40, 34, 97, 103, 103, 114, 101, 103, 97, 116, 101, 32, 116, 104, 101, 32, 118, 101, 114, 105, 102, 105, 101, 114, 115, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 9, 9, 105, 102, 32, 110, 111, 116, 32, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 115, 32, 116, 104, 101, 110, 32, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 115, 32, 61, 32, 123, 32, 125, 32, 101, 110, 100, 10, 9, 9, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 41, 32, 100, 111, 10, 9, 9, 45, 45, 32, 105, 102, 32, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 46, 97, 108, 112, 104, 97, 32, 116, 104, 101, 110, 10, 9, 9, 32, 32, 32, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 115, 91, 107, 93, 32, 61, 32, 118, 10, 9, 9, 101, 110, 100, 10, 9, 9, 45, 45, 32, 84, 79, 68, 79, 58, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 32, 97, 108, 108, 32, 97, 114, 114, 97, 121, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 111, 111, 102, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 115, 44, 32, 34, 78, 111, 32, 105, 115, 115, 117, 101, 114, 32, 118, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 107, 101, 121, 115, 32, 97, 114, 101, 32, 115, 101, 108, 101, 99, 116, 101, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 44, 10, 9, 9, 9, 9, 32, 32, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 105, 118, 97, 116, 101, 32, 107, 101, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 44, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 9, 9, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 112, 114, 111, 111, 102, 32, 61, 10, 9, 9, 32, 32, 32, 67, 79, 67, 79, 78, 85, 84, 46, 112, 114, 111, 118, 101, 95, 99, 114, 101, 100, 115, 40, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 115, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 32, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 44, 10, 9, 9, 9, 9, 9, 9, 9, 32, 32, 32, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 107, 101, 121, 112, 97, 105, 114, 46, 112, 114, 105, 118, 97, 116, 101, 41, 10, 101, 110, 100, 41, 10, 87, 104, 101, 110, 40, 34, 118, 101, 114, 105, 102, 121, 32, 116, 104, 101, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 111, 111, 102, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 112, 114, 111, 111, 102, 44, 32, 34, 78, 111, 32, 118, 97, 108, 105, 100, 32, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 111, 111, 102, 32, 102, 111, 117, 110, 100, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 115, 44, 32, 34, 86, 101, 114, 105, 102, 105, 101, 114, 32, 111, 102, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 100, 32, 105, 115, 115, 117, 101, 114, 32, 107, 101, 121, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 34, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 67, 79, 67, 79, 78, 85, 84, 46, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 115, 40, 65, 67, 75, 46, 118, 101, 114, 105, 102, 105, 101, 114, 115, 44, 10, 9, 9, 9, 9, 9, 9, 9, 9, 65, 67, 75, 46, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 95, 112, 114, 111, 111, 102, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 111, 111, 102, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 118, 97, 108, 105, 100, 97, 116, 101, 34, 41, 10, 101, 110, 100, 41, 10, 10]);
Module['FS_createDataFile']('/', 'zencode_credential.lua', fileData32, true, true, false);
var fileData33 = [];
fileData33.push.apply(fileData33, [108, 111, 99, 97, 108, 32, 98, 101, 110, 99, 104, 32, 61, 32, 123, 32, 125, 10, 10, 98, 101, 110, 99, 104, 46, 101, 110, 116, 114, 111, 112, 121, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 32, 32, 32, 97, 99, 116, 40, 34, 66, 101, 110, 99, 104, 109, 97, 114, 107, 58, 32, 101, 110, 116, 114, 111, 112, 121, 32, 111, 102, 32, 114, 97, 110, 100, 111, 109, 32, 103, 101, 110, 101, 114, 97, 116, 111, 114, 115, 32, 40, 83, 104, 97, 110, 110, 111, 110, 32, 114, 97, 116, 105, 111, 115, 41, 34, 41, 10, 32, 32, 32, 112, 114, 105, 110, 116, 40, 34, 83, 69, 69, 68, 58, 32, 92, 116, 32, 34, 46, 46, 32, 82, 78, 71, 83, 69, 69, 68, 58, 101, 110, 116, 114, 111, 112, 121, 40, 41, 41, 10, 32, 32, 32, 112, 114, 105, 110, 116, 40, 34, 80, 82, 78, 71, 58, 32, 92, 116, 32, 34, 46, 46, 32, 79, 67, 84, 69, 84, 46, 114, 97, 110, 100, 111, 109, 40, 50, 53, 54, 41, 58, 101, 110, 116, 114, 111, 112, 121, 40, 41, 41, 10, 32, 32, 32, 45, 45, 32, 117, 115, 101, 32, 115, 116, 97, 110, 100, 97, 114, 100, 32, 69, 67, 80, 32, 115, 105, 122, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 32, 61, 32, 35, 69, 67, 80, 46, 114, 97, 110, 100, 111, 109, 40, 41, 58, 111, 99, 116, 101, 116, 40, 41, 10, 32, 32, 32, 112, 114, 105, 110, 116, 40, 34, 79, 67, 84, 69, 84, 58, 32, 92, 116, 32, 34, 46, 46, 79, 67, 84, 69, 84, 46, 114, 97, 110, 100, 111, 109, 40, 115, 41, 58, 101, 110, 116, 114, 111, 112, 121, 40, 41, 41, 10, 32, 32, 32, 112, 114, 105, 110, 116, 40, 34, 66, 73, 71, 58, 32, 32, 32, 92, 116, 32, 34, 46, 46, 66, 73, 71, 46, 114, 97, 110, 100, 111, 109, 40, 41, 58, 111, 99, 116, 101, 116, 40, 41, 58, 101, 110, 116, 114, 111, 112, 121, 40, 41, 41, 10, 32, 32, 32, 112, 114, 105, 110, 116, 40, 34, 69, 67, 80, 58, 32, 32, 32, 92, 116, 32, 34, 46, 46, 69, 67, 80, 46, 114, 97, 110, 100, 111, 109, 40, 41, 58, 111, 99, 116, 101, 116, 40, 41, 58, 101, 110, 116, 114, 111, 112, 121, 40, 41, 41, 10, 32, 32, 32, 112, 114, 105, 110, 116, 40, 34, 69, 67, 80, 50, 58, 32, 32, 92, 116, 32, 34, 46, 46, 69, 67, 80, 50, 46, 114, 97, 110, 100, 111, 109, 40, 41, 58, 111, 99, 116, 101, 116, 40, 41, 58, 101, 110, 116, 114, 111, 112, 121, 40, 41, 41, 10, 101, 110, 100, 10, 10, 98, 101, 110, 99, 104, 46, 114, 97, 110, 100, 111, 109, 95, 104, 97, 109, 109, 105, 110, 103, 95, 102, 114, 101, 113, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 115, 44, 32, 113, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 95, 115, 32, 61, 32, 115, 32, 111, 114, 32, 57, 55, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 95, 113, 32, 61, 32, 113, 32, 111, 114, 32, 53, 48, 48, 48, 10, 32, 32, 32, 97, 99, 116, 40, 34, 66, 101, 110, 99, 104, 109, 97, 114, 107, 58, 32, 104, 97, 109, 109, 105, 110, 103, 32, 100, 105, 115, 116, 97, 110, 99, 101, 32, 98, 101, 116, 119, 101, 101, 110, 32, 114, 97, 110, 100, 111, 109, 44, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 58, 32, 34, 46, 46, 95, 115, 46, 46, 34, 32, 34, 46, 46, 95, 113, 41, 10, 10, 32, 32, 32, 45, 45, 32, 69, 67, 80, 32, 99, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 32, 97, 114, 101, 32, 57, 55, 32, 98, 121, 116, 101, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 101, 119, 32, 61, 32, 79, 46, 114, 97, 110, 100, 111, 109, 40, 95, 115, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 111, 116, 32, 61, 32, 48, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 111, 108, 100, 10, 32, 32, 32, 102, 111, 114, 32, 105, 61, 95, 113, 44, 49, 44, 45, 49, 32, 100, 111, 10, 9, 32, 32, 111, 108, 100, 32, 61, 32, 110, 101, 119, 10, 9, 32, 32, 110, 101, 119, 32, 61, 32, 79, 46, 114, 97, 110, 100, 111, 109, 40, 95, 115, 41, 10, 9, 32, 32, 116, 111, 116, 32, 61, 32, 116, 111, 116, 32, 43, 32, 79, 46, 104, 97, 109, 109, 105, 110, 103, 40, 111, 108, 100, 44, 110, 101, 119, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 111, 116, 32, 47, 32, 95, 113, 10, 101, 110, 100, 10, 10, 98, 101, 110, 99, 104, 46, 114, 97, 110, 100, 111, 109, 95, 107, 100, 102, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 10, 32, 32, 32, 97, 99, 116, 40, 34, 66, 101, 110, 99, 104, 109, 97, 114, 107, 58, 32, 75, 68, 70, 50, 32, 83, 72, 65, 50, 53, 54, 32, 97, 110, 100, 32, 83, 72, 65, 53, 49, 50, 32, 111, 110, 32, 114, 97, 110, 100, 111, 109, 34, 41, 10, 32, 32, 32, 45, 45, 32, 75, 68, 70, 50, 32, 105, 110, 112, 117, 116, 32, 99, 97, 110, 32, 98, 101, 32, 97, 110, 121, 44, 32, 111, 117, 116, 112, 117, 116, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 79, 46, 114, 97, 110, 100, 111, 109, 40, 54, 52, 41, 10, 32, 32, 32, 72, 65, 83, 72, 46, 107, 100, 102, 50, 40, 72, 65, 83, 72, 46, 110, 101, 119, 40, 39, 83, 72, 65, 50, 53, 54, 39, 41, 44, 114, 41, 10, 32, 32, 32, 72, 65, 83, 72, 46, 107, 100, 102, 50, 40, 72, 65, 83, 72, 46, 110, 101, 119, 40, 39, 83, 72, 65, 53, 49, 50, 39, 41, 44, 114, 41, 10, 101, 110, 100, 10, 10, 10, 45, 45, 32, 102, 105, 110, 100, 32, 112, 114, 105, 109, 101, 115, 10, 108, 111, 99, 97, 108, 32, 115, 113, 117, 97, 114, 101, 32, 61, 32, 123, 125, 32, 102, 111, 114, 32, 105, 61, 48, 44, 57, 32, 100, 111, 32, 115, 113, 117, 97, 114, 101, 91, 105, 93, 61, 105, 42, 105, 32, 101, 110, 100, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 113, 114, 115, 117, 109, 40, 110, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 117, 109, 32, 61, 32, 48, 10, 32, 32, 32, 119, 104, 105, 108, 101, 32, 110, 32, 62, 32, 48, 32, 100, 111, 32, 115, 117, 109, 44, 32, 110, 32, 61, 32, 115, 117, 109, 32, 43, 32, 115, 113, 117, 97, 114, 101, 91, 110, 32, 37, 32, 49, 48, 93, 44, 32, 109, 97, 116, 104, 46, 102, 108, 111, 111, 114, 40, 110, 32, 47, 32, 49, 48, 41, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 115, 117, 109, 10, 101, 110, 100, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 72, 97, 112, 112, 121, 40, 110, 41, 10, 32, 32, 32, 119, 104, 105, 108, 101, 32, 110, 32, 126, 61, 32, 49, 32, 97, 110, 100, 32, 110, 32, 126, 61, 32, 52, 32, 100, 111, 32, 110, 32, 61, 32, 115, 113, 114, 115, 117, 109, 40, 110, 41, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 110, 32, 61, 61, 32, 49, 10, 101, 110, 100, 10, 108, 111, 99, 97, 108, 32, 112, 114, 105, 109, 101, 95, 110, 117, 109, 98, 101, 114, 115, 32, 61, 32, 123, 32, 50, 44, 32, 51, 32, 125, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 80, 114, 105, 109, 101, 40, 110, 41, 10, 32, 32, 32, 105, 102, 32, 110, 32, 61, 61, 32, 49, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 32, 101, 110, 100, 10, 32, 32, 32, 102, 111, 114, 32, 95, 44, 105, 32, 105, 110, 32, 105, 112, 97, 105, 114, 115, 40, 112, 114, 105, 109, 101, 95, 110, 117, 109, 98, 101, 114, 115, 41, 32, 100, 111, 10, 9, 32, 32, 105, 102, 32, 110, 32, 61, 61, 32, 105, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 32, 101, 110, 100, 10, 9, 32, 32, 105, 102, 32, 110, 37, 105, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 102, 111, 114, 32, 105, 32, 61, 32, 112, 114, 105, 109, 101, 95, 110, 117, 109, 98, 101, 114, 115, 91, 35, 112, 114, 105, 109, 101, 95, 110, 117, 109, 98, 101, 114, 115, 93, 44, 32, 109, 97, 116, 104, 46, 102, 108, 111, 111, 114, 40, 110, 47, 50, 41, 43, 49, 44, 32, 50, 32, 100, 111, 10, 9, 32, 32, 105, 102, 32, 110, 37, 105, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 102, 97, 108, 115, 101, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 105, 102, 32, 110, 32, 62, 32, 112, 114, 105, 109, 101, 95, 110, 117, 109, 98, 101, 114, 115, 91, 35, 112, 114, 105, 109, 101, 95, 110, 117, 109, 98, 101, 114, 115, 93, 32, 116, 104, 101, 110, 10, 9, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 112, 114, 105, 109, 101, 95, 110, 117, 109, 98, 101, 114, 115, 44, 32, 110, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 101, 110, 100, 10, 98, 101, 110, 99, 104, 46, 109, 97, 116, 104, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 97, 44, 32, 98, 44, 32, 99, 41, 10, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 95, 97, 32, 61, 32, 97, 32, 111, 114, 32, 53, 48, 48, 48, 48, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 95, 98, 32, 61, 32, 98, 32, 111, 114, 32, 95, 97, 43, 53, 48, 48, 48, 48, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 95, 99, 32, 61, 32, 99, 32, 111, 114, 32, 49, 10, 32, 32, 32, 97, 99, 116, 40, 34, 66, 101, 110, 99, 104, 109, 97, 114, 107, 58, 32, 109, 97, 116, 104, 32, 98, 97, 115, 101, 100, 32, 112, 114, 105, 109, 101, 32, 110, 117, 109, 98, 101, 114, 44, 32, 97, 114, 103, 115, 58, 32, 34, 46, 46, 95, 97, 46, 46, 34, 32, 34, 46, 46, 95, 98, 46, 46, 34, 32, 34, 46, 46, 95, 99, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 101, 115, 32, 61, 32, 123, 32, 125, 10, 32, 32, 32, 102, 111, 114, 32, 110, 61, 95, 97, 44, 95, 98, 44, 95, 99, 32, 100, 111, 32, 10, 9, 32, 32, 105, 102, 32, 105, 115, 72, 97, 112, 112, 121, 40, 110, 41, 32, 97, 110, 100, 32, 105, 115, 80, 114, 105, 109, 101, 40, 110, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 114, 101, 115, 44, 32, 110, 41, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 115, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 98, 101, 110, 99, 104, 46, 98, 105, 116, 51, 50, 40, 78, 41, 10, 32, 32, 32, 78, 32, 61, 32, 78, 32, 111, 114, 32, 49, 48, 48, 48, 10, 32, 32, 32, 97, 99, 116, 40, 34, 66, 101, 110, 99, 104, 109, 97, 114, 107, 58, 32, 98, 105, 116, 51, 50, 32, 98, 97, 115, 101, 100, 32, 77, 97, 110, 100, 101, 108, 98, 114, 111, 116, 32, 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 44, 32, 105, 116, 101, 114, 97, 116, 105, 111, 110, 115, 58, 32, 34, 46, 46, 78, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 98, 105, 116, 32, 61, 32, 98, 105, 116, 51, 50, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 98, 111, 114, 44, 32, 98, 97, 110, 100, 32, 61, 32, 98, 105, 116, 46, 98, 111, 114, 44, 32, 98, 105, 116, 46, 98, 97, 110, 100, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 104, 108, 44, 32, 115, 104, 114, 44, 32, 114, 111, 108, 32, 61, 32, 98, 105, 116, 46, 108, 115, 104, 105, 102, 116, 44, 32, 98, 105, 116, 46, 114, 115, 104, 105, 102, 116, 44, 32, 98, 105, 116, 46, 108, 114, 111, 116, 97, 116, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 104, 97, 114, 44, 32, 117, 110, 112, 97, 99, 107, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 99, 104, 97, 114, 44, 32, 116, 97, 98, 108, 101, 46, 117, 110, 112, 97, 99, 107, 10, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 77, 44, 32, 98, 117, 102, 32, 61, 32, 50, 47, 78, 44, 32, 123, 125, 10, 32, 32, 32, 102, 111, 114, 32, 121, 61, 48, 44, 78, 45, 49, 32, 100, 111, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 67, 105, 44, 32, 98, 44, 32, 112, 32, 61, 32, 121, 42, 77, 45, 49, 44, 32, 45, 49, 54, 55, 55, 55, 50, 49, 54, 44, 32, 48, 10, 9, 32, 32, 108, 111, 99, 97, 108, 32, 67, 105, 113, 32, 61, 32, 67, 105, 42, 67, 105, 10, 9, 32, 32, 102, 111, 114, 32, 120, 61, 48, 44, 78, 45, 49, 44, 50, 32, 100, 111, 10, 9, 9, 32, 108, 111, 99, 97, 108, 32, 67, 114, 44, 32, 67, 114, 50, 32, 61, 32, 120, 42, 77, 45, 49, 46, 53, 44, 32, 40, 120, 43, 49, 41, 42, 77, 45, 49, 46, 53, 10, 9, 9, 32, 108, 111, 99, 97, 108, 32, 90, 114, 44, 32, 90, 105, 44, 32, 90, 114, 113, 44, 32, 90, 105, 113, 32, 61, 32, 67, 114, 44, 32, 67, 105, 44, 32, 67, 114, 42, 67, 114, 44, 32, 67, 105, 113, 10, 9, 9, 32, 108, 111, 99, 97, 108, 32, 90, 114, 50, 44, 32, 90, 105, 50, 44, 32, 90, 114, 113, 50, 44, 32, 90, 105, 113, 50, 32, 61, 32, 67, 114, 50, 44, 32, 67, 105, 44, 32, 67, 114, 50, 42, 67, 114, 50, 44, 32, 67, 105, 113, 10, 9, 9, 32, 98, 32, 61, 32, 114, 111, 108, 40, 98, 44, 32, 50, 41, 10, 9, 9, 32, 102, 111, 114, 32, 105, 61, 49, 44, 52, 57, 32, 100, 111, 10, 9, 9, 9, 90, 105, 32, 61, 32, 90, 114, 42, 90, 105, 42, 50, 32, 43, 32, 67, 105, 59, 32, 90, 105, 50, 32, 61, 32, 90, 114, 50, 42, 90, 105, 50, 42, 50, 32, 43, 32, 67, 105, 10, 9, 9, 9, 90, 114, 32, 61, 32, 90, 114, 113, 45, 90, 105, 113, 32, 43, 32, 67, 114, 59, 32, 90, 114, 50, 32, 61, 32, 90, 114, 113, 50, 45, 90, 105, 113, 50, 32, 43, 32, 67, 114, 50, 10, 9, 9, 9, 90, 105, 113, 32, 61, 32, 90, 105, 42, 90, 105, 59, 32, 90, 105, 113, 50, 32, 61, 32, 90, 105, 50, 42, 90, 105, 50, 10, 9, 9, 9, 90, 114, 113, 32, 61, 32, 90, 114, 42, 90, 114, 59, 32, 90, 114, 113, 50, 32, 61, 32, 90, 114, 50, 42, 90, 114, 50, 10, 9, 9, 9, 105, 102, 32, 98, 97, 110, 100, 40, 98, 44, 32, 50, 41, 32, 126, 61, 32, 48, 32, 97, 110, 100, 32, 90, 114, 113, 43, 90, 105, 113, 32, 62, 32, 52, 46, 48, 32, 116, 104, 101, 110, 32, 98, 32, 61, 32, 98, 97, 110, 100, 40, 98, 44, 32, 45, 51, 41, 32, 101, 110, 100, 10, 9, 9, 9, 105, 102, 32, 98, 97, 110, 100, 40, 98, 44, 32, 49, 41, 32, 126, 61, 32, 48, 32, 97, 110, 100, 32, 90, 114, 113, 50, 43, 90, 105, 113, 50, 32, 62, 32, 52, 46, 48, 32, 116, 104, 101, 110, 32, 98, 32, 61, 32, 98, 97, 110, 100, 40, 98, 44, 32, 45, 50, 41, 32, 101, 110, 100, 10, 9, 9, 9, 105, 102, 32, 98, 97, 110, 100, 40, 98, 44, 32, 51, 41, 32, 61, 61, 32, 48, 32, 116, 104, 101, 110, 32, 98, 114, 101, 97, 107, 32, 101, 110, 100, 10, 9, 9, 32, 101, 110, 100, 10, 9, 9, 32, 105, 102, 32, 98, 32, 62, 61, 32, 48, 32, 116, 104, 101, 110, 32, 112, 32, 61, 32, 112, 32, 43, 32, 49, 59, 32, 98, 117, 102, 91, 112, 93, 32, 61, 32, 98, 59, 32, 98, 32, 61, 32, 45, 49, 54, 55, 55, 55, 50, 49, 54, 59, 32, 101, 110, 100, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 105, 102, 32, 98, 32, 126, 61, 32, 45, 49, 54, 55, 55, 55, 50, 49, 54, 32, 116, 104, 101, 110, 10, 9, 9, 32, 105, 102, 32, 98, 97, 110, 100, 40, 78, 44, 32, 49, 41, 32, 126, 61, 32, 48, 32, 116, 104, 101, 110, 32, 98, 32, 61, 32, 115, 104, 114, 40, 98, 44, 32, 49, 41, 32, 101, 110, 100, 10, 9, 9, 32, 112, 32, 61, 32, 112, 32, 43, 32, 49, 59, 32, 98, 117, 102, 91, 112, 93, 32, 61, 32, 115, 104, 108, 40, 98, 44, 32, 56, 45, 98, 97, 110, 100, 40, 78, 44, 32, 55, 41, 41, 10, 9, 32, 32, 101, 110, 100, 10, 9, 32, 32, 45, 45, 32, 119, 114, 105, 116, 101, 40, 99, 104, 97, 114, 40, 117, 110, 112, 97, 99, 107, 40, 98, 117, 102, 44, 32, 49, 44, 32, 112, 41, 41, 41, 10, 9, 32, 32, 45, 45, 32, 119, 114, 105, 116, 101, 40, 39, 46, 39, 41, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 112, 114, 105, 110, 116, 40, 39, 46, 39, 41, 10, 101, 110, 100, 10, 10, 10, 10, 114, 101, 116, 117, 114, 110, 32, 98, 101, 110, 99, 104, 10]);
Module['FS_createDataFile']('/', 'zenroom_bench.lua', fileData33, true, true, false);
var fileData34 = [];
fileData34.push.apply(fileData34, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 49, 56, 45, 50, 48, 49, 57, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 108, 111, 99, 97, 108, 32, 111, 99, 116, 101, 116, 32, 61, 32, 114, 101, 113, 117, 105, 114, 101, 39, 111, 99, 116, 101, 116, 39, 10, 10, 45, 45, 45, 32, 105, 109, 112, 108, 105, 99, 105, 116, 32, 99, 111, 110, 118, 101, 114, 116, 105, 111, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 103, 111, 105, 110, 103, 32, 98, 111, 116, 104, 32, 119, 97, 121, 115, 10, 45, 45, 32, 105, 102, 32, 105, 110, 112, 117, 116, 32, 105, 115, 32, 97, 110, 32, 101, 110, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 44, 32, 119, 105, 108, 108, 32, 98, 101, 99, 111, 109, 101, 32, 97, 110, 32, 111, 99, 116, 101, 116, 10, 45, 45, 32, 105, 102, 32, 105, 110, 112, 117, 116, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 101, 110, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 44, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 99, 111, 109, 101, 32, 97, 32, 98, 97, 115, 101, 54, 52, 32, 115, 116, 114, 105, 110, 103, 10, 45, 45, 32, 105, 102, 32, 105, 110, 112, 117, 116, 32, 105, 115, 32, 97, 110, 32, 111, 99, 116, 101, 116, 44, 32, 119, 105, 108, 108, 32, 98, 101, 99, 111, 109, 101, 32, 97, 110, 32, 101, 110, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 104, 101, 120, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 105, 102, 40, 116, 32, 61, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 41, 32, 116, 104, 101, 110, 10, 9, 32, 32, 105, 102, 32, 79, 46, 105, 115, 95, 104, 101, 120, 40, 100, 97, 116, 97, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 104, 101, 120, 40, 100, 97, 116, 97, 41, 10, 9, 32, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 115, 116, 114, 40, 100, 97, 116, 97, 41, 58, 104, 101, 120, 40, 41, 32, 101, 110, 100, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 110, 117, 109, 98, 101, 114, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 116, 97, 98, 108, 101, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 104, 101, 120, 40, 41, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 111, 99, 116, 101, 116, 40, 41, 58, 104, 101, 120, 40, 41, 32, 45, 45, 32, 97, 110, 121, 32, 122, 101, 110, 114, 111, 111, 109, 32, 116, 121, 112, 101, 32, 116, 111, 32, 111, 99, 116, 101, 116, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 115, 116, 114, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 105, 102, 40, 116, 32, 61, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 41, 32, 97, 110, 100, 32, 100, 97, 116, 97, 32, 126, 61, 32, 34, 34, 32, 116, 104, 101, 110, 10, 9, 32, 32, 105, 102, 32, 79, 67, 84, 69, 84, 46, 105, 115, 95, 117, 114, 108, 54, 52, 40, 100, 97, 116, 97, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 100, 101, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 32, 102, 111, 114, 109, 97, 116, 32, 102, 111, 114, 32, 74, 83, 79, 78, 46, 100, 101, 99, 111, 100, 101, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 67, 84, 69, 84, 46, 102, 114, 111, 109, 95, 117, 114, 108, 54, 52, 40, 100, 97, 116, 97, 41, 58, 115, 116, 114, 40, 41, 10, 9, 32, 32, 101, 108, 115, 101, 105, 102, 32, 79, 67, 84, 69, 84, 46, 105, 115, 95, 98, 97, 115, 101, 54, 52, 40, 100, 97, 116, 97, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 100, 101, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 32, 102, 111, 114, 109, 97, 116, 32, 102, 111, 114, 32, 74, 83, 79, 78, 46, 100, 101, 99, 111, 100, 101, 10, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 79, 67, 84, 69, 84, 46, 102, 114, 111, 109, 95, 98, 97, 115, 101, 54, 52, 40, 100, 97, 116, 97, 41, 58, 115, 116, 114, 40, 41, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 79, 67, 84, 69, 84, 46, 105, 115, 95, 98, 97, 115, 101, 53, 56, 40, 100, 97, 116, 97, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 100, 101, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 32, 102, 111, 114, 109, 97, 116, 32, 102, 111, 114, 32, 74, 83, 79, 78, 46, 100, 101, 99, 111, 100, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 79, 67, 84, 69, 84, 46, 102, 114, 111, 109, 95, 98, 97, 115, 101, 53, 56, 40, 100, 97, 116, 97, 41, 58, 115, 116, 114, 40, 41, 10, 9, 32, 32, 101, 108, 115, 101, 105, 102, 32, 79, 67, 84, 69, 84, 46, 105, 115, 95, 104, 101, 120, 40, 100, 97, 116, 97, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 100, 101, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 32, 102, 111, 114, 109, 97, 116, 32, 102, 111, 114, 32, 74, 83, 79, 78, 46, 100, 101, 99, 111, 100, 101, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 67, 84, 69, 84, 46, 102, 114, 111, 109, 95, 104, 101, 120, 40, 100, 97, 116, 97, 41, 58, 115, 116, 114, 40, 41, 10, 9, 32, 32, 101, 108, 115, 101, 105, 102, 32, 79, 67, 84, 69, 84, 46, 105, 115, 95, 98, 105, 110, 40, 100, 97, 116, 97, 41, 32, 116, 104, 101, 110, 10, 9, 9, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 100, 101, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 32, 102, 111, 114, 109, 97, 116, 32, 102, 111, 114, 32, 74, 83, 79, 78, 46, 100, 101, 99, 111, 100, 101, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 79, 67, 84, 69, 84, 46, 102, 114, 111, 109, 95, 98, 105, 110, 40, 100, 97, 116, 97, 41, 58, 115, 116, 114, 40, 41, 10, 9, 32, 32, 101, 108, 115, 101, 32, 45, 45, 32, 105, 116, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 40, 119, 101, 32, 115, 117, 112, 112, 111, 115, 101, 44, 32, 116, 104, 105, 115, 32, 105, 115, 32, 110, 111, 116, 32, 100, 101, 116, 101, 114, 109, 105, 110, 105, 115, 116, 105, 99, 41, 10, 9, 9, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 116, 32, 61, 61, 32, 39, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 39, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 115, 116, 114, 40, 41, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 41, 32, 116, 104, 101, 110, 10, 9, 32, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 111, 99, 116, 101, 116, 40, 41, 58, 115, 116, 114, 40, 41, 10, 32, 32, 32, 101, 108, 115, 101, 10, 9, 32, 32, 101, 114, 114, 111, 114, 40, 34, 97, 117, 116, 111, 109, 97, 116, 105, 99, 32, 115, 116, 114, 40, 41, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 116, 121, 112, 101, 58, 32, 34, 46, 46, 116, 41, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 98, 105, 110, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 105, 102, 40, 116, 32, 61, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 41, 32, 116, 104, 101, 110, 10, 9, 32, 32, 105, 102, 32, 79, 46, 105, 115, 95, 98, 105, 110, 40, 100, 97, 116, 97, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 98, 105, 110, 40, 100, 97, 116, 97, 41, 10, 9, 32, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 115, 116, 114, 40, 100, 97, 116, 97, 41, 58, 98, 105, 110, 40, 41, 32, 101, 110, 100, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 110, 117, 109, 98, 101, 114, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 116, 97, 98, 108, 101, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 98, 105, 110, 40, 41, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 111, 99, 116, 101, 116, 40, 41, 58, 98, 105, 110, 40, 41, 32, 45, 45, 32, 97, 110, 121, 32, 122, 101, 110, 114, 111, 111, 109, 32, 116, 121, 112, 101, 32, 116, 111, 32, 111, 99, 116, 101, 116, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 98, 97, 115, 101, 54, 52, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 100, 97, 116, 97, 32, 116, 104, 101, 110, 32, 101, 114, 114, 111, 114, 40, 34, 73, 110, 116, 101, 114, 110, 97, 108, 32, 100, 97, 116, 97, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 111, 110, 32, 110, 105, 108, 34, 44, 50, 41, 32, 101, 110, 100, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 105, 102, 40, 116, 32, 61, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 41, 32, 116, 104, 101, 110, 10, 9, 32, 32, 105, 102, 32, 79, 46, 105, 115, 95, 98, 97, 115, 101, 54, 52, 40, 100, 97, 116, 97, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 98, 97, 115, 101, 54, 52, 40, 100, 97, 116, 97, 41, 10, 9, 32, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 115, 116, 114, 40, 100, 97, 116, 97, 41, 58, 98, 97, 115, 101, 54, 52, 40, 41, 32, 101, 110, 100, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 110, 117, 109, 98, 101, 114, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 116, 97, 98, 108, 101, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 98, 97, 115, 101, 54, 52, 40, 41, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 111, 99, 116, 101, 116, 40, 41, 58, 98, 97, 115, 101, 54, 52, 40, 41, 32, 45, 45, 32, 97, 110, 121, 32, 122, 101, 110, 114, 111, 111, 109, 32, 116, 121, 112, 101, 32, 116, 111, 32, 111, 99, 116, 101, 116, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 117, 114, 108, 54, 52, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 105, 102, 32, 110, 111, 116, 32, 100, 97, 116, 97, 32, 116, 104, 101, 110, 32, 101, 114, 114, 111, 114, 40, 34, 73, 110, 116, 101, 114, 110, 97, 108, 32, 100, 97, 116, 97, 32, 99, 111, 110, 118, 101, 114, 115, 105, 111, 110, 32, 111, 110, 32, 110, 105, 108, 34, 44, 50, 41, 32, 101, 110, 100, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 105, 102, 40, 116, 32, 61, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 41, 32, 116, 104, 101, 110, 10, 9, 32, 32, 105, 102, 32, 79, 46, 105, 115, 95, 117, 114, 108, 54, 52, 40, 100, 97, 116, 97, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 117, 114, 108, 54, 52, 40, 100, 97, 116, 97, 41, 10, 9, 32, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 115, 116, 114, 40, 100, 97, 116, 97, 41, 58, 117, 114, 108, 54, 52, 40, 41, 32, 101, 110, 100, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 110, 117, 109, 98, 101, 114, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 116, 97, 98, 108, 101, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 117, 114, 108, 54, 52, 40, 41, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 111, 99, 116, 101, 116, 40, 41, 58, 117, 114, 108, 54, 52, 40, 41, 32, 45, 45, 32, 97, 110, 121, 32, 122, 101, 110, 114, 111, 111, 109, 32, 116, 121, 112, 101, 32, 116, 111, 32, 111, 99, 116, 101, 116, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 98, 97, 115, 101, 53, 56, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 116, 32, 61, 32, 116, 121, 112, 101, 40, 100, 97, 116, 97, 41, 10, 32, 32, 32, 105, 102, 40, 116, 32, 61, 61, 32, 34, 115, 116, 114, 105, 110, 103, 34, 41, 32, 116, 104, 101, 110, 10, 9, 32, 32, 105, 102, 32, 79, 46, 105, 115, 95, 98, 97, 115, 101, 53, 56, 40, 100, 97, 116, 97, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 98, 97, 115, 101, 53, 56, 40, 100, 97, 116, 97, 41, 10, 9, 32, 32, 101, 108, 115, 101, 32, 114, 101, 116, 117, 114, 110, 32, 79, 46, 102, 114, 111, 109, 95, 115, 116, 114, 40, 100, 97, 116, 97, 41, 58, 98, 97, 115, 101, 53, 56, 40, 41, 32, 101, 110, 100, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 40, 116, 32, 61, 61, 32, 34, 122, 101, 110, 114, 111, 111, 109, 46, 111, 99, 116, 101, 116, 34, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 98, 97, 115, 101, 53, 56, 40, 41, 10, 32, 32, 32, 101, 108, 115, 101, 105, 102, 32, 105, 115, 122, 101, 110, 40, 116, 41, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 100, 97, 116, 97, 58, 111, 99, 116, 101, 116, 40, 41, 58, 98, 97, 115, 101, 53, 56, 40, 41, 32, 45, 45, 32, 97, 110, 121, 32, 122, 101, 110, 114, 111, 111, 109, 32, 116, 121, 112, 101, 32, 116, 111, 32, 111, 99, 116, 101, 116, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 45, 45, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 97, 110, 32, 97, 114, 114, 97, 121, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 97, 110, 121, 32, 116, 121, 112, 101, 32, 111, 102, 32, 99, 114, 121, 112, 116, 111, 103, 114, 97, 112, 104, 105, 99, 32, 110, 117, 109, 98, 101, 114, 115, 10, 111, 99, 116, 101, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 106, 41, 32, 114, 101, 116, 117, 114, 110, 32, 79, 67, 84, 69, 84, 46, 102, 114, 111, 109, 95, 115, 116, 114, 105, 110, 103, 40, 32, 67, 66, 79, 82, 46, 101, 110, 99, 111, 100, 101, 40, 111, 98, 106, 41, 41, 32, 101, 110, 100, 10, 10, 114, 101, 116, 117, 114, 110, 32, 111, 99, 116, 101, 116, 10]);
Module['FS_createDataFile']('/', 'zenroom_octet.lua', fileData34, true, true, false);
var fileData35 = [];
fileData35.push.apply(fileData35, [84, 104, 101, 32, 102, 105, 108, 101, 115, 32, 105, 110, 32, 116, 104, 105, 115, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 97, 114, 101, 32, 34, 112, 117, 114, 101, 34, 32, 76, 85, 65, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 115, 32, 115, 116, 97, 116, 105, 99, 97, 108, 108, 121, 10, 99, 111, 109, 112, 105, 108, 101, 100, 32, 97, 115, 32, 98, 105, 110, 97, 114, 105, 101, 115, 32, 97, 110, 100, 32, 108, 111, 97, 100, 101, 100, 32, 105, 110, 115, 105, 100, 101, 32, 122, 101, 110, 114, 111, 111, 109, 32, 97, 115, 32, 115, 116, 114, 105, 110, 103, 115, 46, 32, 84, 104, 105, 115, 32, 105, 115, 10, 98, 101, 99, 97, 117, 115, 101, 32, 116, 104, 101, 32, 90, 101, 110, 114, 111, 111, 109, 32, 99, 97, 110, 110, 111, 116, 32, 97, 99, 99, 101, 115, 115, 32, 116, 104, 101, 32, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109, 46, 10, 10, 84, 104, 101, 32, 101, 120, 116, 101, 110, 115, 105, 111, 110, 115, 32, 97, 114, 101, 32, 99, 111, 109, 112, 105, 108, 101, 100, 32, 105, 110, 116, 111, 32, 67, 32, 104, 101, 97, 100, 101, 114, 115, 32, 98, 121, 32, 116, 104, 101, 32, 77, 97, 107, 101, 102, 105, 108, 101, 32, 116, 97, 114, 103, 101, 116, 10, 96, 101, 109, 98, 101, 100, 45, 108, 117, 97, 96, 32, 119, 104, 105, 99, 104, 32, 110, 101, 101, 100, 115, 32, 116, 111, 32, 98, 101, 32, 114, 117, 110, 32, 109, 97, 110, 117, 97, 108, 108, 121, 32, 105, 110, 32, 99, 97, 115, 101, 32, 111, 102, 32, 97, 100, 100, 105, 116, 105, 111, 110, 32, 111, 102, 32, 110, 101, 119, 10, 101, 120, 116, 101, 110, 115, 105, 111, 110, 115, 46, 32, 84, 104, 101, 110, 32, 122, 109, 97, 107, 101, 32, 101, 109, 98, 101, 100, 45, 108, 117, 97, 122, 32, 119, 105, 108, 108, 32, 99, 114, 101, 97, 116, 101, 32, 96, 108, 117, 97, 108, 105, 98, 95, 42, 46, 99, 96, 32, 102, 105, 108, 101, 115, 32, 105, 110, 115, 105, 100, 101, 10, 116, 104, 101, 32, 115, 114, 99, 47, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 46, 32, 84, 111, 32, 99, 111, 109, 112, 108, 101, 116, 101, 32, 105, 110, 99, 108, 117, 115, 105, 111, 110, 32, 116, 104, 101, 121, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 97, 100, 100, 101, 100, 32, 97, 116, 32, 116, 104, 101, 10, 98, 101, 103, 105, 110, 110, 105, 110, 103, 32, 111, 102, 32, 116, 104, 101, 32, 108, 117, 97, 95, 102, 117, 110, 99, 116, 105, 111, 110, 115, 46, 99, 32, 102, 105, 108, 101, 115, 32, 40, 105, 110, 115, 105, 100, 101, 32, 116, 104, 101, 32, 35, 105, 110, 99, 108, 117, 100, 101, 32, 100, 105, 114, 101, 99, 116, 105, 118, 101, 10, 97, 115, 32, 105, 102, 32, 116, 104, 101, 121, 39, 100, 32, 98, 101, 32, 104, 101, 97, 100, 101, 114, 115, 41, 32, 97, 110, 100, 32, 97, 116, 32, 116, 104, 101, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 102, 105, 108, 101, 32, 98, 121, 32, 116, 104, 101, 10, 108, 115, 98, 95, 108, 111, 97, 100, 95, 115, 116, 114, 105, 110, 103, 40, 41, 32, 116, 97, 107, 105, 110, 103, 32, 116, 104, 101, 109, 32, 97, 115, 32, 115, 116, 114, 105, 110, 103, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 46, 10, 10]);
Module['FS_createDataFile']('/', 'README.md', fileData35, true, true, false);
var fileData36 = [];
fileData36.push.apply(fileData36, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 100, 101, 115, 105, 103, 110, 101, 100, 44, 32, 119, 114, 105, 116, 116, 101, 110, 32, 97, 110, 100, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 32, 60, 106, 97, 114, 111, 109, 105, 108, 64, 100, 121, 110, 101, 46, 111, 114, 103, 62, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 87, 104, 101, 110, 40, 34, 109, 111, 118, 101, 32, 39, 39, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 102, 114, 111, 109, 44, 32, 116, 111, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 116, 111, 93, 44, 32, 34, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 116, 111, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 102, 114, 111, 109, 93, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 102, 114, 111, 109, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 102, 114, 111, 109, 93, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 79, 98, 106, 101, 99, 116, 32, 116, 111, 32, 109, 111, 118, 101, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 101, 108, 101, 109, 101, 110, 116, 58, 32, 34, 46, 46, 102, 114, 111, 109, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 65, 67, 75, 91, 116, 111, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 44, 32, 110, 111, 116, 32, 97, 32, 116, 97, 98, 108, 101, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 58, 32, 34, 46, 46, 116, 111, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 116, 111, 93, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 97, 114, 114, 97, 121, 39, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 91, 116, 111, 93, 44, 32, 65, 67, 75, 91, 102, 114, 111, 109, 93, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 91, 116, 111, 93, 91, 102, 114, 111, 109, 93, 32, 61, 32, 65, 67, 75, 91, 102, 114, 111, 109, 93, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 91, 102, 114, 111, 109, 93, 32, 61, 32, 110, 105, 108, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 111, 112, 121, 32, 39, 39, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 102, 114, 111, 109, 44, 32, 116, 111, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 116, 111, 93, 44, 32, 34, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 116, 111, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 102, 114, 111, 109, 93, 44, 32, 34, 79, 98, 106, 101, 99, 116, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 102, 114, 111, 109, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 102, 114, 111, 109, 93, 46, 122, 101, 110, 116, 121, 112, 101, 32, 61, 61, 32, 39, 101, 108, 101, 109, 101, 110, 116, 39, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 79, 98, 106, 101, 99, 116, 32, 116, 111, 32, 99, 111, 112, 121, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 101, 108, 101, 109, 101, 110, 116, 58, 32, 34, 46, 46, 102, 114, 111, 109, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 108, 117, 97, 116, 121, 112, 101, 40, 65, 67, 75, 91, 116, 111, 93, 41, 32, 61, 61, 32, 39, 116, 97, 98, 108, 101, 39, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 73, 110, 118, 97, 108, 105, 100, 32, 100, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 44, 32, 110, 111, 116, 32, 97, 32, 116, 97, 98, 108, 101, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 58, 32, 34, 46, 46, 116, 111, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 105, 115, 97, 114, 114, 97, 121, 40, 65, 67, 75, 91, 116, 111, 93, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 65, 67, 75, 91, 116, 111, 93, 44, 32, 65, 67, 75, 91, 102, 114, 111, 109, 93, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 91, 116, 111, 93, 91, 102, 114, 111, 109, 93, 32, 61, 32, 65, 67, 75, 91, 102, 114, 111, 109, 93, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 91, 102, 114, 111, 109, 93, 32, 61, 32, 110, 105, 108, 10, 101, 110, 100, 41, 10, 10, 45, 45, 32, 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 109, 97, 112, 32, 114, 101, 100, 117, 99, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 97, 115, 10, 45, 45, 32, 118, 97, 108, 117, 101, 115, 32, 102, 111, 117, 110, 100, 44, 32, 105, 116, 32, 117, 115, 101, 115, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 112, 111, 105, 110, 116, 101, 114, 115, 32, 97, 110, 100, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 102, 114, 111, 109, 32, 116, 104, 101, 10, 45, 45, 32, 112, 97, 114, 97, 109, 115, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 46, 10, 45, 45, 32, 112, 97, 114, 97, 109, 46, 116, 97, 114, 103, 101, 116, 32, 61, 32, 107, 101, 121, 32, 110, 97, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 102, 105, 110, 100, 10, 45, 45, 32, 112, 97, 114, 97, 109, 46, 111, 112, 32, 61, 32, 115, 105, 110, 103, 108, 101, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 111, 32, 114, 117, 110, 32, 111, 110, 32, 102, 111, 117, 110, 100, 32, 118, 97, 108, 117, 101, 10, 45, 45, 32, 112, 97, 114, 97, 109, 46, 99, 109, 112, 32, 61, 32, 100, 117, 97, 108, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 32, 102, 111, 114, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 101, 108, 105, 103, 105, 98, 105, 108, 105, 116, 121, 10, 45, 45, 32, 112, 97, 114, 97, 109, 46, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 61, 32, 107, 47, 118, 32, 108, 105, 115, 116, 32, 111, 102, 32, 101, 108, 101, 109, 101, 110, 116, 115, 32, 116, 111, 32, 99, 111, 109, 112, 97, 114, 101, 32, 105, 110, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 105, 99, 116, 115, 95, 114, 101, 100, 117, 99, 101, 40, 100, 105, 99, 116, 115, 44, 32, 112, 97, 114, 97, 109, 115, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 102, 111, 117, 110, 100, 10, 32, 32, 32, 102, 111, 114, 32, 97, 107, 44, 97, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 100, 105, 99, 116, 115, 41, 32, 100, 111, 10, 9, 32, 32, 102, 111, 117, 110, 100, 32, 61, 32, 102, 97, 108, 115, 101, 10, 9, 32, 32, 45, 45, 32, 97, 112, 112, 108, 121, 32, 112, 97, 114, 97, 109, 115, 32, 102, 105, 108, 116, 101, 114, 115, 44, 32, 98, 111, 111, 108, 101, 97, 110, 32, 106, 117, 115, 116, 32, 99, 104, 101, 99, 107, 32, 107, 101, 121, 32, 112, 114, 101, 115, 101, 110, 99, 101, 10, 9, 32, 32, 105, 102, 32, 112, 97, 114, 97, 109, 115, 46, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 97, 110, 100, 32, 112, 97, 114, 97, 109, 115, 46, 99, 109, 112, 32, 116, 104, 101, 110, 10, 9, 9, 32, 102, 111, 114, 32, 112, 107, 44, 112, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 112, 97, 114, 97, 109, 115, 46, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 41, 32, 100, 111, 10, 9, 9, 9, 105, 102, 32, 97, 118, 91, 112, 107, 93, 32, 116, 104, 101, 110, 10, 9, 9, 9, 32, 32, 32, 105, 102, 32, 112, 97, 114, 97, 109, 115, 46, 99, 109, 112, 40, 97, 118, 91, 112, 107, 93, 44, 32, 112, 118, 41, 32, 116, 104, 101, 110, 10, 9, 9, 9, 9, 32, 32, 102, 111, 117, 110, 100, 32, 61, 32, 116, 114, 117, 101, 10, 9, 9, 9, 32, 32, 32, 101, 110, 100, 10, 9, 9, 9, 101, 110, 100, 10, 9, 9, 32, 101, 110, 100, 10, 9, 32, 32, 101, 108, 115, 101, 32, 102, 111, 117, 110, 100, 32, 61, 32, 116, 114, 117, 101, 32, 101, 110, 100, 32, 45, 45, 32, 110, 111, 32, 102, 105, 108, 116, 101, 114, 115, 44, 32, 97, 112, 112, 108, 121, 32, 101, 118, 101, 114, 121, 119, 104, 101, 114, 101, 10, 9, 32, 32, 45, 45, 32, 97, 112, 112, 108, 121, 32, 115, 117, 109, 32, 111, 102, 32, 115, 101, 108, 101, 99, 116, 101, 100, 32, 107, 101, 121, 47, 118, 97, 108, 117, 101, 10, 9, 32, 32, 105, 102, 32, 102, 111, 117, 110, 100, 32, 116, 104, 101, 110, 10, 9, 9, 32, 102, 111, 114, 32, 107, 44, 118, 32, 105, 110, 32, 112, 97, 105, 114, 115, 40, 97, 118, 41, 32, 100, 111, 10, 9, 9, 9, 105, 102, 32, 107, 32, 61, 61, 32, 112, 97, 114, 97, 109, 115, 46, 116, 97, 114, 103, 101, 116, 32, 116, 104, 101, 110, 10, 9, 9, 9, 32, 32, 32, 112, 97, 114, 97, 109, 115, 46, 111, 112, 40, 118, 41, 10, 9, 9, 9, 101, 110, 100, 10, 9, 9, 32, 101, 110, 100, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 87, 104, 101, 110, 40, 34, 102, 105, 110, 100, 32, 116, 104, 101, 32, 109, 97, 120, 32, 118, 97, 108, 117, 101, 32, 39, 39, 32, 102, 111, 114, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 105, 101, 115, 32, 105, 110, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 97, 109, 101, 44, 32, 97, 114, 114, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 97, 114, 114, 93, 44, 32, 34, 78, 111, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 105, 101, 115, 32, 102, 111, 117, 110, 100, 32, 105, 110, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 97, 120, 32, 61, 32, 48, 10, 9, 9, 108, 111, 99, 97, 108, 32, 112, 97, 114, 97, 109, 115, 32, 61, 32, 123, 32, 116, 97, 114, 103, 101, 116, 32, 61, 32, 110, 97, 109, 101, 32, 125, 10, 9, 9, 112, 97, 114, 97, 109, 115, 46, 111, 112, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 41, 32, 105, 102, 32, 109, 97, 120, 32, 60, 32, 118, 32, 116, 104, 101, 110, 32, 109, 97, 120, 32, 61, 32, 118, 32, 101, 110, 100, 32, 101, 110, 100, 10, 9, 9, 100, 105, 99, 116, 115, 95, 114, 101, 100, 117, 99, 101, 40, 65, 67, 75, 91, 97, 114, 114, 93, 44, 112, 97, 114, 97, 109, 115, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 109, 97, 120, 44, 32, 34, 78, 111, 32, 109, 97, 120, 32, 118, 97, 108, 117, 101, 32, 34, 46, 46, 110, 97, 109, 101, 46, 46, 34, 32, 102, 111, 117, 110, 100, 32, 97, 99, 114, 111, 115, 115, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 105, 101, 115, 32, 105, 110, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 46, 109, 97, 120, 95, 118, 97, 108, 117, 101, 32, 61, 32, 109, 97, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 109, 97, 120, 95, 118, 97, 108, 117, 101, 32, 61, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 97, 114, 114, 93, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 115, 117, 109, 32, 118, 97, 108, 117, 101, 32, 39, 39, 32, 102, 111, 114, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 105, 101, 115, 32, 105, 110, 32, 39, 39, 32, 119, 104, 101, 114, 101, 32, 39, 39, 32, 62, 32, 39, 39, 34, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 97, 109, 101, 44, 97, 114, 114, 44, 32, 108, 101, 102, 116, 44, 32, 114, 105, 103, 104, 116, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 97, 114, 114, 93, 44, 32, 34, 78, 111, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 105, 101, 115, 32, 102, 111, 117, 110, 100, 32, 105, 110, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 114, 105, 103, 104, 116, 93, 44, 32, 34, 82, 105, 103, 104, 116, 32, 115, 105, 100, 101, 32, 116, 101, 114, 109, 32, 111, 102, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 114, 105, 103, 104, 116, 41, 10, 10, 9, 9, 108, 111, 99, 97, 108, 32, 115, 117, 109, 32, 61, 32, 48, 32, 45, 45, 32, 114, 101, 115, 117, 108, 116, 32, 111, 102, 32, 114, 101, 100, 117, 99, 116, 105, 111, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 112, 97, 114, 97, 109, 115, 32, 61, 32, 123, 32, 116, 97, 114, 103, 101, 116, 32, 61, 32, 110, 97, 109, 101, 44, 10, 9, 9, 9, 9, 9, 9, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 61, 32, 123, 32, 125, 32, 125, 10, 9, 9, 112, 97, 114, 97, 109, 115, 46, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 91, 108, 101, 102, 116, 93, 32, 61, 32, 65, 67, 75, 91, 114, 105, 103, 104, 116, 93, 32, 45, 45, 32, 117, 115, 101, 100, 32, 105, 110, 32, 99, 109, 112, 10, 9, 9, 112, 97, 114, 97, 109, 115, 46, 99, 109, 112, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 108, 44, 114, 41, 32, 114, 101, 116, 117, 114, 110, 32, 108, 32, 62, 32, 114, 32, 101, 110, 100, 10, 9, 9, 112, 97, 114, 97, 109, 115, 46, 111, 112, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 41, 32, 115, 117, 109, 32, 61, 32, 115, 117, 109, 32, 43, 32, 118, 32, 101, 110, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 99, 116, 115, 95, 114, 101, 100, 117, 99, 101, 40, 65, 67, 75, 91, 97, 114, 114, 93, 44, 32, 112, 97, 114, 97, 109, 115, 41, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 115, 117, 109, 44, 32, 34, 78, 111, 32, 115, 117, 109, 32, 111, 102, 32, 118, 97, 108, 117, 101, 32, 34, 46, 46, 110, 97, 109, 101, 10, 9, 9, 9, 9, 9, 32, 32, 46, 46, 34, 32, 102, 111, 117, 110, 100, 32, 97, 99, 114, 111, 115, 115, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 105, 101, 115, 32, 105, 110, 34, 46, 46, 97, 114, 114, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 65, 67, 75, 46, 115, 117, 109, 95, 118, 97, 108, 117, 101, 32, 61, 32, 115, 117, 109, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 46, 115, 117, 109, 95, 118, 97, 108, 117, 101, 32, 61, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 97, 114, 114, 93, 10, 101, 110, 100, 41, 10, 10, 87, 104, 101, 110, 40, 34, 102, 105, 110, 100, 32, 116, 104, 101, 32, 39, 39, 32, 102, 111, 114, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 105, 101, 115, 32, 105, 110, 32, 39, 39, 32, 119, 104, 101, 114, 101, 32, 39, 39, 32, 61, 32, 39, 39, 34, 44, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 97, 109, 101, 44, 32, 97, 114, 114, 44, 32, 108, 101, 102, 116, 44, 32, 114, 105, 103, 104, 116, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 97, 114, 114, 93, 44, 32, 34, 78, 111, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 105, 101, 115, 32, 102, 111, 117, 110, 100, 32, 105, 110, 58, 32, 34, 46, 46, 97, 114, 114, 41, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 65, 67, 75, 91, 114, 105, 103, 104, 116, 93, 44, 32, 34, 82, 105, 103, 104, 116, 32, 115, 105, 100, 101, 32, 116, 101, 114, 109, 32, 111, 102, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 58, 32, 34, 46, 46, 114, 105, 103, 104, 116, 41, 10, 10, 9, 9, 108, 111, 99, 97, 108, 32, 118, 97, 108, 10, 9, 9, 108, 111, 99, 97, 108, 32, 112, 97, 114, 97, 109, 115, 32, 61, 32, 123, 32, 116, 97, 114, 103, 101, 116, 32, 61, 32, 110, 97, 109, 101, 44, 10, 9, 9, 9, 9, 9, 9, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 61, 32, 123, 32, 125, 32, 125, 10, 9, 9, 112, 97, 114, 97, 109, 115, 46, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 91, 108, 101, 102, 116, 93, 32, 61, 32, 65, 67, 75, 91, 114, 105, 103, 104, 116, 93, 10, 9, 9, 112, 97, 114, 97, 109, 115, 46, 99, 109, 112, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 108, 44, 114, 41, 32, 114, 101, 116, 117, 114, 110, 32, 108, 32, 61, 61, 32, 114, 32, 101, 110, 100, 10, 9, 9, 112, 97, 114, 97, 109, 115, 46, 111, 112, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 118, 41, 32, 118, 97, 108, 32, 61, 32, 118, 32, 101, 110, 100, 10, 9, 9, 100, 105, 99, 116, 115, 95, 114, 101, 100, 117, 99, 101, 40, 65, 67, 75, 91, 97, 114, 114, 93, 44, 32, 112, 97, 114, 97, 109, 115, 41, 10, 10, 9, 9, 90, 69, 78, 46, 97, 115, 115, 101, 114, 116, 40, 118, 97, 108, 44, 32, 34, 78, 111, 32, 118, 97, 108, 117, 101, 32, 102, 111, 117, 110, 100, 32, 34, 46, 46, 110, 97, 109, 101, 46, 46, 34, 32, 97, 99, 114, 111, 115, 115, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 105, 101, 115, 32, 105, 110, 32, 34, 46, 46, 97, 114, 114, 41, 10, 9, 9, 65, 67, 75, 91, 110, 97, 109, 101, 93, 32, 61, 32, 118, 97, 108, 10, 9, 9, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 110, 97, 109, 101, 93, 32, 61, 32, 90, 69, 78, 46, 67, 79, 68, 69, 67, 91, 97, 114, 114, 93, 10, 101, 110, 100, 41, 10]);
Module['FS_createDataFile']('/', 'zencode_dictionary.lua', fileData36, true, true, false);
var fileData37 = [];
fileData37.push.apply(fileData37, [45, 45, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 90, 101, 110, 114, 111, 111, 109, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 41, 10, 45, 45, 10, 45, 45, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 50, 48, 32, 68, 121, 110, 101, 46, 111, 114, 103, 32, 102, 111, 117, 110, 100, 97, 116, 105, 111, 110, 10, 45, 45, 32, 87, 114, 105, 116, 116, 101, 110, 32, 98, 121, 32, 68, 101, 110, 105, 115, 32, 82, 111, 105, 111, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 102, 114, 101, 101, 32, 115, 111, 102, 116, 119, 97, 114, 101, 58, 32, 121, 111, 117, 32, 99, 97, 110, 32, 114, 101, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 32, 105, 116, 32, 97, 110, 100, 47, 111, 114, 32, 109, 111, 100, 105, 102, 121, 10, 45, 45, 32, 105, 116, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 10, 45, 45, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 44, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 10, 45, 45, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 32, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 10, 45, 45, 10, 45, 45, 32, 84, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 104, 111, 112, 101, 32, 116, 104, 97, 116, 32, 105, 116, 32, 119, 105, 108, 108, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 44, 10, 45, 45, 32, 98, 117, 116, 32, 87, 73, 84, 72, 79, 85, 84, 32, 65, 78, 89, 32, 87, 65, 82, 82, 65, 78, 84, 89, 59, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 118, 101, 110, 32, 116, 104, 101, 32, 105, 109, 112, 108, 105, 101, 100, 32, 119, 97, 114, 114, 97, 110, 116, 121, 32, 111, 102, 10, 45, 45, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 32, 111, 114, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 46, 32, 32, 83, 101, 101, 32, 116, 104, 101, 10, 45, 45, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 10, 45, 45, 10, 45, 45, 32, 89, 111, 117, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 114, 101, 99, 101, 105, 118, 101, 100, 32, 97, 32, 99, 111, 112, 121, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 65, 102, 102, 101, 114, 111, 32, 71, 101, 110, 101, 114, 97, 108, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 10, 45, 45, 32, 97, 108, 111, 110, 103, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 112, 114, 111, 103, 114, 97, 109, 46, 32, 32, 73, 102, 32, 110, 111, 116, 44, 32, 115, 101, 101, 32, 60, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 103, 110, 117, 46, 111, 114, 103, 47, 108, 105, 99, 101, 110, 115, 101, 115, 47, 62, 46, 10, 10, 108, 111, 99, 97, 108, 32, 97, 98, 99, 32, 61, 32, 123, 10, 32, 32, 32, 95, 86, 69, 82, 83, 73, 79, 78, 32, 61, 32, 39, 99, 114, 121, 112, 116, 111, 95, 97, 98, 99, 46, 108, 117, 97, 32, 49, 46, 48, 39, 44, 10, 32, 32, 32, 95, 85, 82, 76, 32, 61, 32, 39, 104, 116, 116, 112, 115, 58, 47, 47, 122, 101, 110, 114, 111, 111, 109, 46, 100, 121, 110, 101, 46, 111, 114, 103, 39, 44, 10, 32, 32, 32, 95, 68, 69, 83, 67, 82, 73, 80, 84, 73, 79, 78, 32, 61, 32, 39, 65, 116, 116, 114, 105, 98, 117, 116, 101, 32, 66, 97, 115, 101, 100, 32, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 32, 119, 105, 116, 104, 32, 111, 112, 116, 105, 111, 110, 97, 108, 32, 122, 101, 116, 97, 47, 85, 73, 68, 39, 44, 10, 32, 32, 32, 95, 76, 73, 67, 69, 78, 83, 69, 32, 61, 32, 91, 91, 10, 76, 105, 99, 101, 110, 115, 101, 100, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 111, 102, 32, 116, 104, 101, 32, 71, 78, 85, 32, 80, 117, 98, 108, 105, 99, 32, 76, 105, 99, 101, 110, 115, 101, 32, 97, 115, 32, 112, 117, 98, 108, 105, 115, 104, 101, 100, 32, 98, 121, 10, 116, 104, 101, 32, 70, 114, 101, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 70, 111, 117, 110, 100, 97, 116, 105, 111, 110, 59, 32, 101, 105, 116, 104, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 51, 32, 111, 102, 32, 116, 104, 101, 32, 76, 105, 99, 101, 110, 115, 101, 44, 32, 111, 114, 10, 40, 97, 116, 32, 121, 111, 117, 114, 32, 111, 112, 116, 105, 111, 110, 41, 32, 97, 110, 121, 32, 108, 97, 116, 101, 114, 32, 118, 101, 114, 115, 105, 111, 110, 46, 32, 32, 85, 110, 108, 101, 115, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 98, 121, 32, 97, 112, 112, 108, 105, 99, 97, 98, 108, 101, 10, 108, 97, 119, 32, 111, 114, 32, 97, 103, 114, 101, 101, 100, 32, 116, 111, 32, 105, 110, 32, 119, 114, 105, 116, 105, 110, 103, 44, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 117, 110, 100, 101, 114, 32, 116, 104, 101, 32, 76, 105, 99, 101, 110, 115, 101, 10, 105, 115, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 100, 32, 111, 110, 32, 97, 110, 32, 34, 65, 83, 32, 73, 83, 34, 32, 66, 65, 83, 73, 83, 44, 32, 87, 73, 84, 72, 79, 85, 84, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 79, 82, 10, 67, 79, 78, 68, 73, 84, 73, 79, 78, 83, 32, 79, 70, 32, 65, 78, 89, 32, 75, 73, 78, 68, 44, 32, 101, 105, 116, 104, 101, 114, 32, 101, 120, 112, 114, 101, 115, 115, 32, 111, 114, 32, 105, 109, 112, 108, 105, 101, 100, 46, 10, 93, 93, 10, 125, 10, 10, 108, 111, 99, 97, 108, 32, 71, 49, 32, 61, 32, 69, 67, 80, 46, 103, 101, 110, 101, 114, 97, 116, 111, 114, 40, 41, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 118, 97, 108, 117, 101, 10, 108, 111, 99, 97, 108, 32, 71, 50, 32, 61, 32, 69, 67, 80, 50, 46, 103, 101, 110, 101, 114, 97, 116, 111, 114, 40, 41, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 118, 97, 108, 117, 101, 10, 108, 111, 99, 97, 108, 32, 79, 32, 32, 61, 32, 69, 67, 80, 46, 111, 114, 100, 101, 114, 40, 41, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 118, 97, 108, 117, 101, 10, 10, 45, 45, 32, 115, 116, 97, 116, 101, 102, 117, 108, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 104, 97, 114, 100, 99, 111, 100, 101, 100, 32, 115, 116, 114, 105, 110, 103, 10, 108, 111, 99, 97, 108, 32, 104, 115, 32, 61, 32, 69, 67, 80, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 40, 115, 116, 114, 40, 91, 91, 10, 70, 111, 114, 107, 101, 100, 32, 98, 121, 32, 74, 97, 114, 111, 109, 105, 108, 32, 111, 110, 32, 49, 56, 32, 74, 97, 110, 117, 97, 114, 121, 32, 50, 48, 50, 48, 32, 102, 114, 111, 109, 32, 67, 111, 99, 111, 110, 117, 116, 32, 80, 101, 116, 105, 116, 105, 111, 110, 10, 93, 93, 32, 46, 46, 32, 97, 98, 99, 46, 95, 76, 73, 67, 69, 78, 83, 69, 41, 41, 10, 108, 111, 99, 97, 108, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 61, 32, 71, 49, 58, 111, 99, 116, 101, 116, 40, 41, 32, 46, 46, 32, 71, 50, 58, 111, 99, 116, 101, 116, 40, 41, 32, 46, 46, 32, 104, 115, 58, 111, 99, 116, 101, 116, 40, 41, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 98, 99, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 108, 105, 115, 116, 41, 10, 32, 32, 32, 45, 45, 32, 97, 115, 115, 101, 114, 116, 40, 97, 98, 99, 46, 99, 104, 97, 108, 108, 101, 110, 103, 101, 44, 32, 34, 65, 66, 67, 32, 115, 101, 99, 114, 101, 116, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 110, 111, 116, 32, 115, 101, 116, 34, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 73, 78, 84, 46, 110, 101, 119, 40, 32, 115, 104, 97, 50, 53, 54, 40, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 46, 46, 32, 90, 69, 78, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 40, 108, 105, 115, 116, 41, 41, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 108, 111, 99, 97, 108, 32, 122, 101, 114, 111, 45, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 112, 114, 111, 111, 102, 32, 118, 101, 114, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 109, 97, 107, 101, 95, 112, 105, 95, 115, 40, 103, 97, 109, 109, 97, 44, 32, 99, 111, 109, 109, 105, 116, 44, 32, 107, 44, 32, 114, 44, 32, 109, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 107, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 109, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 71, 49, 32, 42, 32, 119, 107, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 103, 97, 109, 109, 97, 32, 42, 32, 119, 107, 32, 43, 32, 99, 111, 109, 109, 105, 116, 32, 42, 32, 119, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 71, 49, 32, 42, 32, 119, 114, 32, 43, 32, 104, 115, 32, 42, 32, 119, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 32, 61, 32, 97, 98, 99, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 32, 99, 111, 109, 109, 105, 116, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 32, 125, 41, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 112, 105, 95, 115, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 99, 111, 109, 109, 105, 116, 32, 61, 32, 99, 44, 10, 9, 9, 9, 114, 107, 32, 61, 32, 119, 107, 32, 45, 32, 99, 32, 42, 32, 107, 44, 10, 9, 9, 9, 114, 109, 32, 61, 32, 119, 109, 32, 45, 32, 99, 32, 42, 32, 109, 44, 10, 9, 9, 9, 114, 114, 32, 61, 32, 119, 114, 32, 45, 32, 99, 32, 42, 32, 114, 32, 32, 125, 10, 101, 110, 100, 10, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 118, 101, 114, 105, 102, 121, 95, 112, 105, 95, 115, 40, 108, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 108, 46, 115, 105, 103, 110, 46, 97, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 99, 111, 109, 109, 105, 116, 10, 9, 32, 32, 43, 32, 71, 49, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 114, 107, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 108, 46, 115, 105, 103, 110, 46, 98, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 99, 111, 109, 109, 105, 116, 10, 9, 32, 32, 43, 32, 108, 46, 112, 117, 98, 108, 105, 99, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 114, 107, 10, 9, 32, 32, 43, 32, 108, 46, 99, 111, 109, 109, 105, 116, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 114, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 108, 46, 99, 111, 109, 109, 105, 116, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 99, 111, 109, 109, 105, 116, 10, 9, 32, 32, 43, 32, 71, 49, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 114, 114, 10, 9, 32, 32, 43, 32, 104, 115, 32, 42, 32, 108, 46, 112, 105, 95, 115, 46, 114, 109, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 97, 32, 98, 111, 111, 108, 32, 102, 111, 114, 32, 97, 115, 115, 101, 114, 116, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 108, 46, 112, 105, 95, 115, 46, 99, 111, 109, 109, 105, 116, 32, 61, 61, 32, 97, 98, 99, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 32, 108, 46, 99, 111, 109, 109, 105, 116, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 32, 125, 41, 10, 101, 110, 100, 10, 10, 45, 45, 32, 80, 117, 98, 108, 105, 99, 32, 67, 111, 99, 111, 110, 117, 116, 32, 65, 80, 73, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 98, 99, 46, 105, 115, 115, 117, 101, 114, 95, 107, 101, 121, 103, 101, 110, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 120, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 121, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 107, 32, 61, 32, 123, 32, 120, 32, 61, 32, 120, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 121, 32, 61, 32, 121, 32, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 118, 107, 32, 61, 32, 123, 32, 97, 108, 112, 104, 97, 32, 61, 32, 71, 50, 32, 42, 32, 120, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 116, 97, 32, 32, 61, 32, 71, 50, 32, 42, 32, 121, 32, 32, 125, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 107, 101, 121, 112, 97, 105, 114, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 115, 105, 103, 110, 32, 61, 32, 115, 107, 44, 10, 9, 9, 9, 118, 101, 114, 105, 102, 121, 32, 61, 32, 118, 107, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 98, 99, 46, 97, 103, 103, 114, 101, 103, 97, 116, 101, 95, 107, 101, 121, 115, 40, 107, 101, 121, 115, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 103, 103, 95, 97, 108, 112, 104, 97, 32, 61, 32, 107, 101, 121, 115, 91, 49, 93, 46, 97, 108, 112, 104, 97, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 103, 103, 95, 98, 101, 116, 97, 32, 32, 61, 32, 107, 101, 121, 115, 91, 49, 93, 46, 98, 101, 116, 97, 10, 32, 32, 32, 105, 102, 32, 35, 107, 101, 121, 115, 32, 62, 32, 49, 32, 116, 104, 101, 110, 10, 9, 32, 32, 102, 111, 114, 32, 105, 32, 61, 32, 50, 44, 32, 35, 107, 101, 121, 115, 32, 100, 111, 10, 9, 9, 32, 97, 103, 103, 95, 97, 108, 112, 104, 97, 32, 61, 32, 97, 103, 103, 95, 97, 108, 112, 104, 97, 32, 43, 32, 107, 101, 121, 115, 91, 105, 93, 46, 97, 108, 112, 104, 97, 10, 9, 9, 32, 97, 103, 103, 95, 98, 101, 116, 97, 32, 32, 61, 32, 97, 103, 103, 95, 98, 101, 116, 97, 32, 32, 43, 32, 107, 101, 121, 115, 91, 105, 93, 46, 98, 101, 116, 97, 10, 9, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 97, 103, 103, 107, 101, 121, 115, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 97, 108, 112, 104, 97, 32, 61, 32, 97, 103, 103, 95, 97, 108, 112, 104, 97, 44, 10, 9, 9, 9, 98, 101, 116, 97, 32, 61, 32, 97, 103, 103, 95, 98, 101, 116, 97, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 98, 99, 46, 112, 114, 101, 112, 97, 114, 101, 95, 98, 108, 105, 110, 100, 95, 115, 105, 103, 110, 40, 103, 97, 109, 109, 97, 44, 32, 115, 101, 99, 114, 101, 116, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 32, 61, 32, 73, 78, 84, 46, 110, 101, 119, 40, 115, 104, 97, 50, 53, 54, 40, 115, 101, 99, 114, 101, 116, 41, 41, 10, 32, 32, 32, 45, 45, 32, 69, 108, 71, 97, 109, 97, 108, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 111, 109, 109, 105, 116, 32, 61, 32, 71, 49, 32, 42, 32, 114, 32, 43, 32, 104, 115, 32, 42, 32, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 105, 103, 110, 32, 61, 32, 123, 32, 97, 32, 61, 32, 71, 49, 32, 42, 32, 107, 44, 10, 9, 9, 9, 9, 32, 32, 98, 32, 61, 32, 103, 97, 109, 109, 97, 32, 42, 32, 107, 32, 43, 32, 99, 111, 109, 109, 105, 116, 32, 42, 32, 109, 32, 125, 10, 32, 32, 32, 45, 45, 32, 99, 97, 108, 99, 117, 108, 97, 116, 101, 32, 122, 101, 114, 111, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 112, 114, 111, 111, 102, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 105, 95, 115, 32, 61, 32, 109, 97, 107, 101, 95, 112, 105, 95, 115, 40, 103, 97, 109, 109, 97, 44, 32, 99, 111, 109, 109, 105, 116, 44, 32, 107, 44, 32, 114, 44, 32, 109, 41, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 76, 97, 109, 98, 100, 97, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 99, 111, 109, 109, 105, 116, 32, 61, 32, 99, 111, 109, 109, 105, 116, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 105, 103, 110, 32, 32, 32, 61, 32, 115, 105, 103, 110, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 105, 95, 115, 32, 32, 32, 61, 32, 112, 105, 95, 115, 44, 10, 9, 9, 9, 112, 117, 98, 108, 105, 99, 32, 61, 32, 103, 97, 109, 109, 97, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 98, 99, 46, 98, 108, 105, 110, 100, 95, 115, 105, 103, 110, 40, 115, 107, 44, 32, 76, 97, 109, 98, 100, 97, 41, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 118, 101, 114, 105, 102, 121, 95, 112, 105, 95, 115, 40, 76, 97, 109, 98, 100, 97, 41, 44, 10, 9, 9, 32, 32, 39, 90, 101, 114, 111, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 112, 114, 111, 111, 102, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 40, 76, 97, 109, 98, 100, 97, 46, 112, 105, 95, 115, 41, 39, 44, 32, 50, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 104, 32, 61, 32, 76, 97, 109, 98, 100, 97, 46, 99, 111, 109, 109, 105, 116, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 95, 116, 105, 108, 100, 101, 32, 61, 32, 76, 97, 109, 98, 100, 97, 46, 115, 105, 103, 110, 46, 97, 32, 42, 32, 115, 107, 46, 121, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 98, 95, 116, 105, 108, 100, 101, 32, 61, 32, 104, 32, 42, 32, 115, 107, 46, 120, 32, 43, 32, 76, 97, 109, 98, 100, 97, 46, 115, 105, 103, 110, 46, 98, 32, 42, 32, 115, 107, 46, 121, 10, 32, 32, 32, 45, 45, 32, 115, 105, 103, 109, 97, 32, 116, 105, 108, 100, 101, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 104, 32, 61, 32, 104, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 95, 116, 105, 108, 100, 101, 32, 61, 32, 97, 95, 116, 105, 108, 100, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 95, 116, 105, 108, 100, 101, 32, 61, 32, 98, 95, 116, 105, 108, 100, 101, 32, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 98, 99, 46, 97, 103, 103, 114, 101, 103, 97, 116, 101, 95, 99, 114, 101, 100, 115, 40, 115, 107, 44, 32, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 97, 103, 103, 95, 115, 32, 61, 10, 9, 32, 32, 45, 45, 32, 69, 108, 71, 97, 109, 97, 108, 32, 118, 101, 114, 105, 102, 121, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 10, 9, 32, 32, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 91, 49, 93, 46, 98, 95, 116, 105, 108, 100, 101, 32, 45, 32, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 91, 49, 93, 46, 97, 95, 116, 105, 108, 100, 101, 32, 42, 32, 115, 107, 10, 10, 32, 32, 32, 105, 102, 32, 35, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 32, 62, 32, 49, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 105, 32, 61, 32, 50, 44, 32, 35, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 32, 100, 111, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 103, 103, 95, 115, 32, 61, 32, 97, 103, 103, 95, 115, 32, 43, 10, 9, 9, 9, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 91, 105, 93, 46, 98, 95, 116, 105, 108, 100, 101, 32, 45, 32, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 91, 105, 93, 46, 97, 95, 116, 105, 108, 100, 101, 32, 42, 32, 115, 107, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 101, 110, 100, 10, 32, 32, 32, 45, 45, 32, 97, 103, 103, 114, 101, 103, 97, 116, 101, 100, 32, 115, 105, 103, 109, 97, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 32, 104, 32, 61, 32, 115, 105, 103, 109, 97, 95, 116, 105, 108, 100, 101, 91, 49, 93, 46, 104, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 32, 61, 32, 97, 103, 103, 95, 115, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 98, 99, 46, 112, 114, 111, 118, 101, 95, 99, 114, 101, 100, 40, 118, 101, 114, 105, 102, 121, 44, 32, 115, 105, 103, 109, 97, 44, 32, 115, 101, 99, 114, 101, 116, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 32, 61, 32, 73, 78, 84, 46, 110, 101, 119, 40, 115, 104, 97, 50, 53, 54, 40, 115, 101, 99, 114, 101, 116, 41, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 95, 112, 114, 105, 109, 101, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 32, 61, 32, 123, 32, 104, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 46, 104, 32, 42, 32, 114, 95, 112, 114, 105, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 46, 115, 32, 42, 32, 114, 95, 112, 114, 105, 109, 101, 32, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 97, 112, 112, 97, 32, 61, 32, 118, 101, 114, 105, 102, 121, 46, 97, 108, 112, 104, 97, 32, 43, 32, 118, 101, 114, 105, 102, 121, 46, 98, 101, 116, 97, 32, 42, 32, 109, 32, 43, 32, 71, 50, 32, 42, 32, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 117, 32, 61, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 42, 32, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 109, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 61, 32, 97, 98, 99, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 10, 9, 32, 32, 123, 32, 118, 101, 114, 105, 102, 121, 46, 97, 108, 112, 104, 97, 44, 32, 118, 101, 114, 105, 102, 121, 46, 98, 101, 116, 97, 44, 10, 9, 9, 118, 101, 114, 105, 102, 121, 46, 97, 108, 112, 104, 97, 32, 43, 32, 71, 50, 32, 42, 32, 119, 114, 32, 43, 32, 118, 101, 114, 105, 102, 121, 46, 98, 101, 116, 97, 32, 42, 32, 119, 109, 44, 32, 45, 45, 32, 65, 119, 10, 9, 9, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 42, 32, 119, 114, 32, 125, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 66, 119, 10, 32, 32, 32, 45, 45, 32, 114, 101, 116, 117, 114, 110, 32, 84, 104, 101, 116, 97, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 123, 10, 32, 32, 32, 32, 32, 32, 107, 97, 112, 112, 97, 32, 61, 32, 107, 97, 112, 112, 97, 44, 10, 32, 32, 32, 32, 32, 32, 110, 117, 32, 61, 32, 110, 117, 44, 10, 32, 32, 32, 32, 32, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 112, 105, 95, 118, 32, 61, 32, 32, 123, 32, 99, 32, 61, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 44, 10, 9, 9, 9, 9, 114, 114, 32, 61, 32, 119, 114, 32, 45, 32, 114, 32, 42, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 44, 10, 9, 9, 9, 9, 114, 109, 32, 61, 32, 119, 109, 32, 45, 32, 109, 32, 42, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 125, 10, 32, 32, 32, 125, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 98, 99, 46, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 40, 118, 101, 114, 105, 102, 121, 44, 32, 84, 104, 101, 116, 97, 41, 10, 32, 32, 32, 105, 102, 32, 35, 118, 101, 114, 105, 102, 121, 32, 61, 61, 32, 49, 32, 116, 104, 101, 110, 32, 118, 101, 114, 105, 102, 121, 32, 61, 32, 118, 101, 114, 105, 102, 121, 91, 49, 93, 32, 101, 110, 100, 32, 45, 45, 32, 115, 105, 110, 103, 108, 101, 32, 101, 108, 101, 109, 101, 110, 116, 32, 105, 110, 32, 97, 114, 114, 97, 121, 10, 32, 32, 32, 45, 45, 32, 118, 101, 114, 105, 102, 121, 32, 112, 105, 95, 118, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 84, 104, 101, 116, 97, 46, 107, 97, 112, 112, 97, 32, 42, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 10, 9, 32, 32, 43, 32, 71, 50, 32, 42, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 114, 10, 9, 32, 32, 43, 32, 118, 101, 114, 105, 102, 121, 46, 97, 108, 112, 104, 97, 32, 42, 32, 40, 66, 73, 71, 46, 110, 101, 119, 40, 49, 41, 32, 45, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 41, 10, 9, 32, 32, 43, 32, 118, 101, 114, 105, 102, 121, 46, 98, 101, 116, 97, 32, 42, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 84, 104, 101, 116, 97, 46, 110, 117, 32, 42, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 10, 9, 32, 32, 43, 32, 84, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 42, 32, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 114, 10, 32, 32, 32, 45, 45, 32, 99, 104, 101, 99, 107, 32, 122, 101, 114, 111, 32, 107, 110, 111, 119, 108, 101, 100, 103, 101, 32, 112, 114, 111, 111, 102, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 84, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 32, 61, 61, 32, 97, 98, 99, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 118, 101, 114, 105, 102, 121, 46, 97, 108, 112, 104, 97, 44, 32, 118, 101, 114, 105, 102, 121, 46, 98, 101, 116, 97, 44, 32, 65, 119, 44, 32, 66, 119, 125, 41, 44, 10, 9, 9, 32, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 111, 111, 102, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 40, 119, 114, 111, 110, 103, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 41, 34, 44, 32, 50, 41, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 84, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 58, 105, 115, 105, 110, 102, 40, 41, 44, 10, 9, 9, 32, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 111, 111, 102, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 40, 115, 105, 103, 109, 97, 46, 104, 32, 105, 115, 32, 105, 110, 102, 105, 110, 105, 116, 101, 41, 34, 44, 32, 50, 41, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 69, 67, 80, 50, 46, 109, 105, 108, 108, 101, 114, 40, 84, 104, 101, 116, 97, 46, 107, 97, 112, 112, 97, 44, 32, 84, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 41, 10, 9, 9, 9, 32, 61, 61, 32, 69, 67, 80, 50, 46, 109, 105, 108, 108, 101, 114, 40, 71, 50, 44, 32, 84, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 115, 95, 112, 114, 105, 109, 101, 32, 43, 32, 84, 104, 101, 116, 97, 46, 110, 117, 41, 44, 10, 9, 9, 32, 32, 34, 67, 114, 101, 100, 101, 110, 116, 105, 97, 108, 32, 112, 114, 111, 111, 102, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 118, 101, 114, 105, 102, 121, 32, 40, 109, 105, 108, 108, 101, 114, 32, 108, 111, 111, 112, 32, 101, 114, 114, 111, 114, 41, 34, 44, 32, 50, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 101, 110, 100, 10, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 45, 45, 32, 112, 101, 116, 105, 116, 105, 111, 110, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 98, 99, 46, 112, 114, 111, 118, 101, 95, 99, 114, 101, 100, 95, 117, 105, 100, 40, 118, 107, 44, 32, 115, 105, 103, 109, 97, 44, 32, 115, 101, 99, 114, 101, 116, 44, 32, 117, 105, 100, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 109, 32, 61, 32, 73, 78, 84, 46, 110, 101, 119, 40, 115, 104, 97, 50, 53, 54, 40, 115, 101, 99, 114, 101, 116, 41, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 45, 45, 32, 109, 97, 116, 101, 114, 105, 97, 108, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 114, 95, 112, 114, 105, 109, 101, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 32, 61, 32, 123, 32, 104, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 46, 104, 32, 42, 32, 114, 95, 112, 114, 105, 109, 101, 44, 10, 9, 9, 9, 9, 9, 9, 32, 115, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 46, 115, 32, 42, 32, 114, 95, 112, 114, 105, 109, 101, 32, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 107, 97, 112, 112, 97, 32, 61, 32, 118, 107, 46, 97, 108, 112, 104, 97, 32, 43, 32, 118, 107, 46, 98, 101, 116, 97, 32, 42, 32, 109, 32, 43, 32, 71, 50, 32, 42, 32, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 110, 117, 32, 61, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 42, 32, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 122, 101, 116, 97, 32, 61, 32, 109, 32, 42, 32, 69, 67, 80, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 40, 117, 105, 100, 41, 10, 32, 32, 32, 45, 45, 32, 112, 114, 111, 111, 102, 32, 45, 45, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 119, 105, 116, 110, 101, 115, 115, 101, 115, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 109, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 119, 114, 32, 61, 32, 73, 78, 84, 46, 114, 97, 110, 100, 111, 109, 40, 41, 10, 32, 32, 32, 45, 45, 32, 99, 111, 109, 112, 117, 116, 101, 32, 116, 104, 101, 32, 119, 105, 116, 110, 101, 115, 115, 101, 115, 115, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 118, 107, 46, 97, 108, 112, 104, 97, 32, 43, 32, 118, 107, 46, 98, 101, 116, 97, 32, 42, 32, 119, 109, 32, 43, 32, 71, 50, 32, 42, 32, 119, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 42, 32, 119, 114, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 119, 109, 32, 42, 32, 69, 67, 80, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 40, 117, 105, 100, 41, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 116, 104, 101, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 99, 32, 61, 32, 97, 98, 99, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 32, 118, 107, 46, 97, 108, 112, 104, 97, 44, 32, 118, 107, 46, 98, 101, 116, 97, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 32, 125, 41, 10, 32, 32, 32, 45, 45, 32, 99, 114, 101, 97, 116, 101, 32, 114, 101, 115, 112, 111, 110, 115, 101, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 112, 105, 95, 118, 32, 61, 32, 123, 32, 99, 32, 61, 32, 99, 44, 10, 9, 9, 9, 9, 32, 32, 114, 109, 32, 61, 32, 119, 109, 32, 45, 32, 109, 32, 42, 32, 99, 44, 10, 9, 9, 9, 9, 32, 32, 114, 114, 32, 61, 32, 119, 114, 32, 45, 32, 114, 32, 42, 32, 99, 32, 125, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 84, 104, 101, 116, 97, 32, 61, 32, 123, 10, 32, 32, 32, 32, 32, 32, 107, 97, 112, 112, 97, 32, 61, 32, 107, 97, 112, 112, 97, 44, 10, 32, 32, 32, 32, 32, 32, 110, 117, 32, 61, 32, 110, 117, 44, 10, 32, 32, 32, 32, 32, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 32, 61, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 112, 105, 95, 118, 32, 61, 32, 112, 105, 95, 118, 32, 125, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 84, 104, 101, 116, 97, 44, 32, 122, 101, 116, 97, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 98, 99, 46, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 95, 117, 105, 100, 40, 118, 107, 44, 32, 116, 104, 101, 116, 97, 44, 32, 122, 101, 116, 97, 44, 32, 117, 105, 100, 41, 10, 32, 32, 32, 45, 45, 32, 114, 101, 99, 111, 109, 112, 117, 116, 101, 32, 119, 105, 116, 110, 101, 115, 115, 101, 115, 115, 32, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 115, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 65, 119, 32, 61, 32, 116, 104, 101, 116, 97, 46, 107, 97, 112, 112, 97, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 10, 9, 32, 32, 43, 32, 71, 50, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 114, 10, 9, 32, 32, 43, 32, 118, 107, 46, 97, 108, 112, 104, 97, 32, 42, 32, 40, 66, 73, 71, 46, 110, 101, 119, 40, 49, 41, 32, 45, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 41, 10, 9, 32, 32, 43, 32, 118, 107, 46, 98, 101, 116, 97, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 109, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 66, 119, 32, 61, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 114, 32, 42, 32, 116, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 32, 43, 32, 116, 104, 101, 116, 97, 46, 110, 117, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 10, 32, 32, 32, 108, 111, 99, 97, 108, 32, 67, 119, 32, 61, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 114, 109, 32, 42, 32, 69, 67, 80, 46, 104, 97, 115, 104, 116, 111, 112, 111, 105, 110, 116, 40, 117, 105, 100, 41, 32, 43, 32, 122, 101, 116, 97, 32, 42, 32, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 10, 32, 32, 32, 45, 45, 32, 99, 111, 109, 112, 117, 116, 101, 32, 116, 104, 101, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 32, 112, 114, 105, 109, 101, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 116, 104, 101, 116, 97, 46, 112, 105, 95, 118, 46, 99, 32, 61, 61, 32, 97, 98, 99, 46, 116, 111, 95, 99, 104, 97, 108, 108, 101, 110, 103, 101, 40, 123, 32, 118, 107, 46, 97, 108, 112, 104, 97, 44, 32, 118, 107, 46, 98, 101, 116, 97, 44, 32, 65, 119, 44, 32, 66, 119, 44, 32, 67, 119, 32, 125, 41, 44, 10, 9, 9, 32, 32, 34, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 99, 104, 97, 108, 108, 101, 110, 103, 101, 34, 44, 32, 50, 41, 10, 32, 32, 32, 45, 45, 32, 118, 101, 114, 105, 102, 121, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 45, 45, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 110, 111, 116, 32, 116, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 58, 105, 115, 105, 110, 102, 40, 41, 44, 10, 9, 9, 32, 32, 34, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 32, 112, 111, 105, 110, 116, 115, 32, 97, 116, 32, 105, 110, 102, 105, 110, 105, 116, 101, 34, 44, 32, 50, 41, 10, 32, 32, 32, 97, 115, 115, 101, 114, 116, 40, 69, 67, 80, 50, 46, 109, 105, 108, 108, 101, 114, 40, 116, 104, 101, 116, 97, 46, 107, 97, 112, 112, 97, 44, 32, 116, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 104, 95, 112, 114, 105, 109, 101, 41, 10, 9, 9, 9, 32, 61, 61, 32, 69, 67, 80, 50, 46, 109, 105, 108, 108, 101, 114, 40, 71, 50, 44, 32, 116, 104, 101, 116, 97, 46, 115, 105, 103, 109, 97, 95, 112, 114, 105, 109, 101, 46, 115, 95, 112, 114, 105, 109, 101, 32, 43, 32, 116, 104, 101, 116, 97, 46, 110, 117, 41, 44, 10, 9, 9, 32, 32, 34, 118, 101, 114, 105, 102, 121, 95, 99, 114, 101, 100, 95, 112, 101, 116, 105, 116, 105, 111, 110, 58, 32, 109, 105, 108, 108, 101, 114, 32, 108, 111, 111, 112, 32, 102, 97, 105, 108, 115, 34, 44, 32, 50, 41, 10, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 10, 101, 110, 100, 10, 10, 114, 101, 116, 117, 114, 110, 32, 97, 98, 99, 10]);
Module['FS_createDataFile']('/', 'crypto_abc.lua', fileData37, true, true, false);

    }
    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }
  
   }
   loadPackage({"files": []});
  
  })();
  


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (!(typeof process === 'object' && typeof require === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

  read_ = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

  read_ = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';




/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready

/** @suppress{duplicate} */
var stackSave;
/** @suppress{duplicate} */
var stackRestore;
/** @suppress{duplicate} */
var stackAlloc;

stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  assert(end <= HEAP8.length, 'failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}





/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {

  // If the type reflection proposal is available, use the new
  // "WebAssembly.Function" constructor.
  // Otherwise, construct a minimal wasm module importing the JS function and
  // re-exporting it.
  if (typeof WebAssembly.Function === "function") {
    var typeNames = {
      'i': 'i32',
      'j': 'i64',
      'f': 'f32',
      'd': 'f64'
    };
    var type = {
      parameters: [],
      results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
    };
    for (var i = 1; i < sig.length; ++i) {
      type.parameters.push(typeNames[sig[i]]);
    }
    return new WebAssembly.Function(type, func);
  }

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    'e': {
      'f': func
    }
  });
  var wrappedFunc = instance.exports['f'];
  return wrappedFunc;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < table.length; i++) {
      var item = table.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.


  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunctionWasm(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */




function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;



/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 328,
  'maximum': 328 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}



/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 9419888,
    STACKTOP = STACK_BASE,
    STACK_MAX = 4177008,
    DYNAMIC_BASE = 9419888,
    DYNAMICTOP_PTR = 4176848;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */




// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': 2147483648 / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
assert(65536 % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback(Module); // Pass the module as the first argument.
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;


/**
 * @license
 * Copyright 2015 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */







/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}



var wasmBinaryFile = 'zenroom.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  2254: function() {Module.exec_error();},  
 2312: function() {Module.exec_ok();},  
 6547: function($0) {Module.print(UTF8ToString($0))},  
 6580: function($0) {Module.printErr(UTF8ToString($0))},  
 17486: function($0) {var nodeRandomBytes = function() { return require("crypto").randomBytes; }; var browserRandomBytes = function(n) { var crypto = (self.crypto || self.msCrypto); var QUOTA = 65536; return function(n) { var arr = new Uint8Array(n); for (var i = 0; i < n; i += QUOTA) { crypto.getRandomValues( arr.subarray(i, i + Math.min(n - i, QUOTA))); } return arr; } }; var getRandomBytes = ((typeof self !== 'undefined' && (self.crypto || self.msCrypto)) ? browserRandomBytes : nodeRandomBytes)(); var out = _malloc($0); writeArrayToMemory(getRandomBytes($0), out); return out;}
};

function _emscripten_asm_const_iii(code, sigPtr, argbuf) {
  var args = readAsmConstArgs(sigPtr, argbuf);
  return ASM_CONSTS[code].apply(null, args);
}



// STATICTOP = STATIC_BASE + 4175984;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___handle_stack_overflow() {
      abort('stack overflow')
    }

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            // FIXME: this is inefficient as the file packager may have
            //        copied the data into memory already - we may want to
            //        integrate more there and let the file packager loading
            //        code be able to query if memory growth is on or off.
            if (canOwn) {
              warnOnce('file packager has copied file data into memory, but in memory growth we are forced to copy it again (see --no-heap-copy)');
            }
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};function ___sys_dup2(oldfd, suggestFD) {try {
  
      var old = SYSCALLS.getStreamFromFD(oldfd);
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_dup3(fd, suggestFD, flags) {try {
  
      var old = SYSCALLS.getStreamFromFD(fd);
      assert(!flags);
      if (old.fd === suggestFD) return -28;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = SYSCALLS.get();
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _abort() {
      abort();
    }

  function _emscripten_get_sbrk_ptr() {
      return 4176848;
    }

  
  
  
  var setjmpId=0;function _saveSetjmp(env, label, table, size) {
      // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
      // prevents relooping anyhow, so slowness is to be expected. And typical case
      // is 1 setjmp per invocation, or less.
      env = env|0;
      label = label|0;
      table = table|0;
      size = size|0;
      var i = 0;
      setjmpId = (setjmpId+1)|0;
      HEAP32[((env)>>2)]=setjmpId;
      while ((i|0) < (size|0)) {
        if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
          HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
          HEAP32[(((table)+((i<<3)+4))>>2)]=label;
          // prepare next slot
          HEAP32[(((table)+((i<<3)+8))>>2)]=0;
          setTempRet0((size) | 0);
          return table | 0;
        }
        i = i+1|0;
      }
      // grow the table
      size = (size*2)|0;
      table = _realloc(table|0, 8*(size+1|0)|0) | 0;
      table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
      setTempRet0((size) | 0);
      return table | 0;
    }
  
  function _testSetjmp(id, table, size) {
      id = id|0;
      table = table|0;
      size = size|0;
      var i = 0, curr = 0;
      while ((i|0) < (size|0)) {
        curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
        if ((curr|0) == 0) break;
        if ((curr|0) == (id|0)) {
          return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
        }
        i = i+1|0;
      }
      return 0;
    }function _longjmp(env, value) {
      _setThrew(env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  
  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        console.error('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
    }function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
  
      var PAGE_MULTIPLE = 65536;
  
      // Memory resize rules:
      // 1. When resizing, always produce a resized heap that is at least 16MB (to avoid tiny heap sizes receiving lots of repeated resizes at startup)
      // 2. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 3a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 3b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 4. Max size for the heap is capped at 2048MB-PAGE_MULTIPLE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 5. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit was set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      var maxHeapSize = 2147483648;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      var minHeapSize = 16777216;
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for(var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), PAGE_MULTIPLE));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _getTempRet0() {
      return (getTempRet0() | 0);
    }


  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }


  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function readAsmConstArgs(sigPtr, buf) {
      if (!readAsmConstArgs.array) {
        readAsmConstArgs.array = [];
      }
      var args = readAsmConstArgs.array;
      args.length = 0;
      var ch;
      while (ch = HEAPU8[sigPtr++]) {
        if (ch === 100/*'d'*/ || ch === 102/*'f'*/) {
          buf = (buf + 7) & ~7;
          args.push(HEAPF64[(buf >> 3)]);
          buf += 8;
        } else
        if (ch === 105 /*'i'*/)
        {
          buf = (buf + 3) & ~3;
          args.push(HEAP32[(buf >> 2)]);
          buf += 4;
        }
        else abort("unexpected char in asm const signature " + ch);
      }
      return args;
    }

var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
var ASSERTIONS = true;

/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


var asmGlobalArg = {};
var asmLibraryArg = { "__handle_stack_overflow": ___handle_stack_overflow, "__sys_dup2": ___sys_dup2, "__sys_dup3": ___sys_dup3, "__sys_fcntl64": ___sys_fcntl64, "__sys_ioctl": ___sys_ioctl, "__sys_open": ___sys_open, "abort": _abort, "emscripten_asm_const_iii": _emscripten_asm_const_iii, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_longjmp": _emscripten_longjmp, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": _getTempRet0, "invoke_vii": invoke_vii, "memory": wasmMemory, "saveSetjmp": _saveSetjmp, "setTempRet0": _setTempRet0, "table": wasmTable, "testSetjmp": _testSetjmp, "time": _time };
var asm = createWasm();
Module["asm"] = asm;
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasm_call_ctors"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _set_debug = Module["_set_debug"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["set_debug"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fflush"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["free"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _zencode_exec = Module["_zencode_exec"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["zencode_exec"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _zenroom_exec = Module["_zenroom_exec"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["zenroom_exec"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _zencode_exec_tobuf = Module["_zencode_exec_tobuf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["zencode_exec_tobuf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _zenroom_exec_tobuf = Module["_zenroom_exec_tobuf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["zenroom_exec_tobuf"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__errno_location"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _realloc = Module["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["realloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___set_stack_limit = Module["___set_stack_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__set_stack_limit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__growWasmMemory"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};


function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    dynCall_vii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}


/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["print"] = out;
Module["printErr"] = err;
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setjmpId")) Module["setjmpId"] = function() { abort("'setjmpId' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });



var calledRun;

// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (calledRun) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}





  return Module
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = Module;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return Module; });
    else if (typeof exports === 'object')
      exports["Module"] = Module;
    
}).call(this,require('_process'),require("buffer").Buffer,"/dist/lib/zenroom.js",arguments[3],arguments[4],arguments[5],arguments[6],"/dist/lib")
},{"_process":156,"buffer":65,"crypto":74,"fs":1,"path":148}],572:[function(require,module,exports){
"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("core-js/stable");

require("regenerator-runtime/runtime.js");

var _zenroom = _interopRequireDefault(require("../dist/lib/zenroom.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var C = (0, _zenroom.default)();
/* istanbul ignore next */

var zenroomExec = function zenroomExec(script) {
  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  C.then(function (Module) {
    Module.ccall('zenroom_exec', 'number', ['string', 'string', 'string', 'string'], [script, conf, keys, data]);
  });
};
/* istanbul ignore next */


var zencodeExec = function zencodeExec(script) {
  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  C.then(function (Module) {
    Module.ccall('zencode_exec', 'number', ['string', 'string', 'string', 'string'], [script, conf, keys, data]);
  });
};

var stringify = function stringify(field) {
  if (!field) {
    return null;
  }

  try {
    return JSON.stringify(JSON.parse(field));
  } catch (e) {
    if (_typeof(field) === 'object') {
      return JSON.stringify(field);
    }

    if (typeof field === 'string') {
      return field;
    }
  }
};

var zenroom = function () {
  var self = {};
  self.options = {};

  var __debug = function __debug() {
    return self;
  };
  /**
   * First, you'll have create a script that Zenroom can execute.
   * In this first section, we're covering Zenroom's scripts in Lua,
   * if you want to execute smart contracts in Zencode (Zenroom's
   * domain specific language), please see below.
   *
   * This method set the zenroom lua or zencode to run.
   *
   * The syntax of the Zenroom Lua scripts is documented at
   * https://dev.zenroom.org/
   * You may want also to look at some example in a live
   * executable environment at: https://dev.zenroom.org/demo
   *
   * @example <caption>Example usage of `script()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const script = 'print("hello")'
   * zenroom.script(script).zenroom_exec().reset()
   *
   * @param {string} script the lua script to be set
   * @returns {zenroom} as zenroom module
   */


  var script = function script(_script) {
    self.script = _script;
    return this;
  };
  /**
   * Set the parameter "keys" in JSON for the script/smart contract
   * you're executing in Zenroom.
   *
   * The keys will be available in the execution of the script/smart
   * contract as the `KEYS` variable.
   *
   * @example <caption>Example usage of `keys()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const script = `
   *                  keys = JSON.decode(KEYS)
   *                  print(keys)
   * `
   *
   * const keys = {a: 1, b: 2}
   * zenroom.script(script).keys(keys).zenroom_exec().reset()
   *
   * @param {object} keys the keys to be set as an object
   * @returns {object} as zenroom module
   */


  var keys = function keys(_keys) {
    self.keys = stringify(_keys);
    return this;
  };
  /**
   * Set the parameter "data" in JSON for the script/smart
   * contract you're executing in Zenroom.
   *
   * The data will be available in the execution of the
   * script/smart contract as the `DATA` variable.
   *
   * @example <caption>Example usage of `data()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const script = `
   *                  data = JSON.decode(DATA)
   *                  print(data)
   * `
   *
   * const data = {a: 1, b: 2}
   * zenroom.script(script).data(data).zenroom_exec()
   *
   * @param {string} data
   * @returns {object} as zenroom module
   */


  var data = function data(_data) {
    self.data = stringify(_data);
    return this;
  };
  /**
   * Set the configuration of zenroom execution.
   *
   * The possible configurations are available
   * [here](https://github.com/DECODEproject/Zenroom/blob/master/src/zen_config.c #L104-L111)
   *
   * @example <caption>Example usage of `conf()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const script = 'print("hello")'
   * const conf = 'debug=1,memwipe=0'
   * zenroom.script(script).conf(conf).zenroom_exec()
   *
   * @param {string} conf the string of configuration to be set
   * @returns {object} as zenroom module
   */


  var conf = function conf(_conf) {
    self.conf = _conf;
    return this;
  };
  /**
   * Set the print_err callback: customize the behaviour of the
   * print_err calls made to stderr,by default it prints to the
   * `console.error`
   *
   * @example <caption>Example usage of `print_err()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const savedLines = []
   * const print_err_fn = (text) => { savedLines.push(text) }
   * const script = 'print("hello")'
   * zenroom.print_err(print_err_fn).script(script).zenroom_exec()
   *
   * @callback print_err
   * @returns {object} as zenroom module
   */


  var print_err = function print_err(e) {
    self.print_err = e;
    C.then(function (Module) {
      Module.printErr = function (text) {
        return self.print_err(text);
      };
    });
    return this;
  };
  /**
   * Set the print callback: customize * the behavior of the
   * print calls made to stdout,by default it prints to the
   * `console.log`
   *
   * @example <caption>Example usage of `print()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const savedLines = []
   * const printFunction = (text) => { savedLines.push(text) }
   * const script = 'print("hello")'
   * zenroom.print(printFunction).script(script).zenroom_exec()
   *
   * @callback print
   * @returns {object} as zenroom module
   */


  var print = function print(printFunction) {
    self.print = printFunction;
    C.then(function (Module) {
      Module.print = function (text) {
        return self.print(text);
      };
    });
    return this;
  };
  /**
   * Set the `success` callback that is executed after
   * a successful execution of Zenroom
   *
   * @example <caption>Example usage of `success()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const script = 'print("hello")'
   * zenroom.script(script).success(()=>{
   *    pleaseRunSomeOtherMethodAfter()
   * }).zenroom_exec()
   *
   * @callback success
   * @returns {object} as zenroom module
   */


  var success = function success(successCallback) {
    self.success = successCallback;
    C.then(function (Module) {
      Module.exec_ok = successCallback;
    });
    return this;
  };
  /**
   * Set the "error callback" that is executed after an
   * unsuccessful execution of Zenroom
   *
   * @example <caption>Example usage of `error()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const script = 'print("hello")';
   * zenroom.script(script).error(()=>{
   *    pleaseRunSomeOtherMethodAfterError()
   * }).zenroom_exec()
   *
   * @callback error
   * @returns {object} as zenroom module
   */


  var error = function error(errorCallback) {
    self.error = errorCallback;
    C.then(function (Module) {
      Module.exec_error = errorCallback;
    });
    return this;
  };
  /**
   * Starts the Zenroom VM, using the parameters previously set.
   *
   * This is usually the last method of the chain. Just like the
   * other methods, it returns the zenroom module itself, so it
   * can be used for other calls if you need to run more executions
   * in a row.
   *
   * @example <caption>Example usage of `zenroom_exec()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const script = 'print("hello")';
   * zenroom.script(script).zenroom_exec()
   *
   * @returns {object} as zenroom module
   */


  var zenroom_exec = function zenroom_exec() {
    zenroomExec(self.script, self.conf, self.keys, self.data);
    return this;
  };
  /**
   * Execute [Zencode](https://dev.zenroom.org/#/pages/zencode)
   * smart contracts, using the previously setted options.
   *
   * This is usually the last method of the chain. Just like the
   * other methods, it returns the zenroom module itself, so it
   * can be used for other calls if you need to run more executions
   * in a row.
   *
   * @example <caption>Example usage of `zencode_exec()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const zencode = 'print("hello")';
   * zenroom.script(script).zencode_exec()
   *
   * @returns {object} as zenroom module
   */


  var zencode_exec = function zencode_exec() {
    zencodeExec(self.script, self.conf, self.keys, self.data);
    return this;
  };
  /**
   * This method allows the configuration of your call by passing one
   * configuration option object. You can chain methods after this anyway.
   *
   * If some attribute is already set, those will be overwritten by the new
  options.
   *
   * The following options are available:
   * <ul>
   *   <li><strong>script</strong></li>
   *   <li><strong>keys</strong></li>
   *   <li><strong>conf</strong></li>
   *   <li><strong>data</strong></li>
   *   <li><strong>print</strong></li>
   *   <li><strong>print_err</strong></li>
   *   <li><strong>success</strong></li>
   *   <li><strong>error</strong></li>
   * </ul>
   *
   * @example <caption>Example usage of `init()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const encrypt_secret_to_many = {
   *  script: `keyring = ECDH.new()
   *            secret = str(DATA)
   *            keys = JSON.decode(KEYS)
   *            keyring:private( base64(keys.keyring.secret) )
   *            res = {}
   *            for name,pubkey in pairs(keys.recipients) do
   *              pub = base64(pubkey)
   *              enc = ECDH.encrypt(keyring,pub,secret,keyring:public())
   *              res[name] = str( MSG.pack( map(enc,base64) ) ):base64()
   *            end
   *            print(JSON.encode(res))`,
   *
   *  keys: {
   *      keyring : {
   *        public : "BHMjcDM/aljpi8pNxFQ436R6F3J+kaB/Xk1kAVFPmkoLVyeFltDZPgiIYRquh+m2IfvPioBfet7YCd5vVXYoRTk=",
   *        secret : "ChW5qi5y//ISDIHKx5Fvxl+XY8IyDGVBHUfELp3PqJQ="
   *      },
   *      recipients : {
   *        paulus : "BBUw6Nr3A30cN65maERvAk1cEv2Ji6Vs80kSlpodOC0SCtM8ucaS7e+s158uVMSr3BsvIXVspBeafiL8Qb3kcgc=",
   *        mayo : "BHqBoQ2WJ3/FGVNTXzdIc+K/HzNx05bWzEhn8m58FvSsaqWVdH52jI6fQWdkdjnbqVKCJGmbjA/OCJ+IKHbiySI=",
   *        mark : "BFgkjrRMvN+wkJ6qA4UvMaNlYBvl37C9cNYGkqOE4w43AUzkEzcyIIdE6BrgOEUEVefhOOnO6SCBQMgXHXJUUPY=",
   *        francesca : "BCo102mVybieKMyhex8tnVtFM5+Wo1oP02k8JVwKF9OLIjw7w0LmofItbuAcfWl9rcoe++XLI3sySZnqljIfeyU=",
   *        jim : "BEs1jeqL0nVwFi7OmG4YdtlWuKADyOvZR4XHpLAEswg8ONPXQHvwJ8+PkHkphoORfSjk2045bMdYkwboU4FdG2Y=",
   *        jaromil : "BBZYJtHvFg0vGCxPROAWrThcGZ+vFZJj86k+uncjvbm4DysIg7cWS3J6GrcJKCY55Uf40m2KfBwfaT+T7TTO1e8="
   *      }
   *  },
   *
   *  data: 'This is a secret message.'
   * }
   *
   *
   * zenroom.init(encrypt_secret_to_many).zenroom_exec()
   *
   * @returns {object} as zenroom module
   */


  var init = function init(options) {
    /* istanbul ignore next */
    self.options = Object.assign(self.options, options) || {};
    script(self.options.script || '');
    keys(self.options.keys || null);
    conf(self.options.conf || null);
    data(self.options.data || null);
    print(self.options.print || function (text) {
      return console.log(text);
    });
    print_err(self.options.print_err || function (text) {
      return console.error(text);
    });
    success(self.options.success || new Function()); // eslint-disable-line no-new-func

    error(self.options.error || new Function()); // eslint-disable-line no-new-func

    return this;
  };

  var __setup = function __setup() {
    print(self.print || function (text) {
      return console.log(text);
    });
    print_err(self.print_err || function (text) {
      return console.error(text);
    });
    success(self.success || function () {});
    error(self.error || function () {});
  };
  /**
   * Reset the options previously set, and cleans up the zenroom module.
   *
   * This is can easily be the last method of the chain. Just like the
   * other methods, it returns the zenroom module itself, so it can be
   * used for other calls if you need to run more executions in a row.
   *
   * @example <caption>Example usage of `reset()`</caption>
   * // returns zenroom
   * import zenroom from 'zenroom'
   * // or without ES6 syntax
   * // const zenroom = require('zenroom')
   *
   * const script = 'print("hello")';
   * zenroom.script(script)
   *        .zenroom_exec()    // This runs the script
   *        .reset()
   *        .zenroom_exec()    // This does not run the script anymore
   *
   * @returns {object} as zenroom module
   */


  var reset = function reset() {
    self = {};
    self.options = {};

    __setup();

    return this;
  };

  __setup();

  return {
    script: script,
    keys: keys,
    conf: conf,
    data: data,
    print: print,
    print_err: print_err,
    success: success,
    zenroom_exec: zenroom_exec,
    zencode_exec: zencode_exec,
    error: error,
    init: init,
    reset: reset,
    __debug: __debug
  };
}();

module.exports = zenroom;
},{"../dist/lib/zenroom.js":571,"core-js/modules/es.array.iterator":370,"core-js/modules/es.object.assign":428,"core-js/modules/es.object.to-string":451,"core-js/modules/es.string.iterator":490,"core-js/modules/es.symbol":514,"core-js/modules/es.symbol.description":510,"core-js/modules/es.symbol.iterator":513,"core-js/modules/web.dom-collections.iterator":561,"core-js/stable":568,"regenerator-runtime/runtime.js":570}],573:[function(require,module,exports){
module.exports = require('./dist/wrapper')

},{"./dist/wrapper":572}]},{},[573]);
